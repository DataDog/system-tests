name: Lib injection test runner
description: "Lib injection tests runner"

inputs:
  version:
    description: Version dev or prod
    required: true
  library:
    description: Library language java,python...
    required: true
  scenarios:
    description: scenarios will be run
    required: true
  DD_API_KEY:
    description: DD API key
    required: true
  DD_CI_API_KEY:
    description: DD API key to upload results to CI Visibility
    required: false
  archive_logs:
    description: Enable download logs
    required: false
  ci_visibility:
    description: Upload results to CI Visibility
    required: false
runs:
  using: composite

  steps:

      - name: Build
        run: SYSTEM_TEST_BUILD_ATTEMPTS=3 ./build.sh
        shell: bash

      - name: Run DEFAULT scenario
        run: ./run.sh DEFAULT
        shell: bash
        env:
          DD_API_KEY: ${{ inputs.DD_API_KEY }}
        if: contains(fromJson(inputs.scenarios), 'DEFAULT')

      - name: Run PROFILING scenario
        run: ./run.sh PROFILING
        shell: bash
        env:
          DD_API_KEY: ${{ inputs.DD_API_KEY }}
        if: contains(fromJson(inputs.scenarios), 'PROFILING')

      - name: Run CGROUP scenario
        run: ./run.sh CGROUP
        shell: bash
        env:
          DD_API_KEY: ${{ inputs.DD_API_KEY }}
        if: contains(fromJson(inputs.scenarios), 'CGROUP')

      - name: Run TRACE_PROPAGATION_STYLE_W3C scenario
        run: ./run.sh TRACE_PROPAGATION_STYLE_W3C
        shell: bash
        env:
          DD_API_KEY: ${{ inputs.DD_API_KEY }}
        if: ${{ inputs.library != 'python' && contains(fromJson(inputs.scenarios), 'TRACE_PROPAGATION_STYLE_W3C') }}

      - name: Run INTEGRATIONS scenario
        run: ./run.sh INTEGRATIONS
        env:
          DD_API_KEY: ${{ inputs.DD_API_KEY }}
        shell: bash
        if: contains(fromJson(inputs.scenarios), 'INTEGRATIONS')
        
      - name: Run LIBRARY_CONF_CUSTOM_HEADERS_SHORT scenario
        run: ./run.sh LIBRARY_CONF_CUSTOM_HEADERS_SHORT
        env:
          DD_API_KEY: ${{ inputs.DD_API_KEY }}
        shell: bash
        if: contains(fromJson(inputs.scenarios), 'LIBRARY_CONF_CUSTOM_HEADERS_SHORT')

      - name: Run LIBRARY_CONF_CUSTOM_HEADERS_LONG scenario
        run: ./run.sh LIBRARY_CONF_CUSTOM_HEADERS_LONG
        env:
          DD_API_KEY: ${{ inputs.DD_API_KEY }}
        shell: bash
        if: contains(fromJson(inputs.scenarios), 'LIBRARY_CONF_CUSTOM_HEADERS_LONG')

      - name: Run REMOTE_CONFIG_MOCKED_BACKEND_ASM_FEATURES scenario
        run: ./run.sh REMOTE_CONFIG_MOCKED_BACKEND_ASM_FEATURES
        env:
          DD_API_KEY: ${{ inputs.DD_API_KEY }}
        shell: bash
        if: contains(fromJson(inputs.scenarios), 'REMOTE_CONFIG_MOCKED_BACKEND_ASM_FEATURES')

      - name: Run REMOTE_CONFIG_MOCKED_BACKEND_LIVE_DEBUGGING scenario
        run: ./run.sh REMOTE_CONFIG_MOCKED_BACKEND_LIVE_DEBUGGING
        env:
          DD_API_KEY: ${{ inputs.DD_API_KEY }}
        shell: bash
        if: contains(fromJson(inputs.scenarios), 'REMOTE_CONFIG_MOCKED_BACKEND_LIVE_DEBUGGING')

      - name: Run REMOTE_CONFIG_MOCKED_BACKEND_ASM_DD scenario
        run: ./run.sh REMOTE_CONFIG_MOCKED_BACKEND_ASM_DD
        env:
          DD_API_KEY: ${{ inputs.DD_API_KEY }}
        shell: bash
        if: contains(fromJson(inputs.scenarios), 'REMOTE_CONFIG_MOCKED_BACKEND_ASM_DD')

      - name: Run REMOTE_CONFIG_MOCKED_BACKEND_ASM_FEATURES_NOCACHE scenario
        run: ./run.sh REMOTE_CONFIG_MOCKED_BACKEND_ASM_FEATURES_NOCACHE
        env:
          DD_API_KEY: ${{ inputs.DD_API_KEY }}
        shell: bash
        if: contains(fromJson(inputs.scenarios), 'REMOTE_CONFIG_MOCKED_BACKEND_ASM_FEATURES_NOCACHE')

      - name: Run REMOTE_CONFIG_MOCKED_BACKEND_LIVE_DEBUGGING_NOCACHE scenario
        run: ./run.sh REMOTE_CONFIG_MOCKED_BACKEND_LIVE_DEBUGGING_NOCACHE
        env:
          DD_API_KEY: ${{ inputs.DD_API_KEY }}
        shell: bash
        if: contains(fromJson(inputs.scenarios), 'REMOTE_CONFIG_MOCKED_BACKEND_LIVE_DEBUGGING_NOCACHE')

      - name: Run REMOTE_CONFIG_MOCKED_BACKEND_ASM_DD_NOCACHE scenario
        run: ./run.sh REMOTE_CONFIG_MOCKED_BACKEND_ASM_DD_NOCACHE
        env:
          DD_API_KEY: ${{ inputs.DD_API_KEY }}
        shell: bash
        if: contains(fromJson(inputs.scenarios), 'REMOTE_CONFIG_MOCKED_BACKEND_ASM_DD_NOCACHE')

      - name: Run SAMPLING scenario
        run: ./run.sh SAMPLING
        env:
          DD_API_KEY: ${{ inputs.DD_API_KEY }}
        shell: bash
        if: contains(fromJson(inputs.scenarios), 'SAMPLING')

      - name: Run APPSEC_MISSING_RULES scenario
        run: ./run.sh APPSEC_MISSING_RULES
        env:
          DD_API_KEY: ${{ inputs.DD_API_KEY }}
        shell: bash
        if: contains(fromJson(inputs.scenarios), 'APPSEC_MISSING_RULES')

      - name: Run APPSEC_CORRUPTED_RULES scenario
        run: ./run.sh APPSEC_CORRUPTED_RULES
        env:
          DD_API_KEY: ${{ inputs.DD_API_KEY }}
        shell: bash
        if: contains(fromJson(inputs.scenarios), 'APPSEC_CORRUPTED_RULES')

      - name: Run APPSEC_CUSTOM_RULES scenario
        run: ./run.sh APPSEC_CUSTOM_RULES
        env:
          DD_API_KEY: ${{ inputs.DD_API_KEY }}
        shell: bash
        if: contains(fromJson(inputs.scenarios), 'APPSEC_CUSTOM_RULES')

      - name: Run APPSEC_RULES_MONITORING_WITH_ERRORS scenario
        run: ./run.sh APPSEC_RULES_MONITORING_WITH_ERRORS
        env:
          DD_API_KEY: ${{ inputs.DD_API_KEY }}
        shell: bash
        if: contains(fromJson(inputs.scenarios), 'APPSEC_RULES_MONITORING_WITH_ERRORS')

      - name: Run APPSEC_BLOCKING scenario
        run: ./run.sh APPSEC_BLOCKING
        env:
          DD_API_KEY: ${{ inputs.DD_API_KEY }}
        shell: bash
        if: contains(fromJson(inputs.scenarios), 'APPSEC_BLOCKING')

      - name: Run APPSEC_DISABLED scenario
        run: ./run.sh APPSEC_DISABLED
        env:
          DD_API_KEY: ${{ inputs.DD_API_KEY }}
        shell: bash
        if: contains(fromJson(inputs.scenarios), 'APPSEC_DISABLED')

      - name: Run APPSEC_LOW_WAF_TIMEOUT scenario
        run: ./run.sh APPSEC_LOW_WAF_TIMEOUT
        env:
          DD_API_KEY: ${{ inputs.DD_API_KEY }}
        shell: bash
        if: contains(fromJson(inputs.scenarios), 'APPSEC_LOW_WAF_TIMEOUT')

      - name: Run APPSEC_CUSTOM_OBFUSCATION scenario
        run: ./run.sh APPSEC_CUSTOM_OBFUSCATION
        env:
          DD_API_KEY: ${{ inputs.DD_API_KEY }}
        shell: bash
        if: contains(fromJson(inputs.scenarios), 'APPSEC_CUSTOM_OBFUSCATION')

      - name: Run APPSEC_RATE_LIMITER scenario
        run: ./run.sh APPSEC_RATE_LIMITER
        env:
          DD_API_KEY: ${{ inputs.DD_API_KEY }}
        shell: bash
        if: contains(fromJson(inputs.scenarios), 'APPSEC_RATE_LIMITER')

      - name: Run APPSEC_IP_BLOCKING scenario
        run: ./run.sh APPSEC_IP_BLOCKING
        env:
          DD_API_KEY: ${{ inputs.DD_API_KEY }}
        shell: bash
        if: contains(fromJson(inputs.scenarios), 'APPSEC_IP_BLOCKING')

      - name: Run APPSEC_RUNTIME_ACTIVATION scenario
        run: ./run.sh APPSEC_RUNTIME_ACTIVATION
        env:
          DD_API_KEY: ${{ inputs.DD_API_KEY }}
        shell: bash
        if: contains(fromJson(inputs.scenarios), 'APPSEC_RUNTIME_ACTIVATION')

      - name: Compress logs
        shell: bash
        if: ${{  inputs.archive_logs == 'true' && always() }}
        run: tar -czvf artifact.tar.gz $(ls | grep logs)
      - name: Upload artifact
        shell: bash
        if: ${{ inputs.archive_logs == 'true' && always() }}
        uses: actions/upload-artifact@v3
        with:
          name: logs_${{ inputs.library }}_${{ WEBLOG_VARIANT }}_${{ inputs.version }}_1
          path: artifact.tar.gz
      - name: Upload results CI Visibility
        shell: bash
        if: ${{ inputs.ci_visibility == 'true' && always() }}
        run: ./utils/scripts/upload_results_CI_visibility.sh ${{ inputs.version }} system-tests ${{ github.run_id }}-${{ github.run_attempt }}
        env:
          DD_API_KEY: ${{ inputs.DD_CI_API_KEY }}
      - name: Print fancy log report
        shell: bash
        if: ${{ always() }}
        run: python utils/scripts/markdown_logs.py >> $GITHUB_STEP_SUMMARY
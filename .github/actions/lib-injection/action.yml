name: 'Build System-test base images'
description: 'Builds the system-test docker base images'

inputs:
  library:
    description: 'Testing library'
    required: true

  weblog:
    description: 'weblog to be tested'
    required: true

  version:
    description: 'Version of the library to be tested: dev for latest snapshot, prod for release version'
    required: true

  gh_token:
    description: 'GitHub token'
    required: true

  is_lang_supported_version:
    description: 'We are testing weblogs that run with supported lang version or not'
    default: 'true'
    required: false

  arch:
    description: 'Images architecture to be tested' 
    required: true

  lib_injection_group:
    description: 'Group of lib-injection tests'
    default: 'lib-init'
    required: true

runs:
  using: "composite"
  steps:

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
  
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Log in to the Container registry
      uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # 3.0.0
      with:
        registry: ghcr.io/datadog
        username: ${{ github.actor }}
        password: ${{ inputs.gh_token }}

    - name: Build weblog image
      shell: bash
      run: ./build.sh -l ${{ inputs.library }} -w ${{ inputs.weblog }} -lg ${{ inputs.lib_injection_group }} --docker-platform ${{ inputs.arch }}
      env:
        ENV: ${{ inputs.version }}

    - name: Install runner
      uses: ./.github/actions/install_runner       

    - name: Validate supported lang init image
      if: ${{ inputs.is_lang_supported_version == 'true' && inputs.lib_injection_group=='lib-init'}}
      shell: bash
      run: ./run.sh LIB_INJECTION_VALIDATION


    - name: Validate NOT supported lang init image
      if: ${{ inputs.is_lang_supported_version != 'true' && inputs.lib_injection_group=='lib-init'}}
      shell: bash
      run: ./run.sh LIB_INJECTION_VALIDATION_NOT_SUPPORTED_LANG

    - name: Compress logs
      shell: bash
      id: compress_logs
      if: always()
      run: tar -czvf artifact.tar.gz $(ls | grep logs)

    - name: Upload artifact
      if: always() && steps.compress_logs.outcome == 'success'
      uses: actions/upload-artifact@v4
      with:
        name: logs_${{ inputs.lib_injection_group }}_${{ inputs.library }}_${{ inputs.weblog }}_${{ inputs.version }}
        path: artifact.tar.gz
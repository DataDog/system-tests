name: End-to-end tests

on:
  workflow_call:
    inputs:
      library:
        description: "Library to test"
        required: true
        type: string
      ref:
        description: "system-tests ref to run the tests on (can be any valid branch, tag or SHA in system-tests repo)"
        type: string
      scenarios:
        description: "JSON array of scenarios to run"
        default: "[]"
        required: false
        type: string
      weblog:
        description: "Weblog name"
        required: true
        type: string
      weblog_instance:
        description: "Weblog instance name, if several job runs the same weblog, usefull to distinguish them in UI"
        required: false
        type: string
        default: ''
      force_execute:
        description: "List of nodeid to force execute, separated by comma"
        required: false
        type: string
        default: ''
      binaries_artifact:
        description: "Artifact name containing the binaries to test"
        default: ''
        required: false
        type: string
      ci_environment:
        description: "Which CI environment is running the tests, used for FPD"
        default: 'custom'
        required: false
        type: string
      _build_python_base_images:
        description: "Shall we build python base images for tests on python tracer"
        default: false
        required: false
        type: boolean
      _build_buddies_images:
        description: "Shall we build buddies images"
        default: false
        required: false
        type: boolean
      _build_proxy_image:
        description: "Shall we build proxy image"
        default: false
        required: false
        type: boolean
      _build_lambda_proxy_image:
        description: "Shall we build the lambda-proxy image"
        default: false
        required: false
        type: boolean
      push_to_feature_parity_dashbaord:
        description: "Shall we push results to Feature Parity Dashbaord"
        default: false
        required: false
        type: boolean
      skip_empty_scenarios:
        description: "Skip scenarios that contains only xfail or irrelevant tests"
        default: false
        required: false
        type: boolean
      _enable_replay_scenarios:
        description: "Enable replay scenarios, should only used in system-tests CI"
        default: false
        required: false
        type: boolean
      logs_artifact_name:
        description: "The name of the artifact to use for logs"
        required: true
        type: string
      artifact_retention_days:
        description: "Maximum retention of artifacts generated by upload-artifact action"
        default: 14
        required: false
        type: number
      push_to_test_optimization:
        description: "Push test result to DataDog Test Optimization"
        default: false
        required: false
        type: boolean

env:
  REGISTRY: ghcr.io

jobs:
  main:
    name: "${{ inputs.weblog }} ${{ inputs.weblog_instance }}"
    runs-on: ubuntu-latest
    env:
      SYSTEM_TESTS_REPORT_ENVIRONMENT: ${{ inputs.ci_environment }}
      SYSTEM_TESTS_REPORT_RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      SYSTEM_TESTS_SKIP_EMPTY_SCENARIO: ${{ inputs.skip_empty_scenarios }}
      SYSTEM_TESTS_FORCE_EXECUTE: ${{ inputs.force_execute }}
    steps:
    - name: Compute ref
      id: compute_ref
      run: |
        if [[ "${{ inputs.ref }}" != "" ]]; then
          echo "ref=${{ inputs.ref }}" >> $GITHUB_OUTPUT
        elif [[ "${{ github.repository }}" == "DataDog/system-tests" ]]; then
          echo "ref=" >> $GITHUB_OUTPUT
        else
          echo "ref=main" >> $GITHUB_OUTPUT
        fi
    - name: Checkout
      uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
      with:
        repository: 'DataDog/system-tests'
        ref: ${{ steps.compute_ref.outputs.ref }}
    - name: Install runner
      uses: ./.github/actions/install_runner
    - name: Get binaries artifact
      if : ${{ inputs.binaries_artifact != '' }}
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
      with:
        name: ${{ inputs.binaries_artifact }}
        path: binaries/
    - name: Build python's weblog base images
      if: inputs.library == 'python' && inputs._build_python_base_images
      run: |
        ./utils/build/build_python_base_images.sh
    - name: Build buddies weblog images
      if: inputs._build_buddies_images
      run: ./utils/build/build_tracer_buddies.sh
    - name: Build proxy image
      if: inputs._build_proxy_image
      run: ./build.sh -i proxy
    - name: Build lambda-proxy image
      if: inputs._build_lambda_proxy_image
      run: ./build.sh -i lambda-proxy
    - name: Pull images
      uses: ./.github/actions/pull_images
      with:
        library: ${{ inputs.library }}
        weblog: ${{ inputs.weblog }}
        scenarios: ${{ inputs.scenarios }}
        dockerhub_username: ${{ secrets.DOCKERHUB_USERNAME }}
        dockerhub_token: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Log in to the Container registry
      if: ${{ inputs.library == 'ruby' }}
      run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
    - name: Build weblog
      id: build
      run: SYSTEM_TEST_BUILD_ATTEMPTS=3 ./build.sh ${{ inputs.library }} -i weblog -w ${{ inputs.weblog }}

    - name: Run APPSEC_STANDALONE scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"APPSEC_STANDALONE"')
      run: ./run.sh APPSEC_STANDALONE
    - name: Run APPSEC_STANDALONE_API_SECURITY scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"APPSEC_STANDALONE_API_SECURITY"')
      run: ./run.sh APPSEC_STANDALONE_API_SECURITY
    - name: Run TRACE_STATS_COMPUTATION scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"TRACE_STATS_COMPUTATION"')
      run: ./run.sh TRACE_STATS_COMPUTATION
    - name: Run IAST_STANDALONE scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"IAST_STANDALONE"')
      run: ./run.sh IAST_STANDALONE
    - name: Run SCA_STANDALONE scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"SCA_STANDALONE"')
      run: ./run.sh SCA_STANDALONE
    - name: Run IAST_DEDUPLICATION scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"IAST_DEDUPLICATION"')
      run: ./run.sh IAST_DEDUPLICATION
    - name: Run DEFAULT scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"DEFAULT"')
      run: ./run.sh DEFAULT
    - name: Run GRAPHQL_APPSEC scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"GRAPHQL_APPSEC"')
      run: ./run.sh GRAPHQL_APPSEC
    - name: Run GRAPHQL_ERROR_TRACKING scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"GRAPHQL_ERROR_TRACKING"')
      run: ./run.sh GRAPHQL_ERROR_TRACKING
    - name: Run IPV6 scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"IPV6"')
      run: ./run.sh IPV6
    - name: Run CROSSED_TRACING_LIBRARIES scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"CROSSED_TRACING_LIBRARIES"')
      run: ./run.sh CROSSED_TRACING_LIBRARIES
    - name: Run PROFILING scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"PROFILING"')
      run: |
        cat /proc/sys/kernel/perf_event_paranoid
        sudo sysctl kernel.perf_event_paranoid=1
        sudo sysctl -p
        ./run.sh PROFILING
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run TRACE_PROPAGATION_STYLE_W3C scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"TRACE_PROPAGATION_STYLE_W3C"')
      run: ./run.sh TRACE_PROPAGATION_STYLE_W3C
    - name: Run INTEGRATIONS scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"INTEGRATIONS"')
      run: ./run.sh INTEGRATIONS
    - name: Run INTEGRATIONS_AWS scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"INTEGRATIONS_AWS"')
      run: ./run.sh INTEGRATIONS_AWS
    - name: Run APM_TRACING_E2E_OTEL scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"APM_TRACING_E2E_OTEL"')
      run: ./run.sh APM_TRACING_E2E_OTEL
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
        DD_APPLICATION_KEY: ${{ secrets.DD_APPLICATION_KEY }}
        DD_APP_KEY: ${{ secrets.DD_APPLICATION_KEY }}
    - name: Run APM_TRACING_E2E_SINGLE_SPAN scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"APM_TRACING_E2E_SINGLE_SPAN"')
      run: ./run.sh APM_TRACING_E2E_SINGLE_SPAN
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
        DD_APP_KEY: ${{ secrets.DD_APPLICATION_KEY }}
    - name: Run APM_TRACING_EFFICIENT_PAYLOAD scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"APM_TRACING_EFFICIENT_PAYLOAD"')
      run: ./run.sh APM_TRACING_EFFICIENT_PAYLOAD
    - name: Run LIBRARY_CONF_CUSTOM_HEADER_TAGS scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"LIBRARY_CONF_CUSTOM_HEADER_TAGS"')
      run: ./run.sh LIBRARY_CONF_CUSTOM_HEADER_TAGS
    - name: Run LIBRARY_CONF_CUSTOM_HEADER_TAGS_INVALID scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"LIBRARY_CONF_CUSTOM_HEADER_TAGS_INVALID"')
      run: ./run.sh LIBRARY_CONF_CUSTOM_HEADER_TAGS_INVALID
    - name: Run RUNTIME_METRICS_ENABLED scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"RUNTIME_METRICS_ENABLED"')
      run: ./run.sh RUNTIME_METRICS_ENABLED
    - name: Run TRACING_CONFIG_EMPTY scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"TRACING_CONFIG_EMPTY"')
      run: ./run.sh TRACING_CONFIG_EMPTY
    - name: Run TRACING_CONFIG_NONDEFAULT scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"TRACING_CONFIG_NONDEFAULT"')
      run: ./run.sh TRACING_CONFIG_NONDEFAULT
    - name: Run TRACING_CONFIG_NONDEFAULT_2 scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"TRACING_CONFIG_NONDEFAULT_2"')
      run: ./run.sh TRACING_CONFIG_NONDEFAULT_2
    - name: Run TRACING_CONFIG_NONDEFAULT_3 scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"TRACING_CONFIG_NONDEFAULT_3"')
      run: ./run.sh TRACING_CONFIG_NONDEFAULT_3
    - name: Run TRACING_CONFIG_NONDEFAULT_4 scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"TRACING_CONFIG_NONDEFAULT_4"')
      run: ./run.sh TRACING_CONFIG_NONDEFAULT_4
    - name: Run REMOTE_CONFIG_MOCKED_BACKEND_ASM_FEATURES scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"REMOTE_CONFIG_MOCKED_BACKEND_ASM_FEATURES"')
      run: ./run.sh REMOTE_CONFIG_MOCKED_BACKEND_ASM_FEATURES
    - name: Run REMOTE_CONFIG_MOCKED_BACKEND_LIVE_DEBUGGING scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"REMOTE_CONFIG_MOCKED_BACKEND_LIVE_DEBUGGING"')
      run: ./run.sh REMOTE_CONFIG_MOCKED_BACKEND_LIVE_DEBUGGING
    - name: Run REMOTE_CONFIG_MOCKED_BACKEND_ASM_DD scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"REMOTE_CONFIG_MOCKED_BACKEND_ASM_DD"')
      run: ./run.sh REMOTE_CONFIG_MOCKED_BACKEND_ASM_DD
    - name: Run REMOTE_CONFIG_MOCKED_BACKEND_ASM_FEATURES_NOCACHE scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"REMOTE_CONFIG_MOCKED_BACKEND_ASM_FEATURES_NOCACHE"')
      run: ./run.sh REMOTE_CONFIG_MOCKED_BACKEND_ASM_FEATURES_NOCACHE
    - name: Run REMOTE_CONFIG_MOCKED_BACKEND_ASM_DD_NOCACHE scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"REMOTE_CONFIG_MOCKED_BACKEND_ASM_DD_NOCACHE"')
      run: ./run.sh REMOTE_CONFIG_MOCKED_BACKEND_ASM_DD_NOCACHE
    - name: Run AGENT_SUPPORTING_SPAN_EVENTS scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"AGENT_SUPPORTING_SPAN_EVENTS"')
      run: ./run.sh AGENT_SUPPORTING_SPAN_EVENTS
    - name: Run AGENT_NOT_SUPPORTING_SPAN_EVENTS scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"AGENT_NOT_SUPPORTING_SPAN_EVENTS"')
      run: ./run.sh AGENT_NOT_SUPPORTING_SPAN_EVENTS
    - name: Run APPSEC_MISSING_RULES scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"APPSEC_MISSING_RULES"')
      # nginx 1.2.0 refuses to start without a valid rules files
      run: ./run.sh APPSEC_MISSING_RULES
    - name: Run APPSEC_CUSTOM_RULES scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"APPSEC_CUSTOM_RULES"')
      run: ./run.sh APPSEC_CUSTOM_RULES
    - name: Run APPSEC_CORRUPTED_RULES scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"APPSEC_CORRUPTED_RULES"')
      # nginx 1.2.0 refuses to start without a valid rules files
      run: ./run.sh APPSEC_CORRUPTED_RULES
    - name: Run APPSEC_RULES_MONITORING_WITH_ERRORS scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"APPSEC_RULES_MONITORING_WITH_ERRORS"')
      run: ./run.sh APPSEC_RULES_MONITORING_WITH_ERRORS
    - name: Run APPSEC_BLOCKING scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"APPSEC_BLOCKING"')
      run: ./run.sh APPSEC_BLOCKING
    - name: Run EVERYTHING_DISABLED scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"EVERYTHING_DISABLED"')
      run: ./run.sh EVERYTHING_DISABLED
    - name: Run APPSEC_LOW_WAF_TIMEOUT scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"APPSEC_LOW_WAF_TIMEOUT"')
      run: ./run.sh APPSEC_LOW_WAF_TIMEOUT
    - name: Run APPSEC_CUSTOM_OBFUSCATION scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"APPSEC_CUSTOM_OBFUSCATION"')
      run: ./run.sh APPSEC_CUSTOM_OBFUSCATION
    - name: Run APPSEC_RATE_LIMITER scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"APPSEC_RATE_LIMITER"')
      run: ./run.sh APPSEC_RATE_LIMITER
    - name: Run APPSEC_BLOCKING_FULL_DENYLIST scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"APPSEC_BLOCKING_FULL_DENYLIST"')
      run: ./run.sh APPSEC_BLOCKING_FULL_DENYLIST
    - name: Run APPSEC_AND_RC_ENABLED scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"APPSEC_AND_RC_ENABLED"')
      run: ./run.sh APPSEC_AND_RC_ENABLED
    - name: Run APPSEC_RUNTIME_ACTIVATION scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"APPSEC_RUNTIME_ACTIVATION"')
      run: ./run.sh APPSEC_RUNTIME_ACTIVATION
    - name: Run APPSEC_WAF_TELEMETRY scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"APPSEC_WAF_TELEMETRY"')
      run: ./run.sh APPSEC_WAF_TELEMETRY
    - name: Run APPSEC_API_SECURITY scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"APPSEC_API_SECURITY"')
      run: ./run.sh APPSEC_API_SECURITY
    - name: Run APPSEC_API_SECURITY_RC scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"APPSEC_API_SECURITY_RC"')
      run: ./run.sh APPSEC_API_SECURITY_RC
    - name: Run APPSEC_API_SECURITY_NO_RESPONSE_BODY scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"APPSEC_API_SECURITY_NO_RESPONSE_BODY"')
      run: ./run.sh APPSEC_API_SECURITY_NO_RESPONSE_BODY
    - name: Run APPSEC_ATO_SDK scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"APPSEC_ATO_SDK"')
      run: ./run.sh APPSEC_ATO_SDK
    - name: Run APPSEC_API_SECURITY_WITH_SAMPLING scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"APPSEC_API_SECURITY_WITH_SAMPLING"')
      run: |
        ./run.sh APPSEC_API_SECURITY_WITH_SAMPLING
        cat ./logs_appsec_api_security_with_sampling/tests.log 2>/dev/null | grep "API SECURITY" || true
    - name: Run APPSEC_AUTO_EVENTS_EXTENDED scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"APPSEC_AUTO_EVENTS_EXTENDED"')
      run: ./run.sh APPSEC_AUTO_EVENTS_EXTENDED
    - name: Run APPSEC_AUTO_EVENTS_RC scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"APPSEC_AUTO_EVENTS_RC"')
      run: ./run.sh APPSEC_AUTO_EVENTS_RC
    - name: Run APPSEC_RASP scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"APPSEC_RASP"')
      run: ./run.sh APPSEC_RASP
    - name: Run APPSEC_STANDALONE_RASP scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"APPSEC_STANDALONE_RASP"')
      run: ./run.sh APPSEC_STANDALONE_RASP
    - name: Run APPSEC_RASP_NON_BLOCKING scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"APPSEC_RASP_NON_BLOCKING"')
      run: ./run.sh APPSEC_RASP_NON_BLOCKING
    - name: Run APPSEC_META_STRUCT_DISABLED scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"APPSEC_META_STRUCT_DISABLED"')
      run: ./run.sh APPSEC_META_STRUCT_DISABLED
    - name: Run SAMPLING scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"SAMPLING"')
      run: ./run.sh SAMPLING
    - name: Run TELEMETRY_APP_STARTED_PRODUCTS_DISABLED scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"TELEMETRY_APP_STARTED_PRODUCTS_DISABLED"')
      run: ./run.sh TELEMETRY_APP_STARTED_PRODUCTS_DISABLED
    - name: Run TELEMETRY_ENHANCED_CONFIG_REPORTING scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"TELEMETRY_ENHANCED_CONFIG_REPORTING"')
      run: ./run.sh TELEMETRY_ENHANCED_CONFIG_REPORTING
    - name: Run TELEMETRY_LOG_GENERATION_DISABLED scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"TELEMETRY_LOG_GENERATION_DISABLED"')
      run: ./run.sh TELEMETRY_LOG_GENERATION_DISABLED
    - name: Run TELEMETRY_METRIC_GENERATION_DISABLED scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"TELEMETRY_METRIC_GENERATION_DISABLED"')
      run: ./run.sh TELEMETRY_METRIC_GENERATION_DISABLED
    - name: Run TELEMETRY_METRIC_GENERATION_ENABLED scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"TELEMETRY_METRIC_GENERATION_ENABLED"')
      run: ./run.sh TELEMETRY_METRIC_GENERATION_ENABLED
    - name: Run TELEMETRY_DEPENDENCY_LOADED_TEST_FOR_DEPENDENCY_COLLECTION_DISABLED scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"TELEMETRY_DEPENDENCY_LOADED_TEST_FOR_DEPENDENCY_COLLECTION_DISABLED"')
      run: ./run.sh TELEMETRY_DEPENDENCY_LOADED_TEST_FOR_DEPENDENCY_COLLECTION_DISABLED
    - name: Run DEBUGGER_PROBES_STATUS scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"DEBUGGER_PROBES_STATUS"')
      run: ./run.sh DEBUGGER_PROBES_STATUS
    - name: Run DEBUGGER_PROBES_SNAPSHOT scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"DEBUGGER_PROBES_SNAPSHOT"')
      run: ./run.sh DEBUGGER_PROBES_SNAPSHOT
    - name: Run DEBUGGER_PROBES_SNAPSHOT_WITH_SCM scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"DEBUGGER_PROBES_SNAPSHOT_WITH_SCM"')
      run: ./run.sh DEBUGGER_PROBES_SNAPSHOT_WITH_SCM
    - name: Run DEBUGGER_PII_REDACTION scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"DEBUGGER_PII_REDACTION"')
      run: ./run.sh DEBUGGER_PII_REDACTION
    - name: Run DEBUGGER_EXPRESSION_LANGUAGE scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"DEBUGGER_EXPRESSION_LANGUAGE"')
      run: ./run.sh DEBUGGER_EXPRESSION_LANGUAGE
    - name: Run DEBUGGER_EXCEPTION_REPLAY scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"DEBUGGER_EXCEPTION_REPLAY"')
      run: ./run.sh DEBUGGER_EXCEPTION_REPLAY
    - name: Run DEBUGGER_SYMDB scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"DEBUGGER_SYMDB"')
      run: ./run.sh DEBUGGER_SYMDB
    - name: Run DEBUGGER_INPRODUCT_ENABLEMENT scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"DEBUGGER_INPRODUCT_ENABLEMENT"')
      run: ./run.sh DEBUGGER_INPRODUCT_ENABLEMENT
    - name: Run DEBUGGER_TELEMETRY scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"DEBUGGER_TELEMETRY"')
      run: ./run.sh DEBUGGER_TELEMETRY
    - name: Run OTEL_INTEGRATIONS scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"OTEL_INTEGRATIONS"')
      run: ./run.sh OTEL_INTEGRATIONS
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
        DD_APPLICATION_KEY: ${{ secrets.DD_APPLICATION_KEY }}
        DD_APP_KEY: ${{ secrets.DD_APPLICATION_KEY }}
    - name: Run OTEL_TRACING_E2E scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"OTEL_TRACING_E2E"')
      run: ./run.sh OTEL_TRACING_E2E
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
        DD_APPLICATION_KEY: ${{ secrets.DD_APPLICATION_KEY }}
        DD_APP_KEY: ${{ secrets.DD_APPLICATION_KEY }}
        DD_API_KEY_2: ${{ secrets.DD_API_KEY_2 }}
        DD_APP_KEY_2: ${{ secrets.DD_APP_KEY_2 }}
        DD_API_KEY_3: ${{ secrets.DD_API_KEY_3 }}
        DD_APP_KEY_3: ${{ secrets.DD_APP_KEY_3 }}
    - name: Run OTEL_METRIC_E2E scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"OTEL_METRIC_E2E"')
      run: ./run.sh OTEL_METRIC_E2E
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
        DD_APPLICATION_KEY: ${{ secrets.DD_APPLICATION_KEY }}
        DD_APP_KEY: ${{ secrets.DD_APPLICATION_KEY }}
        DD_API_KEY_2: ${{ secrets.DD_API_KEY_2 }}
        DD_APP_KEY_2: ${{ secrets.DD_APP_KEY_2 }}
        DD_API_KEY_3: ${{ secrets.DD_API_KEY_3 }}
        DD_APP_KEY_3: ${{ secrets.DD_APP_KEY_3 }}
    - name: Run OTEL_LOG_E2E scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"OTEL_LOG_E2E"')
      run: ./run.sh OTEL_LOG_E2E
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
        DD_APPLICATION_KEY: ${{ secrets.DD_APPLICATION_KEY }}
        DD_APP_KEY: ${{ secrets.DD_APPLICATION_KEY }}
        DD_API_KEY_2: ${{ secrets.DD_API_KEY_2 }}
        DD_APP_KEY_2: ${{ secrets.DD_APP_KEY_2 }}
        DD_API_KEY_3: ${{ secrets.DD_API_KEY_3 }}
        DD_APP_KEY_3: ${{ secrets.DD_APP_KEY_3 }}
    - name: Run APPSEC_LAMBDA_DEFAULT scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"APPSEC_LAMBDA_DEFAULT"')
      run: ./run.sh APPSEC_LAMBDA_DEFAULT
    - name: Run APPSEC_LAMBDA_BLOCKING scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"APPSEC_LAMBDA_BLOCKING"')
      run: ./run.sh APPSEC_LAMBDA_BLOCKING
    - name: Run APPSEC_LAMBDA_API_SECURITY scenario
      if: always() && steps.build.outcome == 'success' && contains(inputs.scenarios, '"APPSEC_LAMBDA_API_SECURITY"')
      run: ./run.sh APPSEC_LAMBDA_API_SECURITY
    - name: Run all scenarios in replay mode
      if: success() && steps.build.outcome == 'success' && inputs._enable_replay_scenarios
      run: utils/scripts/replay_scenarios.sh
      env:
        DD_APPLICATION_KEY: ${{ secrets.DD_APPLICATION_KEY }}
        DD_APP_KEY: ${{ secrets.DD_APPLICATION_KEY }}

    - name: Compress logs
      id: compress_logs
      if: always() && steps.build.outcome == 'success'
      run: tar -czvf artifact.tar.gz $(ls | grep logs)
    - name: Upload artifact
      if: always() && steps.compress_logs.outcome == 'success'
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        # log name convention to respect : logs_$SCENARIO-FAMILY_$LIBRARY_$WEBLOG_$CI-ENVIRONMENT
        name: ${{ inputs.logs_artifact_name }}
        path: artifact.tar.gz
        retention-days: ${{ inputs.artifact_retention_days }}

    - name: Push results to Feature Parity Dashboard
      if: ${{ inputs.push_to_feature_parity_dashbaord && false }} # disabled for now
      run: |
        for folder in logs*/ ; do
          curl -X POST ${FP_IMPORT_URL} \
            --fail
            --header "Content-Type: application/json" \
            --header "FP_API_KEY: ${FP_API_KEY}" \
            --data "@./${folder}feature_parity.json" \
            --include
        done
      env:
        FP_API_KEY: ${{ secrets.FP_API_KEY }}
        FP_IMPORT_URL: ${{ secrets.FP_IMPORT_URL }}

    - name: Push results to Test Optimization
      if: always() && inputs.push_to_test_optimization
      uses: ./.github/actions/push_to_test_optim
      with:
        datadog_api_key: ${{ secrets.TEST_OPTIMIZATION_API_KEY }}

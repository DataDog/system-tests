name: Testing the test

on:
  workflow_dispatch: {}
  schedule:
    - cron:  '00 02 * * 2-6'
  pull_request:
    branches:
      - "**"
  push:
    branches:
      - main
env:
  REGISTRY: ghcr.io

jobs:
  lint_and_test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    - run: pip install -r requirements.txt
    - run: black --check --diff .
    - if: ${{ failure() }}
      run: |
        echo "Lint fails, please have a look on https://github.com/DataDog/system-tests/blob/main/docs/edit/lint.md"
        exit 1
    - run: mkdir -p logs/docker/weblog/logs/
    - run: PYTHONPATH="$PWD" pytest utils/test_the_test


  test-the-tests:
    runs-on: ubuntu-latest
    needs: lint_and_test
    strategy:
      matrix:
        include:

          - library: nodejs
            weblog-variant: express4
            version: dev
      fail-fast: false
    env:
      TEST_LIBRARY: ${{ matrix.library }}
      WEBLOG_VARIANT: ${{ matrix.weblog-variant }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Load WAF rules
        if: ${{ matrix.version == 'dev' }}
        run: ./utils/scripts/load-binary.sh waf_rule_set
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Load library binary
        if: ${{ matrix.version == 'dev' && matrix.library != 'php' }}
        run: ./utils/scripts/load-binary.sh ${{ matrix.library }}

      - name: Load library PHP appsec binary
        if: ${{ matrix.version == 'dev' && matrix.library == 'php' }}
        run: ./utils/scripts/load-binary.sh php_appsec
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Load agent binary
        if: ${{ matrix.version == 'dev' }}
        run: ./utils/scripts/load-binary.sh agent

      - name: Log in to the Container registry
        if: ${{ matrix.library == 'ruby' }}
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

      - name: Build
        run: SYSTEM_TEST_BUILD_ATTEMPTS=3 ./build.sh

      - name: Run default scenario
        run: ./run.sh
        env:
          DD_API_KEY: ${{ secrets.DD_API_KEY }}


      - name: Upload results CI Visibility
        if: ${{ always() }}
        run: ./utils/scripts/upload_results_CI_visibility.sh ${{ matrix.version }} system-tests ${{ github.run_id }}-${{ github.run_attempt }}
        env:
          DD_API_KEY: ${{ secrets.DD_CI_API_KEY }}
          TEST_SECURITY: ${{ secrets.TEST_SECURITY }}

     
      - name: Compress logs
        if: ${{ always() }}
        run: tar -czvf artifact.tar.gz $(ls | grep logs)

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: logs_${{ matrix.library }}_${{ matrix.weblog-variant }}_${{ matrix.version }}
          path: artifact.tar.gz

          
      - name: Print fancy log report
        if: ${{ always() }}
        run: python utils/scripts/markdown_logs.py >> $GITHUB_STEP_SUMMARY
  post_test-the-tests:
    runs-on: ubuntu-latest
    needs: [test-the-tests]
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Update CI Dashboard
        run: ./utils/scripts/update_dashboard_CI_visibility.sh system-tests ${{ github.run_id }}-${{ github.run_attempt }}
        env:
          DD_API_KEY: ${{ secrets.DD_CI_API_KEY }}
          DD_APP_KEY: ${{ secrets.DD_CI_APP_KEY }}


  fuzzer:
    runs-on: ubuntu-latest
    needs: lint_and_test
    env:
      DD_API_KEY: ${{ secrets.DD_API_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build
        run: ./build.sh golang
      - name: Run
        run: ./run.sh scenarios/fuzzer/main.py -t 60
        env:
          RUNNER_CMD: python


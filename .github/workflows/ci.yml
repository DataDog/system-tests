name: Testing the test
'on':
  workflow_dispatch: {}
  schedule:
  - cron: 00 02 * * 2-6
  pull_request:
    branches:
    - '**'
  push:
    branches:
    - main
env:
  REGISTRY: ghcr.io
jobs:
  lint_and_test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - run: pip install -r requirements.txt
    - run: black --check --diff .
    - if: ${{ failure() }}
      run: 'echo "Lint fails, please have a look on https://github.com/DataDog/system-tests/blob/main/docs/edit/lint.md"

        exit 1

        '
    - run: mkdir -p logs/docker/weblog/logs/
    - run: PYTHONPATH="$PWD" pytest utils/test_the_test

  matrix-generator:
    runs-on: ubuntu-latest
    outputs:
      variant: ${{ steps.set-matrix.outputs.variant }}
    steps:
    - id: set-matrix
      uses: DataDog/system-tests/.github/actions/matrix@robertomonteromiguel/simplify_ci_workflow
      with:
        java: true
        python: true
        ruby: true
        cpp: true

  test-the-tests-9-0:
    runs-on: ubuntu-latest
    needs:
    - lint_and_test
    - matrix-generator
    strategy:
      max-parallel: 2
      matrix: ${{fromJson(needs.matrix-generator.outputs.variant)}}
      fail-fast: false
    env:
      TEST_LIBRARY: ${{ matrix.variant.library }}
      WEBLOG_VARIANT: ${{ matrix.variant.weblog }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - uses: ./.github/actions/prepare-agent
      with:
          version: ${{ matrix.version }}
          library: ${{ matrix.variant.library }} 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - uses: ./.github/actions/runner
      with:
          version: ${{ matrix.version }}
          library: ${{ matrix.variant.library }} 
          scenarios: "['DEFAULT', 'PROFILING','TRACE_PROPAGATION_STYLE_W3C', 'CGROUP', 'INTEGRATIONS', 'LIBRARY_CONF_CUSTOM_HEADERS_SHORT', 'LIBRARY_CONF_CUSTOM_HEADERS_LONG']" 
          DD_API_KEY: ${{ secrets.DD_API_KEY }}
          DD_CI_API_KEY: ${{ secrets.DD_CI_API_KEY }}
          archive_logs: true
          ci_visiblity: true

  test-the-tests-9-1:
    runs-on: ubuntu-latest
    needs:
    - lint_and_test
    - matrix-generator
    strategy:
      max-parallel: 2
      matrix: ${{fromJson(needs.matrix-generator.outputs.variant)}}
      fail-fast: false
    env:
      TEST_LIBRARY: ${{ matrix.variant.library }}
      WEBLOG_VARIANT: ${{ matrix.variant.weblog }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - uses: ./.github/actions/prepare-agent
      with:
          version: ${{ matrix.version }}
          library: ${{ matrix.variant.library }} 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - uses: ./.github/actions/runner
      with:
          version: ${{ matrix.version }}
          library: ${{ matrix.variant.library }} 
          scenarios: "['REMOTE_CONFIG_MOCKED_BACKEND_ASM_FEATURES', 'REMOTE_CONFIG_MOCKED_BACKEND_LIVE_DEBUGGING','REMOTE_CONFIG_MOCKED_BACKEND_ASM_DD', 'REMOTE_CONFIG_MOCKED_BACKEND_ASM_FEATURES_NOCACHE', 'SAMPLING']" 
          DD_API_KEY: ${{ secrets.DD_API_KEY }}
          DD_CI_API_KEY: ${{ secrets.DD_CI_API_KEY }}
          archive_logs: true
          ci_visiblity: true

  test-the-tests-9-2:
    runs-on: ubuntu-latest
    needs:
    - lint_and_test
    - matrix-generator
    strategy:
      max-parallel: 2
      matrix: ${{fromJson(needs.matrix-generator.outputs.variant)}}
      fail-fast: false
    env:
      TEST_LIBRARY: ${{ matrix.variant.library }}
      WEBLOG_VARIANT: ${{ matrix.variant.weblog }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - uses: ./.github/actions/prepare-agent
      with:
          version: ${{ matrix.version }}
          library: ${{ matrix.variant.library }} 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - uses: ./.github/actions/runner
      with:
          version: ${{ matrix.version }}
          library: ${{ matrix.variant.library }} 
          scenarios: "['APPSEC_MISSING_RULES', 'APPSEC_CORRUPTED_RULES', 'APPSEC_CUSTOM_RULES', 'APPSEC_RULES_MONITORING_WITH_ERRORS', 'APPSEC_BLOCKING', 'APPSEC_DISABLED', 'APPSEC_LOW_WAF_TIMEOUT', 'APPSEC_CUSTOM_OBFUSCATION', 'APPSEC_RATE_LIMITER', 'APPSEC_IP_BLOCKING', 'APPSEC_RUNTIME_ACTIVATION']" 
          DD_API_KEY: ${{ secrets.DD_API_KEY }}
          DD_CI_API_KEY: ${{ secrets.DD_CI_API_KEY }}
          archive_logs: true
          ci_visiblity: true

  post_test-the-tests:
    runs-on: ubuntu-latest
    needs:
    - test-the-tests-9-0
    - test-the-tests-9-1
    - test-the-tests-9-2
    if: always() && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Update CI Dashboard
      run: ./utils/scripts/update_dashboard_CI_visibility.sh system-tests ${{ github.run_id }}-${{ github.run_attempt }}
      env:
        DD_API_KEY: ${{ secrets.DD_CI_API_KEY }}
        DD_APP_KEY: ${{ secrets.DD_CI_APP_KEY }}
  peformances:
    if: ${{ false }}  # disable for now
    runs-on: ubuntu-latest
    needs:
    - lint_and_test
    env:
      DD_API_KEY: ${{ secrets.DD_API_KEY }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Run
      run: ./scenarios/perfs/run.sh golang
    - name: Display
      run: python scenarios/perfs/process.py
  fuzzer:
    if: ${{ false }}  # disable for now
    runs-on: ubuntu-latest
    needs:
    - lint_and_test
    env:
      DD_API_KEY: ${{ secrets.DD_API_KEY }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Build
      run: ./build.sh golang
    - name: Run
      run: ./run.sh scenarios/fuzzer/main.py -t 60
      env:
        RUNNER_CMD: python
  parametric:
    if: ${{ false }}  # disable for now
    runs-on: ubuntu-latest
    needs:
    - lint_and_test
    strategy:
      matrix:
        client:
        - python
        - dotnet
        - golang
        - nodejs
      fail-fast: false
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Install
      run: cd parametric && pip install wheel && pip install -r requirements.txt
    - name: Run
      run: cd parametric && CLIENTS_ENABLED=${{ matrix.client }} ./run.sh

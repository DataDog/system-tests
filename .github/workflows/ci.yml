name: Testing the test
on:
  workflow_dispatch: {}
  schedule:
  - cron: 00 02 * * 2-6

  pull_request:
    branches:
    - '**'
    types:
    - opened
    - synchronize
    - labeled
    - unlabeled

  push:
    branches:
    - main

env:
  REGISTRY: ghcr.io
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Run lints
      uses: ./.github/actions/lint_code

  test_the_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install runner
        uses: ./.github/actions/install_runner
      - run: ./run.sh TEST_THE_TEST

  scenarios:
    uses: datadog/system-tests/.github/workflows/compute-scenarios.yml@main

  main:
    runs-on: ubuntu-latest
    needs:
    - lint
    - test_the_test
    - scenarios
    strategy:
      matrix:
        variant:
        - library: dotnet
          weblog: poc
        - library: golang
          weblog: echo
        - library: golang
          weblog: gin
        - library: ruby
          weblog: rack
        version:
        - prod
        - dev
      fail-fast: false
    env:
      TEST_LIBRARY: ${{ matrix.variant.library }}
      WEBLOG_VARIANT: ${{ matrix.variant.weblog }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Install runner
      uses: ./.github/actions/install_runner
    - name: Pull images
      uses: ./.github/actions/pull_images
      with:
        pull-all: ${{ needs.scenarios.outputs.run_all == 'true' }}
    - name: Build python's weblog base images
      if: matrix.variant.library == 'python' && contains(github.event.pull_request.labels.*.name, 'build-python-base-images')
      run: |
        docker build --progress=plain -f utils/build/docker/python/django-poc.base.Dockerfile -t datadog/system-tests:django-poc.base-v0 .
        docker build --progress=plain -f utils/build/docker/python/flask-poc.base.Dockerfile -t datadog/system-tests:flask-poc.base-v0 .
        docker build --progress=plain -f utils/build/docker/python/uwsgi-poc.base.Dockerfile -t datadog/system-tests:uwsgi-poc.base-v0 .
    - name: Build proxy image
      if: contains(github.event.pull_request.labels.*.name, 'build-proxy-image')
      run: ./build.sh -i proxy
    - name: Load WAF rules
      if: ${{ matrix.version == 'dev' }}
      run: ./utils/scripts/load-binary.sh waf_rule_set
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Load library binary
      if: ${{ matrix.version == 'dev' }}
      run: ./utils/scripts/load-binary.sh ${{ matrix.variant.library }}
    - name: Load library PHP appsec binary
      if: ${{ matrix.variant.library == 'php' }}
      run: ./utils/scripts/load-binary.sh php_appsec ${{matrix.version}}
    - name: Load agent binary
      if: ${{ matrix.version == 'dev' }}
      run: ./utils/scripts/load-binary.sh agent
    - name: Log in to the Container registry
      if: ${{ matrix.variant.library == 'ruby' }}
      run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
    - name: Build agent
      run: SYSTEM_TEST_BUILD_ATTEMPTS=3 ./build.sh -i agent
    - name: Build weblog
      id: build
      run: SYSTEM_TEST_BUILD_ATTEMPTS=3 ./build.sh -i weblog
    - name: Run REMOTE_CONFIG_MOCKED_BACKEND_ASM_FEATURES scenario
      if: always() && steps.build.outcome == 'success'
      run: ./run.sh REMOTE_CONFIG_MOCKED_BACKEND_ASM_FEATURES
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run REMOTE_CONFIG_MOCKED_BACKEND_LIVE_DEBUGGING scenario
      if: always() && steps.build.outcome == 'success'
      run: ./run.sh REMOTE_CONFIG_MOCKED_BACKEND_LIVE_DEBUGGING
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run REMOTE_CONFIG_MOCKED_BACKEND_ASM_DD scenario
      if: always() && steps.build.outcome == 'success'
      run: ./run.sh REMOTE_CONFIG_MOCKED_BACKEND_ASM_DD
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run REMOTE_CONFIG_MOCKED_BACKEND_ASM_FEATURES_NOCACHE scenario
      if: always() && steps.build.outcome == 'success'
      run: ./run.sh REMOTE_CONFIG_MOCKED_BACKEND_ASM_FEATURES_NOCACHE
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run REMOTE_CONFIG_MOCKED_BACKEND_LIVE_DEBUGGING_NOCACHE scenario
      if: always() && steps.build.outcome == 'success'
      run: ./run.sh REMOTE_CONFIG_MOCKED_BACKEND_LIVE_DEBUGGING_NOCACHE
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run REMOTE_CONFIG_MOCKED_BACKEND_ASM_DD_NOCACHE scenario
      if: always() && steps.build.outcome == 'success'
      run: ./run.sh REMOTE_CONFIG_MOCKED_BACKEND_ASM_DD_NOCACHE
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run APPSEC_BLOCKING scenario
      if: always() && steps.build.outcome == 'success'
      run: ./run.sh APPSEC_BLOCKING
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run APPSEC_BLOCKING_FULL_DENYLIST scenario
      if: always() && steps.build.outcome == 'success'
      run: ./run.sh APPSEC_BLOCKING_FULL_DENYLIST
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run APPSEC_REQUEST_BLOCKING scenario
      if: always() && steps.build.outcome == 'success'
      run: ./run.sh APPSEC_REQUEST_BLOCKING
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run APPSEC_RUNTIME_ACTIVATION scenario
      if: always() && steps.build.outcome == 'success'
      run: ./run.sh APPSEC_RUNTIME_ACTIVATION
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run DEBUGGER_LINE_PROBES_STATUS scenario
      if: always() && steps.build.outcome == 'success'
      run: ./run.sh DEBUGGER_LINE_PROBES_STATUS
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Compress logs
      id: compress_logs
      if: always() && steps.build.outcome == 'success'
      run: tar -czvf artifact.tar.gz $(ls | grep logs)
    - name: Upload artifact
      if: always() && steps.compress_logs.outcome == 'success'
      uses: actions/upload-artifact@v3
      with:
        name: logs_${{ matrix.variant.library }}_${{ matrix.variant.weblog }}_${{ matrix.version }}_main
        path: artifact.tar.gz
    - name: Upload results CI Visibility
      if: ${{ always() }}
      run: ./utils/scripts/upload_results_CI_visibility.sh ${{ matrix.version }} system-tests ${{ github.run_id }}-${{ github.run_attempt }}
      env:
        DD_API_KEY: ${{ secrets.DD_CI_API_KEY }}
    - name: Print fancy log report
      if: ${{ always() }}
      run: python utils/scripts/markdown_logs.py >> $GITHUB_STEP_SUMMARY

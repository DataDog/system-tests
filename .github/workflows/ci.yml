name: Testing the test
on:
  workflow_dispatch: {}
  schedule:
  - cron: 00 02 * * 2-6
  
  pull_request:
    branches:
    - '**'
    types:
    - opened
    - reopened
    - synchronize
    - labeled
    - unlabeled
    
  push:
    branches:
    - main

env:
  REGISTRY: ghcr.io
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  check-pr-labels:
    runs-on: ubuntu-latest 
    steps:
      - uses: actions-ecosystem/action-add-labels@v1
        if: github.event.action == 'opened'
        with:
          labels: run-default-scenario
  lint_and_test:
    runs-on: ubuntu-latest
    needs:
    - check-pr-labels
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Run lints
      uses: ./.github/actions/lint_code
    - run: ./build.sh -i runner
    - run: ./run.sh TEST_THE_TEST
  test-the-tests-main:
    runs-on: ubuntu-latest
    needs:
    - lint_and_test
    strategy:
      matrix:
        variant:
        - library: cpp
          weblog: nginx
        - library: dotnet
          weblog: poc
        - library: dotnet
          weblog: uds
        - library: golang
          weblog: chi
        - library: golang
          weblog: echo
        - library: golang
          weblog: gin
        - library: golang
          weblog: gorilla
        - library: golang
          weblog: net-http
        - library: golang
          weblog: uds-echo
        - library: java
          weblog: jersey-grizzly2
        - library: java
          weblog: ratpack
        - library: java
          weblog: resteasy-netty3
        - library: java
          weblog: vertx3
        - library: java
          weblog: vertx4
        - library: java
          weblog: spring-boot-jetty
        - library: java
          weblog: spring-boot
        - library: java
          weblog: uds-spring-boot
        - library: java
          weblog: spring-boot-openliberty
        - library: java
          weblog: spring-boot-wildfly
        - library: java
          weblog: spring-boot-undertow
        - library: nodejs
          weblog: express4
        - library: nodejs
          weblog: uds-express4
        - library: nodejs
          weblog: express4-typescript
        - library: php
          weblog: apache-mod-7.0
        - library: php
          weblog: apache-mod-7.1
        - library: php
          weblog: apache-mod-7.2
        - library: php
          weblog: apache-mod-7.3
        - library: php
          weblog: apache-mod-7.4
        - library: php
          weblog: apache-mod-8.0
        - library: php
          weblog: apache-mod-8.1
        - library: php
          weblog: apache-mod-8.2
        - library: php
          weblog: apache-mod-7.0-zts
        - library: php
          weblog: apache-mod-7.1-zts
        - library: php
          weblog: apache-mod-7.2-zts
        - library: php
          weblog: apache-mod-7.3-zts
        - library: php
          weblog: apache-mod-7.4-zts
        - library: php
          weblog: apache-mod-8.0-zts
        - library: php
          weblog: apache-mod-8.1-zts
        - library: php
          weblog: apache-mod-8.2-zts
        - library: php
          weblog: php-fpm-7.0
        - library: php
          weblog: php-fpm-7.1
        - library: php
          weblog: php-fpm-7.2
        - library: php
          weblog: php-fpm-7.3
        - library: php
          weblog: php-fpm-7.4
        - library: php
          weblog: php-fpm-8.0
        - library: php
          weblog: php-fpm-8.1
        - library: php
          weblog: php-fpm-8.2
        - library: python
          weblog: flask-poc
        - library: python
          weblog: django-poc
        - library: python
          weblog: uwsgi-poc
        - library: python
          weblog: uds-flask
        - library: ruby
          weblog: rack
        - library: ruby
          weblog: sinatra14
        - library: ruby
          weblog: sinatra20
        - library: ruby
          weblog: sinatra21
        - library: ruby
          weblog: uds-sinatra
        - library: ruby
          weblog: rails32
        - library: ruby
          weblog: rails40
        - library: ruby
          weblog: rails41
        - library: ruby
          weblog: rails42
        - library: ruby
          weblog: rails50
        - library: ruby
          weblog: rails51
        - library: ruby
          weblog: rails52
        - library: ruby
          weblog: rails60
        - library: ruby
          weblog: rails61
        - library: ruby
          weblog: rails70
        version:
        - prod
        - dev
      fail-fast: false
    env:
      TEST_LIBRARY: ${{ matrix.variant.library }}
      WEBLOG_VARIANT: ${{ matrix.variant.weblog }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Setup python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Pull mongo image
      run: docker pull mongo:latest
    - name: Pull cassandra image
      run: docker pull cassandra:latest
    - name: Pull postgres image
      run: docker pull postgres:latest
    - name: Pull kafka image
      run: docker pull bitnami/kafka:latest
    - name: Pull zookeeper image
      run: docker pull bitnami/zookeeper:latest
    - name: Pull rabbitmq image
      run: docker pull rabbitmq:3-management-alpine
    - name: Pull mysql image
      run: docker pull mysql/mysql-server:latest
    - name: Load WAF rules
      if: ${{ matrix.version == 'dev' }}
      run: ./utils/scripts/load-binary.sh waf_rule_set
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Load library binary
      if: ${{ matrix.version == 'dev' }}
      run: ./utils/scripts/load-binary.sh ${{ matrix.variant.library }}
    - name: Load library PHP appsec binary
      if: ${{ matrix.variant.library == 'php' }}
      run: ./utils/scripts/load-binary.sh php_appsec ${{matrix.version}}
    - name: Load agent binary
      if: ${{ matrix.version == 'dev' }}
      run: ./utils/scripts/load-binary.sh agent
    - name: Log in to the Container registry
      if: ${{ matrix.variant.library == 'ruby' }}
      run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
    - name: Build
      id: build
      run: SYSTEM_TEST_BUILD_ATTEMPTS=3 ./build.sh
    - name: Run DEFAULT scenario
      if: steps.build.outcome == 'success'
      run: ./run.sh DEFAULT
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run PROFILING scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh PROFILING
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run CGROUP scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh CGROUP
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run TRACE_PROPAGATION_STYLE_W3C scenario
      if: always() && steps.build.outcome == 'success' && matrix.variant.library != 'python' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh TRACE_PROPAGATION_STYLE_W3C
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run INTEGRATIONS scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh INTEGRATIONS
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run LIBRARY_CONF_CUSTOM_HEADERS_SHORT scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh LIBRARY_CONF_CUSTOM_HEADERS_SHORT
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run LIBRARY_CONF_CUSTOM_HEADERS_LONG scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh LIBRARY_CONF_CUSTOM_HEADERS_LONG
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run REMOTE_CONFIG_MOCKED_BACKEND_ASM_FEATURES scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh REMOTE_CONFIG_MOCKED_BACKEND_ASM_FEATURES
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run REMOTE_CONFIG_MOCKED_BACKEND_LIVE_DEBUGGING scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh REMOTE_CONFIG_MOCKED_BACKEND_LIVE_DEBUGGING
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run REMOTE_CONFIG_MOCKED_BACKEND_ASM_DD scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh REMOTE_CONFIG_MOCKED_BACKEND_ASM_DD
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run REMOTE_CONFIG_MOCKED_BACKEND_ASM_FEATURES_NOCACHE scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh REMOTE_CONFIG_MOCKED_BACKEND_ASM_FEATURES_NOCACHE
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run REMOTE_CONFIG_MOCKED_BACKEND_LIVE_DEBUGGING_NOCACHE scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh REMOTE_CONFIG_MOCKED_BACKEND_LIVE_DEBUGGING_NOCACHE
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run REMOTE_CONFIG_MOCKED_BACKEND_ASM_DD_NOCACHE scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh REMOTE_CONFIG_MOCKED_BACKEND_ASM_DD_NOCACHE
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run APPSEC_MISSING_RULES scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh APPSEC_MISSING_RULES
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run APPSEC_CUSTOM_RULES scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh APPSEC_CUSTOM_RULES
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run APPSEC_CORRUPTED_RULES scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh APPSEC_CORRUPTED_RULES
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run APPSEC_RULES_MONITORING_WITH_ERRORS scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh APPSEC_RULES_MONITORING_WITH_ERRORS
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run APPSEC_BLOCKING scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh APPSEC_BLOCKING
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run APPSEC_DISABLED scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh APPSEC_DISABLED
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run APPSEC_LOW_WAF_TIMEOUT scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh APPSEC_LOW_WAF_TIMEOUT
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run APPSEC_CUSTOM_OBFUSCATION scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh APPSEC_CUSTOM_OBFUSCATION
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run APPSEC_RATE_LIMITER scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh APPSEC_RATE_LIMITER
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run APPSEC_IP_BLOCKING scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh APPSEC_IP_BLOCKING
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run APPSEC_IP_BLOCKING_MAXED scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh APPSEC_IP_BLOCKING_MAXED
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run APPSEC_REQUEST_BLOCKING scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh APPSEC_REQUEST_BLOCKING
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run APPSEC_RUNTIME_ACTIVATION scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh APPSEC_RUNTIME_ACTIVATION
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run APPSEC_WAF_TELEMETRY scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh APPSEC_WAF_TELEMETRY
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run SAMPLING scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh SAMPLING
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run TELEMETRY_DEPENDENCY_LOADED_TEST_FOR_DEPENDENCY_COLLECTION_DISABLED scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh TELEMETRY_DEPENDENCY_LOADED_TEST_FOR_DEPENDENCY_COLLECTION_DISABLED
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Compress logs
      id: compress_logs
      if: always() && steps.build.outcome == 'success'
      run: tar -czvf artifact.tar.gz $(ls | grep logs)
    - name: Upload artifact
      if: always() && steps.compress_logs.outcome == 'success'
      uses: actions/upload-artifact@v3
      with:
        name: logs_${{ matrix.variant.library }}_${{ matrix.variant.weblog }}_${{ matrix.version }}_main
        path: artifact.tar.gz
    - name: Upload results CI Visibility
      if: ${{ always() }}
      run: ./utils/scripts/upload_results_CI_visibility.sh ${{ matrix.version }} system-tests ${{ github.run_id }}-${{ github.run_attempt }}
      env:
        DD_API_KEY: ${{ secrets.DD_CI_API_KEY }}
    - name: Print fancy log report
      if: ${{ always() }}
      run: python utils/scripts/markdown_logs.py >> $GITHUB_STEP_SUMMARY
  test-the-tests-graalvm:
    runs-on:
      labels: ubuntu-latest-16-cores
      group: APM Larger Runners
    needs:
    - lint_and_test
    strategy:
      matrix:
        variant:
        - library: java
          weblog: spring-boot-native
        - library: java
          weblog: spring-boot-3-native
        version:
        - prod
        - dev
      fail-fast: false
    env:
      TEST_LIBRARY: ${{ matrix.variant.library }}
      WEBLOG_VARIANT: ${{ matrix.variant.weblog }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Setup python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Pull mongo image
      run: docker pull mongo:latest
    - name: Pull cassandra image
      run: docker pull cassandra:latest
    - name: Pull postgres image
      run: docker pull postgres:latest
    - name: Pull kafka image
      run: docker pull bitnami/kafka:latest
    - name: Pull zookeeper image
      run: docker pull bitnami/zookeeper:latest
    - name: Pull rabbitmq image
      run: docker pull rabbitmq:3-management-alpine
    - name: Pull mysql image
      run: docker pull mysql/mysql-server:latest
    - name: Load WAF rules
      if: ${{ matrix.version == 'dev' }}
      run: ./utils/scripts/load-binary.sh waf_rule_set
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Load library binary
      if: ${{ matrix.version == 'dev' }}
      run: ./utils/scripts/load-binary.sh ${{ matrix.variant.library }}
    - name: Load library PHP appsec binary
      if: ${{ matrix.variant.library == 'php' }}
      run: ./utils/scripts/load-binary.sh php_appsec ${{matrix.version}}
    - name: Load agent binary
      if: ${{ matrix.version == 'dev' }}
      run: ./utils/scripts/load-binary.sh agent
    - name: Log in to the Container registry
      if: ${{ matrix.variant.library == 'ruby' }}
      run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
    - name: Build
      id: build
      run: SYSTEM_TEST_BUILD_ATTEMPTS=3 ./build.sh
    - name: Run DEFAULT scenario
      if: steps.build.outcome == 'success'
      run: ./run.sh DEFAULT
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run PROFILING scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh PROFILING
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run CGROUP scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh CGROUP
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run TRACE_PROPAGATION_STYLE_W3C scenario
      if: always() && steps.build.outcome == 'success' && matrix.variant.library != 'python' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh TRACE_PROPAGATION_STYLE_W3C
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run INTEGRATIONS scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh INTEGRATIONS
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run LIBRARY_CONF_CUSTOM_HEADERS_SHORT scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh LIBRARY_CONF_CUSTOM_HEADERS_SHORT
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run LIBRARY_CONF_CUSTOM_HEADERS_LONG scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh LIBRARY_CONF_CUSTOM_HEADERS_LONG
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run REMOTE_CONFIG_MOCKED_BACKEND_ASM_FEATURES scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh REMOTE_CONFIG_MOCKED_BACKEND_ASM_FEATURES
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run REMOTE_CONFIG_MOCKED_BACKEND_LIVE_DEBUGGING scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh REMOTE_CONFIG_MOCKED_BACKEND_LIVE_DEBUGGING
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run REMOTE_CONFIG_MOCKED_BACKEND_ASM_DD scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh REMOTE_CONFIG_MOCKED_BACKEND_ASM_DD
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run REMOTE_CONFIG_MOCKED_BACKEND_ASM_FEATURES_NOCACHE scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh REMOTE_CONFIG_MOCKED_BACKEND_ASM_FEATURES_NOCACHE
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run REMOTE_CONFIG_MOCKED_BACKEND_LIVE_DEBUGGING_NOCACHE scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh REMOTE_CONFIG_MOCKED_BACKEND_LIVE_DEBUGGING_NOCACHE
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run REMOTE_CONFIG_MOCKED_BACKEND_ASM_DD_NOCACHE scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh REMOTE_CONFIG_MOCKED_BACKEND_ASM_DD_NOCACHE
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run APPSEC_MISSING_RULES scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh APPSEC_MISSING_RULES
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run APPSEC_CORRUPTED_RULES scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh APPSEC_CORRUPTED_RULES
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run APPSEC_CUSTOM_RULES scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh APPSEC_CUSTOM_RULES
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run APPSEC_RULES_MONITORING_WITH_ERRORS scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh APPSEC_RULES_MONITORING_WITH_ERRORS
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run APPSEC_BLOCKING scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh APPSEC_BLOCKING
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run APPSEC_DISABLED scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh APPSEC_DISABLED
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run APPSEC_LOW_WAF_TIMEOUT scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh APPSEC_LOW_WAF_TIMEOUT
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run APPSEC_CUSTOM_OBFUSCATION scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh APPSEC_CUSTOM_OBFUSCATION
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run APPSEC_RATE_LIMITER scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh APPSEC_RATE_LIMITER
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run APPSEC_IP_BLOCKING scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh APPSEC_IP_BLOCKING
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run APPSEC_RUNTIME_ACTIVATION scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh APPSEC_RUNTIME_ACTIVATION
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run APPSEC_WAF_TELEMETRY scenario
      if: always() && steps.build.outcome == 'success'
      run: ./run.sh APPSEC_WAF_TELEMETRY
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run SAMPLING scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh SAMPLING
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run TELEMETRY_MESSAGE_BATCH_EVENT_ORDER scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh TELEMETRY_MESSAGE_BATCH_EVENT_ORDER
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run TELEMETRY_APP_STARTED_PRODUCTS_DISABLED scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh TELEMETRY_APP_STARTED_PRODUCTS_DISABLED
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run TELEMETRY_LOG_GENERATION_DISABLED scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh TELEMETRY_LOG_GENERATION_DISABLED
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Run TELEMETRY_METRIC_GENERATION_DISABLED scenario
      if: always() && steps.build.outcome == 'success' && github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario') 
      run: ./run.sh TELEMETRY_METRIC_GENERATION_DISABLED      
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
    - name: Compress logs
      if: steps.build.outcome == 'success'
      run: tar -czvf artifact.tar.gz $(ls | grep logs)
    - name: Upload artifact
      if: steps.build.outcome == 'success'
      uses: actions/upload-artifact@v3
      with:
        name: logs_${{ matrix.variant.library }}_${{ matrix.variant.weblog }}_${{ matrix.version }}_graalvm
        path: artifact.tar.gz
    - name: Upload results CI Visibility
      if: steps.build.outcome == 'success'
      run: ./utils/scripts/upload_results_CI_visibility.sh ${{ matrix.version }} system-tests ${{ github.run_id }}-${{ github.run_attempt }}
      env:
        DD_API_KEY: ${{ secrets.DD_CI_API_KEY }}
    - name: Print fancy log report
      if: ${{ always() }}
      run: python utils/scripts/markdown_logs.py >> $GITHUB_STEP_SUMMARY

  test-the-tests-open-telemetry:
    runs-on: ubuntu-latest
    if: github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario')
    needs:
    - lint_and_test
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Setup python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Pull mitmproxy image
      run: docker pull mitmproxy/mitmproxy
    - name: Build
      id: build
      run: SYSTEM_TEST_BUILD_ATTEMPTS=3 ./build.sh java_otel
    - name: Run OTEL_TRACING_E2E scenario
      if: always() && steps.build.outcome == 'success'
      run: ./run.sh OTEL_TRACING_E2E
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
        DD_APPLICATION_KEY: ${{ secrets.DD_APPLICATION_KEY }}
        DD_APP_KEY: ${{ secrets.DD_APPLICATION_KEY }}
        DD_API_KEY_2: ${{ secrets.DD_API_KEY_2 }}
        DD_APP_KEY_2: ${{ secrets.DD_APP_KEY_2 }}
        DD_API_KEY_3: ${{ secrets.DD_API_KEY_3 }}
        DD_APP_KEY_3: ${{ secrets.DD_APP_KEY_3 }}
    - name: Compress logs
      if: always() && steps.build.outcome == 'success'
      run: tar -czvf artifact.tar.gz $(ls | grep logs)
    - name: Upload artifact
      if: always() && steps.build.outcome == 'success'
      uses: actions/upload-artifact@v3
      with:
        name: logs_java-otel_spring-boot-native_prod
        path: artifact.tar.gz

  post_test-the-tests:
    runs-on: ubuntu-latest
    needs:
    - test-the-tests-main
    - test-the-tests-graalvm
    if: always() && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Update CI Dashboard
      run: ./utils/scripts/update_dashboard_CI_visibility.sh system-tests ${{ github.run_id }}-${{ github.run_attempt }}
      env:
        DD_API_KEY: ${{ secrets.DD_CI_API_KEY }}
        DD_APP_KEY: ${{ secrets.DD_CI_APP_KEY }}
  peformances:
    runs-on: ubuntu-latest
    if: github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario')
    needs:
    - lint_and_test
    env:
      DD_API_KEY: ${{ secrets.DD_API_KEY }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Setup python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Run
      run: ./tests/perfs/run.sh golang
    - name: Display
      run: |
        source venv/bin/activate
        python tests/perfs/process.py
  fuzzer:
    runs-on: ubuntu-latest
    if: github.event.action != 'opened' && !contains(github.event.pull_request.labels.*.name, 'run-default-scenario')
    needs:
    - lint_and_test
    env:
      DD_API_KEY: ${{ secrets.DD_API_KEY }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Setup python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Build
      run: ./build.sh golang
    - name: Run
      run: ./tests/fuzzer/run.sh

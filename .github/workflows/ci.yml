name: Testing the test
on:
  workflow_dispatch: {}
  schedule:
  - cron: 00 02 * * 2-6

  pull_request:
    branches:
    - '**'
    types:
    - opened
    - synchronize
    - labeled
    - unlabeled

  push:
    branches:
    - main

env:
  REGISTRY: ghcr.io
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Run lints
      uses: ./.github/actions/lint_code

  test_the_test:
    strategy:
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
    name: Test the test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install runner
        uses: ./.github/actions/install_runner
      # force /bin/bash in order to test against bash 3.2 on macOS
      - name: Test the test (direct)
        run: /bin/bash run.sh TEST_THE_TEST
      - name: Test group parsing
        run: |
          /bin/bash run.sh ++dry APPSEC_SCENARIOS
          /bin/bash run.sh ++dry TRACER_RELEASE_SCENARIOS

  scenarios:
    uses: ./.github/workflows/compute-scenarios.yml

  parametric:
    if: needs.scenarios.outputs.run_parametric == 'true'
    needs:
    - lint
    - test_the_test
    - scenarios
    uses: ./.github/workflows/parametric.yml
    secrets: inherit

  graphql:
    if: needs.scenarios.outputs.run_graphql == 'true'
    needs:
    - lint
    - test_the_test
    - scenarios
    uses: ./.github/workflows/graphql.yml
    secrets: inherit

  experimental:
    if: needs.scenarios.outputs.run_libinjection == 'true'
    needs:
    - lint
    - test_the_test
    - scenarios
    uses: ./.github/workflows/experimental.yml
    secrets: inherit

  main:
    needs:
    - lint
    - test_the_test
    - scenarios
    uses: ./.github/workflows/end-to-end.yml
    secrets: inherit
    with:
      run_all: ${{ needs.scenarios.outputs.run_all  == 'true' }}
      run_replay: ${{ needs.scenarios.outputs.run_all  == 'true' }}
      run_integration: ${{ needs.scenarios.outputs.run_integration  == 'true' }}
      run_sampling: ${{ needs.scenarios.outputs.run_sampling  == 'true' }}
      run_profiling: ${{ needs.scenarios.outputs.run_profiling  == 'true' }}
      run_debugger: ${{ needs.scenarios.outputs.run_debugger  == 'true' }}
      run_appsec: ${{ needs.scenarios.outputs.run_appsec  == 'true' }}
      run_open_telemetry: ${{ needs.scenarios.outputs.run_open_telemetry  == 'true' }}
      build_python_base_images: ${{ contains(github.event.pull_request.labels.*.name, 'build-python-base-images') }}
      build_buddies_images: ${{ contains(github.event.pull_request.labels.*.name, 'build-buddies-images') }}
      build_proxy_image: ${{ contains(github.event.pull_request.labels.*.name, 'build-proxy-image') }}


  open-telemetry-manual:
    runs-on: ubuntu-latest
    if: needs.scenarios.outputs.run_open_telemetry == 'true'
    needs:
    - lint
    - test_the_test
    - scenarios
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Install runner
      uses: ./.github/actions/install_runner
    - name: Pull mitmproxy image
      run: docker pull datadog/system-tests:proxy-v1 || true
    - name: Build proxy image
      if: contains(github.event.pull_request.labels.*.name, 'build-proxy-image')
      run: ./build.sh -i proxy
    - name: Build agent
      run: SYSTEM_TEST_BUILD_ATTEMPTS=3 ./build.sh java_otel -i agent
    - name: Build weblog
      id: build
      run: SYSTEM_TEST_BUILD_ATTEMPTS=3 ./build.sh java_otel -i weblog
    - name: Run OTEL_TRACING_E2E scenario
      if: always() && steps.build.outcome == 'success'
      run: ./run.sh OTEL_TRACING_E2E
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
        DD_APPLICATION_KEY: ${{ secrets.DD_APPLICATION_KEY }}
        DD_APP_KEY: ${{ secrets.DD_APPLICATION_KEY }}
        DD_API_KEY_2: ${{ secrets.DD_API_KEY_2 }}
        DD_APP_KEY_2: ${{ secrets.DD_APP_KEY_2 }}
        DD_API_KEY_3: ${{ secrets.DD_API_KEY_3 }}
        DD_APP_KEY_3: ${{ secrets.DD_APP_KEY_3 }}
    - name: Run OTEL_METRIC_E2E scenario
      if: always() && steps.build.outcome == 'success'
      run: ./run.sh OTEL_METRIC_E2E
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
        DD_APPLICATION_KEY: ${{ secrets.DD_APPLICATION_KEY }}
        DD_APP_KEY: ${{ secrets.DD_APPLICATION_KEY }}
        DD_API_KEY_2: ${{ secrets.DD_API_KEY_2 }}
        DD_APP_KEY_2: ${{ secrets.DD_APP_KEY_2 }}
        DD_API_KEY_3: ${{ secrets.DD_API_KEY_3 }}
        DD_APP_KEY_3: ${{ secrets.DD_APP_KEY_3 }}
    - name: Run OTEL_LOG_E2E scenario
      if: always() && steps.build.outcome == 'success'
      run: ./run.sh OTEL_LOG_E2E
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
        DD_APPLICATION_KEY: ${{ secrets.DD_APPLICATION_KEY }}
        DD_APP_KEY: ${{ secrets.DD_APPLICATION_KEY }}
        DD_API_KEY_2: ${{ secrets.DD_API_KEY_2 }}
        DD_APP_KEY_2: ${{ secrets.DD_APP_KEY_2 }}
        DD_API_KEY_3: ${{ secrets.DD_API_KEY_3 }}
        DD_APP_KEY_3: ${{ secrets.DD_APP_KEY_3 }}

    - name: Compress logs
      if: always() && steps.build.outcome == 'success'
      run: tar -czvf artifact.tar.gz $(ls | grep logs)
    - name: Upload artifact
      if: always() && steps.build.outcome == 'success'
      uses: actions/upload-artifact@v3
      with:
        name: logs_java-otel_prod
        path: artifact.tar.gz

  open-telemetry-automatic:
    runs-on: ubuntu-latest
    if: needs.scenarios.outputs.run_open_telemetry == 'true' || needs.scenarios.outputs.run_integration == 'true'
    needs:
    - lint
    - test_the_test
    - scenarios
    strategy:
      matrix:
        variant:
        - library: java_otel
          weblog: spring-boot-otel
        - library: python_otel
          weblog: flask-poc-otel
        - library: nodejs_otel
          weblog: express4-otel
        version:
        - prod
      fail-fast: false
    env:
      TEST_LIBRARY: ${{ matrix.variant.library }}
      WEBLOG_VARIANT: ${{ matrix.variant.weblog }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Install runner
      uses: ./.github/actions/install_runner
    - name: Pull mitmproxy image
      run: docker pull datadog/system-tests:proxy-v1 || true
    - name: Build proxy image
      if: contains(github.event.pull_request.labels.*.name, 'build-proxy-image')
      run: ./build.sh -i proxy
    - name: Build agent
      run: SYSTEM_TEST_BUILD_ATTEMPTS=3 ./build.sh ${{ matrix.variant.library }} -i agent

    - name: Build weblog opentelemetry autoinstrumentation
      if: always()
      id: build_otel
      run: SYSTEM_TEST_BUILD_ATTEMPTS=3 ./build.sh ${{ matrix.variant.library }} --weblog-variant ${{ matrix.variant.weblog }}
    - name: Run OTEL_INTEGRATIONS scenario
      if: always() && steps.build_otel.outcome == 'success'
      run: ./run.sh OTEL_INTEGRATIONS
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
        DD_APPLICATION_KEY: ${{ secrets.DD_APPLICATION_KEY }}
        DD_APP_KEY: ${{ secrets.DD_APPLICATION_KEY }}
    - name: Compress logs
      if: always() && steps.build_otel.outcome == 'success'
      run: tar -czvf artifact.tar.gz $(ls | grep logs)
    - name: Upload artifact
      if: always() && steps.build_otel.outcome == 'success'
      uses: actions/upload-artifact@v3
      with:
        name: logs_${{ matrix.variant.library }}_${{ matrix.variant.version }}
        path: artifact.tar.gz

  update-CI-visibility:
    runs-on: ubuntu-latest
    needs:
    - main
    if: always() && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Update CI Dashboard
      run: ./utils/scripts/update_dashboard_CI_visibility.sh system-tests ${{ github.run_id }}-${{ github.run_attempt }}
      env:
        DD_API_KEY: ${{ secrets.DD_CI_API_KEY }}
        DD_APP_KEY: ${{ secrets.DD_CI_APP_KEY }}

  peformances:
    runs-on: ubuntu-latest
    if: needs.scenarios.outputs.run_all == 'true'
    needs:
    - lint
    - test_the_test
    - scenarios
    env:
      DD_API_KEY: ${{ secrets.DD_API_KEY }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Setup python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Run
      run: ./tests/perfs/run.sh golang
    - name: Display
      run: |
        source venv/bin/activate
        python tests/perfs/process.py

  fuzzer:
    runs-on: ubuntu-latest
    if: needs.scenarios.outputs.run_all == 'true'
    needs:
    - lint
    - test_the_test
    - scenarios
    env:
      DD_API_KEY: ${{ secrets.DD_API_KEY }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Install runner
      uses: ./.github/actions/install_runner
    - name: Build
      run: |
        ./build.sh -i agent
        ./build.sh golang -i weblog
    - name: Run
      run: ./tests/fuzzer/run.sh

name: system-tests
on:
  workflow_call:
    inputs:
      run_all:
        description: "Shall we run all scenarios"
        default: false
        required: false
        type: boolean
      run_replay:
        description: "Shall we run all scenarios in replay mode"
        default: false
        required: false
        type: boolean
      run_open_telemetry:
        description: "Shall we run open-telemetry scenarios"
        default: false
        required: false
        type: boolean
      run_sampling:
        description: "Shall we run sampling scenarios"
        default: false
        required: false
        type: boolean
      run_profiling:
        description: "Shall we run profiling scenario"
        default: false
        required: false
        type: boolean
      run_debugger:
        description: "Shall we run debugger scenarios"
        default: false
        required: false
        type: boolean
      run_appsec:
        description: "Shall we run AppSec scenarios"
        default: false
        required: false
        type: boolean
      run_integration:
        description: "Shall we run Integrations scenarios"
        default: false
        required: false
        type: boolean
      run_parametric:
        description: "Shall we run parametric scenario"
        default: false
        required: false
        type: boolean
      run_graphql:
        description: "Shall we run GraphQL scenarios"
        default: false
        required: false
        type: boolean
      run_libinjection:
        description: "Shall we run libinjection scenarios"
        default: false
        required: false
        type: boolean
      build_python_base_images:
        description: "Shall we build python base images for tests on python tracer"
        default: false
        required: false
        type: boolean
      build_buddies_images:
        description: "Shall we build buddies images"
        default: false
        required: false
        type: boolean
      build_proxy_image:
        description: "Shall we build proxy image"
        default: false
        required: false
        type: boolean
      push_to_feature_parity_dashbaord:
        description: "Shall we push results to Feature Parity Dashbaord"
        default: false
        required: false
        type: boolean

jobs:

  parametric:
    if: inputs.run_parametric || inputs.run_all
    uses: ./.github/workflows/run-parametric.yml
    secrets: inherit

  graphql:
    if: inputs.run_graphql || inputs.run_all
    uses: ./.github/workflows/run-graphql.yml
    secrets: inherit
    with:
      build_proxy_image: ${{ inputs.build_proxy_image }}

  lib-injection:
    if: inputs.run_libinjection || inputs.run_all
    uses: ./.github/workflows/run-lib-injection.yml
    secrets: inherit

  end-to-end:
    uses: ./.github/workflows/run-end-to-end.yml
    secrets: inherit
    with:
      run_all: ${{ inputs.run_all }}
      run_replay: ${{ inputs.run_replay }}
      run_integration: ${{ inputs.run_integration }}
      run_sampling: ${{ inputs.run_sampling }}
      run_profiling: ${{ inputs.run_profiling }}
      run_debugger: ${{ inputs.run_debugger }}
      run_appsec: ${{ inputs.run_appsec }}
      run_open_telemetry: ${{ inputs.run_open_telemetry }}
      build_python_base_images: ${{ inputs.build_python_base_images }}
      build_buddies_images: ${{ inputs.build_buddies_images }}
      build_proxy_image: ${{ inputs.build_proxy_image }}

  open-telemetry-manual:
    runs-on: ubuntu-latest
    if: inputs.run_open_telemetry || inputs.run_all
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        repository: 'DataDog/system-tests'
    - name: Install runner
      uses: ./.github/actions/install_runner
    - name: Pull mitmproxy image
      run: docker pull datadog/system-tests:proxy-v1 || true
    - name: Build proxy image
      if: inputs.build_proxy_image
      run: ./build.sh -i proxy
    - name: Build agent
      run: SYSTEM_TEST_BUILD_ATTEMPTS=3 ./build.sh java_otel -i agent
    - name: Build weblog
      id: build
      run: SYSTEM_TEST_BUILD_ATTEMPTS=3 ./build.sh java_otel -i weblog
    - name: Run OTEL_TRACING_E2E scenario
      if: always() && steps.build.outcome == 'success'
      run: ./run.sh OTEL_TRACING_E2E
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
        DD_APPLICATION_KEY: ${{ secrets.DD_APPLICATION_KEY }}
        DD_APP_KEY: ${{ secrets.DD_APPLICATION_KEY }}
        DD_API_KEY_2: ${{ secrets.DD_API_KEY_2 }}
        DD_APP_KEY_2: ${{ secrets.DD_APP_KEY_2 }}
        DD_API_KEY_3: ${{ secrets.DD_API_KEY_3 }}
        DD_APP_KEY_3: ${{ secrets.DD_APP_KEY_3 }}
    - name: Run OTEL_METRIC_E2E scenario
      if: always() && steps.build.outcome == 'success'
      run: ./run.sh OTEL_METRIC_E2E
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
        DD_APPLICATION_KEY: ${{ secrets.DD_APPLICATION_KEY }}
        DD_APP_KEY: ${{ secrets.DD_APPLICATION_KEY }}
        DD_API_KEY_2: ${{ secrets.DD_API_KEY_2 }}
        DD_APP_KEY_2: ${{ secrets.DD_APP_KEY_2 }}
        DD_API_KEY_3: ${{ secrets.DD_API_KEY_3 }}
        DD_APP_KEY_3: ${{ secrets.DD_APP_KEY_3 }}
    - name: Run OTEL_LOG_E2E scenario
      if: always() && steps.build.outcome == 'success'
      run: ./run.sh OTEL_LOG_E2E
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
        DD_APPLICATION_KEY: ${{ secrets.DD_APPLICATION_KEY }}
        DD_APP_KEY: ${{ secrets.DD_APPLICATION_KEY }}
        DD_API_KEY_2: ${{ secrets.DD_API_KEY_2 }}
        DD_APP_KEY_2: ${{ secrets.DD_APP_KEY_2 }}
        DD_API_KEY_3: ${{ secrets.DD_API_KEY_3 }}
        DD_APP_KEY_3: ${{ secrets.DD_APP_KEY_3 }}

    - name: Compress logs
      if: always() && steps.build.outcome == 'success'
      run: tar -czvf artifact.tar.gz $(ls | grep logs)
    - name: Upload artifact
      if: always() && steps.build.outcome == 'success'
      uses: actions/upload-artifact@v3
      with:
        name: logs_java-otel_prod
        path: artifact.tar.gz

  open-telemetry-automatic:
    runs-on: ubuntu-latest
    if: inputs.run_open_telemetry || inputs.run_integration || inputs.run_all
    strategy:
      matrix:
        variant:
        - library: java_otel
          weblog: spring-boot-otel
        - library: python_otel
          weblog: flask-poc-otel
        - library: nodejs_otel
          weblog: express4-otel
        version:
        - prod
      fail-fast: false
    env:
      TEST_LIBRARY: ${{ matrix.variant.library }}
      WEBLOG_VARIANT: ${{ matrix.variant.weblog }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        repository: 'DataDog/system-tests'
    - name: Install runner
      uses: ./.github/actions/install_runner
    - name: Pull mitmproxy image
      run: docker pull datadog/system-tests:proxy-v1 || true
    - name: Build proxy image
      if: inputs.build_proxy_image
      run: ./build.sh -i proxy
    - name: Build agent
      run: SYSTEM_TEST_BUILD_ATTEMPTS=3 ./build.sh ${{ matrix.variant.library }} -i agent

    - name: Build weblog opentelemetry autoinstrumentation
      if: always()
      id: build_otel
      run: SYSTEM_TEST_BUILD_ATTEMPTS=3 ./build.sh ${{ matrix.variant.library }} --weblog-variant ${{ matrix.variant.weblog }}
    - name: Run OTEL_INTEGRATIONS scenario
      if: always() && steps.build_otel.outcome == 'success'
      run: ./run.sh OTEL_INTEGRATIONS
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
        DD_APPLICATION_KEY: ${{ secrets.DD_APPLICATION_KEY }}
        DD_APP_KEY: ${{ secrets.DD_APPLICATION_KEY }}
    - name: Compress logs
      if: always() && steps.build_otel.outcome == 'success'
      run: tar -czvf artifact.tar.gz $(ls | grep logs)
    - name: Upload artifact
      if: always() && steps.build_otel.outcome == 'success'
      uses: actions/upload-artifact@v3
      with:
        name: logs_${{ matrix.variant.library }}_${{ matrix.variant.version }}
        path: artifact.tar.gz

  exotics:
    if: inputs.run_all
    uses: ./.github/workflows/run-exotics.yml
    secrets: inherit

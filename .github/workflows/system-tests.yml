name: system-tests
on:
  workflow_call:
    inputs:
      library:
        description: "Library to test"
        required: true
        type: string
      scenarios: 
        description: "Comma-separated list scenarios to run"
        default: DEFAULT
        required: false
        type: string
      scenarios_groups: 
        description: "Comma-separated list of scenarios groups to run"
        default: ''
        required: false
        type: string
      binaries_artifact:
        description: "Artifact name containing the binaries to test"
        default: ''
        required: false
        type: string
      ci_environment:
        description: "Which CI environment is running the tests, used for FPD"
        default: 'custom'
        required: false
        type: string
      build_python_base_images:
        description: "Shall we build python base images for tests on python tracer"
        default: false
        required: false
        type: boolean
      build_buddies_images:
        description: "Shall we build buddies images"
        default: false
        required: false
        type: boolean
      build_proxy_image:
        description: "Shall we build proxy image"
        default: false
        required: false
        type: boolean
      build_lib_injection_app_images:
          description: "Shall we build and push k8s lib injection weblog images"
          default: false
          required: false
          type: boolean
      push_to_feature_parity_dashbaord:
        description: "Shall we push results to Feature Parity Dashbaord"
        default: false
        required: false
        type: boolean

jobs:
  compute_scenarios:
    name: Get scenarios list
    runs-on: ubuntu-latest
    outputs:
      endtoend_scenarios: ${{ steps.main.outputs.endtoend_scenarios }}
      graphql_scenarios: ${{ steps.main.outputs.graphql_scenarios }}
      libinjection_scenarios: ${{ steps.main.outputs.libinjection_scenarios }}
      opentelemetry_scenarios: ${{ steps.main.outputs.opentelemetry_scenarios }}
      parametric_scenarios: ${{ steps.main.outputs.parametric_scenarios }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        repository: 'DataDog/system-tests'
    - name: Install runner
      uses: ./.github/actions/install_runner
    - name: main
      id: main
      run: |
        source venv/bin/activate
        python utils/scripts/get_github_scenario_map.py >> $GITHUB_OUTPUT
      env:
        PYTHONPATH: "."
        SCENARIOS: ${{ inputs.scenarios }}
        SCENARIOS_GROUPS: ${{ inputs.scenarios_groups }}

  parametric:
    needs:
      - compute_scenarios
    if: needs.compute_scenarios.outputs.parametric_scenarios != '[]'
    uses: ./.github/workflows/run-parametric.yml
    secrets: inherit
    with:
      library: ${{ inputs.library }}
      binaries_artifact: ${{ inputs.binaries_artifact }}
      ci_environment: ${{ inputs.ci_environment }}

  graphql:
    needs:
      - compute_scenarios
    if: needs.compute_scenarios.outputs.graphql_scenarios != '[]'
    uses: ./.github/workflows/run-graphql.yml
    secrets: inherit
    with:
      build_proxy_image: ${{ inputs.build_proxy_image }}
      library: ${{ inputs.library }}
      binaries_artifact: ${{ inputs.binaries_artifact }}
      ci_environment: ${{ inputs.ci_environment }}

  lib-injection:
    needs:
      - compute_scenarios
    if: ${{ needs.compute_scenarios.outputs.libinjection_scenarios != '[]' && inputs.binaries_artifact == '' }}
    uses: ./.github/workflows/run-lib-injection.yml
    secrets: inherit
    with:
      build_lib_injection_app_images: ${{ inputs.build_lib_injection_app_images }}
      library: ${{ inputs.library }}

  end-to-end:
    needs:
      - compute_scenarios
    uses: ./.github/workflows/run-end-to-end.yml
    secrets: inherit
    with:
      library: ${{ inputs.library }}
      build_python_base_images: ${{ inputs.build_python_base_images }}
      build_buddies_images: ${{ inputs.build_buddies_images }}
      build_proxy_image: ${{ inputs.build_proxy_image }}
      scenarios: ${{ needs.compute_scenarios.outputs.endtoend_scenarios }}
      binaries_artifact: ${{ inputs.binaries_artifact }}
      ci_environment: ${{ inputs.ci_environment }}

  open-telemetry:
    needs:
      - compute_scenarios
    if: ${{ needs.compute_scenarios.outputs.opentelemetry_scenarios != '[]' && inputs.binaries_artifact == '' }}
    uses: ./.github/workflows/run-open-telemetry.yml
    secrets: inherit
    with:
      build_proxy_image: ${{ inputs.build_proxy_image }}
      library: ${{ inputs.library }}

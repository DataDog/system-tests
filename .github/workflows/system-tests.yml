name: system-tests
on:
  workflow_call:
    inputs:
      library:
        description: "Library to test"
        required: true
        type: string
      scenarios:
        description: "Comma-separated list scenarios to run"
        default: DEFAULT
        required: false
        type: string
      scenarios_groups:
        description: "Comma-separated list of scenarios groups to run"
        default: ''
        required: false
        type: string
      binaries_artifact:
        description: "Artifact name containing the binaries to test"
        default: ''
        required: false
        type: string
      ci_environment:
        description: "Which CI environment is running the tests, used for FPD"
        default: 'custom'
        required: false
        type: string
      build_python_base_images:
        description: "Shall we build python base images for tests on python tracer"
        default: false
        required: false
        type: boolean
      build_buddies_images:
        description: "Shall we build buddies images"
        default: false
        required: false
        type: boolean
      build_proxy_image:
        description: "Shall we build proxy image"
        default: false
        required: false
        type: boolean
      build_lib_injection_app_images:
          description: "Shall we build and push k8s lib injection weblog images"
          default: false
          required: false
          type: boolean
      push_to_feature_parity_dashbaord:
        description: "Shall we push results to Feature Parity Dashbaord"
        default: false
        required: false
        type: boolean
      skip_empty_scenarios:
        description: "Skip scenarios that contains only xfail or irrelevant tests"
        default: false
        required: false
        type: boolean
      parametric_job_count:
        description: "How many jobs should be used to run PARAMETRIC scenario"
        default: 1
        required: false
        type: number
      _experimental_parametric_job_count:
        description: "*DEPRECATED*"
        default: 1
        required: false
        type: number

jobs:
  compute_parameters:
    name: Get parameters
    uses: ./.github/workflows/compute-workflow-parameters.yml
    with:
      library: ${{ inputs.library }}
      scenarios: ${{ inputs.scenarios }}
      scenarios_groups: ${{ inputs.scenarios_groups }}
      parametric_job_count: ${{ inputs.parametric_job_count }}
      _ci_environment: ${{ inputs.ci_environment }}

  parametric:
    needs:
      - compute_parameters
    if: needs.compute_parameters.outputs.parametric_scenarios != '[]'
    uses: ./.github/workflows/run-parametric.yml
    secrets: inherit
    with:
      library: ${{ inputs.library }}
      binaries_artifact: ${{ inputs.binaries_artifact }}
      ci_environment: ${{ inputs.ci_environment }}
      job_count: ${{ inputs.parametric_job_count }}
      job_matrix: ${{ needs.compute_parameters.outputs.parametric_job_matrix }}

  lib-injection:
    needs:
      - compute_parameters
    if: ${{ needs.compute_parameters.outputs.libinjection_scenarios != '[]' }}
    uses: ./.github/workflows/run-lib-injection.yml
    permissions:
      contents: read
      packages: write
    secrets: inherit
    with:
      build_lib_injection_app_images: ${{ inputs.build_lib_injection_app_images }}
      library: ${{ inputs.library }}
      version: ${{ inputs.binaries_artifact == '' && 'prod' || 'dev' }}

  end-to-end:
    name: end-to-end - ${{ matrix.weblog_name }} (${{ matrix.library }})
    needs:
      - compute_parameters
    strategy:
      matrix: ${{ fromJson(needs.compute_parameters.outputs.endtoend_defs_weblogs) }}
      fail-fast: false
    uses: ./.github/workflows/run-end-to-end.yml
    secrets: inherit
    with:
      library: ${{ matrix.library }}
      weblog: ${{ matrix.weblog_name }}
      scenarios: ${{ toJson(matrix.scenarios) }}
      build_python_base_images: ${{ inputs.build_python_base_images }}
      build_buddies_images: ${{ inputs.build_buddies_images }}
      build_proxy_image: ${{ inputs.build_proxy_image }}
      weblogs: ${{ needs.compute_parameters.outputs.endtoend_weblogs }}
      binaries_artifact: ${{ inputs.binaries_artifact }}
      ci_environment: ${{ inputs.ci_environment }}
      skip_empty_scenarios: ${{ inputs.skip_empty_scenarios }}

  open-telemetry:
    needs:
      - compute_parameters
    if: ${{ needs.compute_parameters.outputs.opentelemetry_scenarios != '[]' && inputs.ci_environment != 'dev' }}
    uses: ./.github/workflows/run-open-telemetry.yml
    secrets: inherit
    with:
      library: ${{ inputs.library }}
      weblogs: ${{ needs.compute_parameters.outputs.opentelemetry_weblogs }}
      build_proxy_image: ${{ inputs.build_proxy_image }}
      skip_empty_scenarios: ${{ inputs.skip_empty_scenarios }}

  external-processing:
    needs:
      - compute_parameters
    if: ${{ needs.compute_parameters.outputs.externalprocessing_scenarios != '[]' && inputs.library == 'golang' && inputs.binaries_artifact != ''}}
    uses: ./.github/workflows/run-external-processing.yml
    secrets: inherit
    with:
      build_proxy_image: ${{ inputs.build_proxy_image }}
      ci_environment: ${{ inputs.ci_environment }}
      binaries_artifact: ${{ inputs.binaries_artifact }}

name: system-tests
on:
  workflow_call:
    inputs:
      library:
        description: "Library to test"
        required: true
        type: string
      ref:
        description: "system-tests ref to run the tests on (can be any valid branch, tag or SHA in system-tests repo)"
        type: string
      scenarios:
        description: "Comma-separated list scenarios to run"
        default: DEFAULT
        required: false
        type: string
      scenarios_groups:
        description: "Comma-separated list of scenarios groups to run"
        default: ''
        required: false
        type: string
      excluded_scenarios:
        description: "Comma-separated list of scenarios not to run"
        type: string
        default: ""
        required: false
      weblogs:
        description: "Comma-separated list of weblogs to run. By default, all weblogs are run"
        default: ''
        required: false
        type: string
      force_execute:
        description: "List of nodeid to force execute, separated by comma"
        required: false
        type: string
        default: ''
      binaries_artifact:
        description: "Artifact name containing the binaries to test"
        default: ''
        required: false
        type: string
      ci_environment:
        description: "**DEPRECATED**"
        default: 'custom'
        required: false
        type: string
      _build_python_base_images:
        description: "Shall we build python base images for tests on python tracer"
        default: false
        required: false
        type: boolean
      _build_buddies_images:
        description: "Shall we build buddies images"
        default: false
        required: false
        type: boolean
      _build_proxy_image:
        description: "Shall we build proxy image"
        default: false
        required: false
        type: boolean
      _build_lambda_proxy_image:
        description: "Shall we build the lambda-proxy image"
        default: false
        required: false
        type: boolean
      push_to_feature_parity_dashbaord:
        description: "Shall we push results to Feature Parity Dashbaord"
        default: false
        required: false
        type: boolean
      skip_empty_scenarios:
        description: "Skip scenarios that contains only xfail or irrelevant tests"
        default: false
        required: false
        type: boolean
      parametric_job_count:
        description: "How many jobs should be used to run PARAMETRIC scenario"
        default: 1
        required: false
        type: number
      desired_execution_time:
        description: "In seconds, system-tests will try to respect this time budget."
        default: "-1"
        required: false
        type: string
      _enable_replay_scenarios:
        description: "Enable replay scenarios, should only used in system-tests CI"
        default: false
        required: false
        type: boolean
      _experimental_parametric_job_count:
        description: "*DEPRECATED*"
        default: 1
        required: false
        type: number
      _system_tests_dev_mode:
        description: "Shall we run system tests in dev mode (library and agent dev binary)"
        default: false
        required: false
        type: boolean
      _system_tests_library_target_branch:
        description: "If system-tests dev mode, the branch to use for the library"
        default: ''
        required: false
        type: string
      artifact_retention_days:
        description: "Maximum retention of artifacts generated by upload-artifact action"
        default: 14
        required: false
        type: number
      display_summary:
        description: "Shall we display a summary of the test results at the end of the workflow run"
        default: false
        required: false
        type: boolean
    secrets:
      DOCKERHUB_USERNAME:
        required: false
      DOCKERHUB_TOKEN:
        required: false
      CIRCLECI_TOKEN:
        required: false
      DD_API_KEY:
        required: false
      DD_APPLICATION_KEY:
        required: false
      DD_API_KEY_2:
        required: false
      DD_APP_KEY_2:
        required: false
      DD_API_KEY_3:
        required: false
      DD_APP_KEY_3:
        required: false

jobs:
  compute_parameters:
    name: Get parameters
    uses: ./.github/workflows/compute-workflow-parameters.yml
    with:
      library: ${{ inputs.library }}
      ref: ${{ inputs.ref }}
      scenarios: ${{ inputs.scenarios }}
      scenarios_groups: ${{ inputs.scenarios_groups }}
      excluded_scenarios: ${{ inputs.excluded_scenarios }}
      weblogs: ${{ inputs.weblogs }}
      parametric_job_count: ${{ inputs.parametric_job_count }}
      desired_execution_time: ${{ inputs.desired_execution_time }}
      binaries_artifact: ${{ inputs.binaries_artifact }}
      _system_tests_dev_mode: ${{ inputs._system_tests_dev_mode }}
      _system_tests_library_target_branch: ${{ inputs._system_tests_library_target_branch }}

  parametric:
    needs:
      - compute_parameters
    if: needs.compute_parameters.outputs.parametric_enable == 'true'
    uses: ./.github/workflows/run-parametric.yml
    secrets: inherit
    with:
      library: ${{ inputs.library }}
      ref: ${{ inputs.ref }}
      binaries_artifact: ${{ needs.compute_parameters.outputs.binaries_artifact }}
      force_execute: ${{ inputs.force_execute }}
      ci_environment: ${{ needs.compute_parameters.outputs.ci_environment }}
      job_count: ${{ inputs.parametric_job_count }}
      job_matrix: ${{ needs.compute_parameters.outputs.parametric_job_matrix }}
      artifact_retention_days: ${{ inputs.artifact_retention_days }}
      unique_id: ${{ needs.compute_parameters.outputs.unique_id }}

  build_end_to_end:
    name: Build end-to-end (${{ matrix.weblog }})
    needs:
      - compute_parameters
    if: ${{ needs.compute_parameters.outputs.endtoend_defs_parallel_enable == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        weblog: ${{ fromJson(needs.compute_parameters.outputs.endtoend_defs_parallel_weblogs) }}
      fail-fast: false
    steps:
      - name: Compute ref
        id: compute_ref
        run: |
          if [[ "${{ inputs.ref }}" != "" ]]; then
            echo "ref=${{ inputs.ref }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.repository }}" == "DataDog/system-tests" ]]; then
            echo "ref=" >> $GITHUB_OUTPUT
          else
            echo "ref=main" >> $GITHUB_OUTPUT
          fi
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          repository: 'DataDog/system-tests'
          ref: ${{ steps.compute_ref.outputs.ref }}
      - name: Get binaries artifact
        if : ${{ needs.compute_parameters.outputs.binaries_artifact != '' }}
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: ${{ needs.compute_parameters.outputs.binaries_artifact }}
          path: binaries/
      - name: Log binaries contents
        if : ${{ needs.compute_parameters.outputs.binaries_artifact != '' }}
        run: ls -la binaries/
      - name: Export github token to a file
        run: echo "${{ secrets.GITHUB_TOKEN }}" > "$RUNNER_TEMP/github_token.txt"
      - name: Build weblog base images
        if: inputs.library == 'python' && inputs._build_python_base_images
        run: |
          ./utils/build/build_python_base_images.sh
      - name: Build weblog
        id: build
        run: SYSTEM_TEST_BUILD_ATTEMPTS=3 ./build.sh ${{ inputs.library }} -i weblog -w ${{ matrix.weblog }} -s --github-token-file "$RUNNER_TEMP/github_token.txt"
      - name: Remove secrets
        if: always()
        run: |
          TOKEN_FILE="$RUNNER_TEMP/github_token.txt"
          if [ -f "$TOKEN_FILE" ]; then
            echo "Removing token file at $TOKEN_FILE"
            rm -f "$TOKEN_FILE"
          else
            echo "Token file not found â€” nothing to clean up"
          fi
      - name: Upload artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: binaries_${{ needs.compute_parameters.outputs.ci_environment }}_${{ inputs.library }}_${{ matrix.weblog }}_${{ needs.compute_parameters.outputs.unique_id }}
          path: binaries/
          retention-days: ${{ inputs.artifact_retention_days }}

  run_end_to_end:
    name: "End-to-end #${{ matrix.job.weblog_instance }}"
    needs:
      - compute_parameters
      - build_end_to_end
    if: ${{ needs.compute_parameters.outputs.endtoend_defs_parallel_enable == 'true' }}
    strategy:
      matrix:
        job: ${{ fromJson(needs.compute_parameters.outputs.endtoend_defs_parallel_jobs) }}
      fail-fast: false
    uses: ./.github/workflows/run-end-to-end.yml
    secrets: inherit
    with:
      library: ${{ matrix.job.library }}
      ref: ${{ inputs.ref }}
      weblog: ${{ matrix.job.weblog }}
      weblog_instance: ${{ matrix.job.weblog_instance }}
      scenarios: ${{ toJson(matrix.job.scenarios) }}
      force_execute: ${{ inputs.force_execute }}
      _build_buddies_images: ${{ inputs._build_buddies_images }}
      _build_proxy_image: ${{ inputs._build_proxy_image }}
      _build_lambda_proxy_image: ${{ inputs._build_lambda_proxy_image }}
      binaries_artifact: binaries_${{ needs.compute_parameters.outputs.ci_environment }}_${{ inputs.library }}_${{ matrix.job.weblog }}_${{ needs.compute_parameters.outputs.unique_id }}
      ci_environment: ${{ needs.compute_parameters.outputs.ci_environment }}
      skip_empty_scenarios: ${{ inputs.skip_empty_scenarios }}
      _enable_replay_scenarios: ${{ inputs._enable_replay_scenarios }}
      logs_artifact_name: logs_endtoend_${{ inputs.library }}_${{ matrix.job.weblog }}_${{ needs.compute_parameters.outputs.ci_environment }}_${{ matrix.job.weblog_instance }}_${{ needs.compute_parameters.outputs.unique_id }}
      artifact_retention_days: ${{ inputs.artifact_retention_days }}

  external_processing:
    needs:
      - compute_parameters
    if: ${{ needs.compute_parameters.outputs.externalprocessing_scenarios != '[]' && inputs.library == 'golang'}}
    uses: ./.github/workflows/run-external-processing.yml
    secrets: inherit
    with:
      ref: ${{ inputs.ref }}
      _build_proxy_image: ${{ inputs._build_proxy_image }}
      ci_environment: ${{ needs.compute_parameters.outputs.ci_environment }}
      binaries_artifact: ${{ needs.compute_parameters.outputs.binaries_artifact }}
      artifact_retention_days: ${{ inputs.artifact_retention_days }}
      unique_id: ${{ needs.compute_parameters.outputs.unique_id }}

  run_stream_processing_offload:
    needs:
      - compute_parameters
    if: ${{ needs.compute_parameters.outputs.streamprocessingoffload_scenarios != '[]' && inputs.library == 'golang'}}
    uses: ./.github/workflows/run-stream-processing-offload.yml
    secrets: inherit
    with:
      ref: ${{ inputs.ref }}
      _build_proxy_image: ${{ inputs._build_proxy_image }}
      ci_environment: ${{ needs.compute_parameters.outputs.ci_environment }}
      binaries_artifact: ${{ needs.compute_parameters.outputs.binaries_artifact }}
      artifact_retention_days: ${{ inputs.artifact_retention_days }}
      unique_id: ${{ needs.compute_parameters.outputs.unique_id }}

  display_summary:
    name: Report failures
    needs:
      - compute_parameters
      - run_end_to_end
      - parametric
      - external_processing
    if: always() && inputs.display_summary == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          repository: 'DataDog/system-tests'
          ref: ${{ inputs.ref }}
      - name: Install runner
        uses: ./.github/actions/install_runner
      - name: Download logs artifact
        uses: actions/download-artifact@v4
        with:
          merge-multiple: false
          pattern: logs_*_${{ needs.compute_parameters.outputs.unique_id }}
      - name: Uncompress logs
        run: |
          for d in logs_*; do
            if [ -f "$d/artifact.tar.gz" ]; then
              tar -xzf "$d/artifact.tar.gz" -C "$d" --wildcards '*/reportJunit.xml'
            fi
          done
      - name: Get summary
        run: |
          source venv/bin/activate
          python utils/scripts/get-summary.py -o ${GITHUB_STEP_SUMMARY}

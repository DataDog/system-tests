name: "Compute scenarios to run"

on:
  workflow_call:
    # Map the workflow outputs to job outputs
    outputs:
      run_all:
        description: "Shall we run all scenarios"
        value: ${{ jobs.labels.outputs.run_all }}
      run_open_telemetry:
        description: "Shall we run open-telemetry scenarios"
        value: ${{ jobs.labels.outputs.run_open_telemetry }}
      run_sampling:
        description: "Shall we run sampling scenarios"
        value: ${{ jobs.labels.outputs.run_sampling }}
      run_profiling:
        description: "Shall we run profiling scenario"
        value: ${{ jobs.labels.outputs.run_profiling }}
      run_parametric:
        description: "Shall we run parametric scenario"
        value: ${{ jobs.labels.outputs.run_parametric }}
      run_libinjection:
        description: "Shall we run lib-injection scenarios"
        value: ${{ jobs.labels.outputs.run_libinjection }}
      run_debugger:
        description: "Shall we run debugger scenarios"
        value: ${{ jobs.labels.outputs.run_debugger }}
      run_appsec:
        description: "Shall we run AppSec scenarios"
        value: ${{ jobs.labels.outputs.run_appsec }}
      run_integration:
        description: "Shall we run Integrations scenarios"
        value: ${{ jobs.labels.outputs.run_integration }}
      run_graphql:
        description: "Shall we run GraphQL scenarios"
        value: ${{ jobs.labels.outputs.run_graphql }}
      scenarios:
        description: "JSON array of scenarios to run"
        value: ${{ jobs.manifests.outputs.scenarios }}

jobs:
  labels:
    runs-on: ubuntu-latest
    # Map the job outputs to step outputs
    outputs:
      run_all: ${{ steps.compute_run_all.outputs.result }}
      run_open_telemetry: ${{ steps.compute_open_telemetry.outputs.result }}
      run_sampling: ${{ steps.compute_sampling.outputs.result }}
      run_profiling: ${{ steps.compute_profiling.outputs.result }}
      run_parametric: ${{ steps.compute_parametric.outputs.result }}
      run_libinjection: ${{ steps.compute_libinjection.outputs.result }}
      run_debugger: ${{ steps.compute_debugger.outputs.result }}
      run_appsec: ${{ steps.compute_appsec.outputs.result }}
      run_integration: ${{ steps.compute_integration.outputs.result }}
      run_graphql: ${{ steps.compute_graphql.outputs.result }}
    steps:
      - name: Compute run_all
        id: compute_run_all
        run: |
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo "result=true" >> $GITHUB_OUTPUT

          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "result=true" >> $GITHUB_OUTPUT

          elif [ "${{ contains(github.event.pull_request.labels.*.name, 'run-all-scenarios') }}" == "true" ]; then
            echo "result=true" >> $GITHUB_OUTPUT

          else
            echo "result=false" >> $GITHUB_OUTPUT
          fi

          echo "Result: $GITHUB_OUTPUT"

      - name: Compute run_open_telemetry
        id: compute_open_telemetry
        run: |
          if [ "${{ steps.compute_run_all.outputs.result }}" == "true" ]; then
            echo "result=true" >> $GITHUB_OUTPUT

          elif [ "${{ contains(github.event.pull_request.labels.*.name, 'run-open-telemetry-scenarios') }}" == "true" ]; then
            echo "result=true" >> $GITHUB_OUTPUT

          else
            echo "result=false" >> $GITHUB_OUTPUT
          fi

          echo "Result: $GITHUB_OUTPUT"

      - name: Compute run_sampling
        id: compute_sampling
        run: |
          if [ "${{ steps.compute_run_all.outputs.result }}" == "true" ]; then
            echo "result=true" >> $GITHUB_OUTPUT

          elif [ "${{ contains(github.event.pull_request.labels.*.name, 'run-sampling-scenario') }}" == "true" ]; then
            echo "result=true" >> $GITHUB_OUTPUT

          else
            echo "result=false" >> $GITHUB_OUTPUT
          fi

          echo "Result: $GITHUB_OUTPUT"

      - name: Compute run_profiling
        id: compute_profiling
        run: |
          if [ "${{ steps.compute_run_all.outputs.result }}" == "true" ]; then
            echo "result=true" >> $GITHUB_OUTPUT

          elif [ "${{ contains(github.event.pull_request.labels.*.name, 'run-profiling-scenario') }}" == "true" ]; then
            echo "result=true" >> $GITHUB_OUTPUT

          else
            echo "result=false" >> $GITHUB_OUTPUT
          fi

          echo "Result: $GITHUB_OUTPUT"

      - name: Compute run_parametric
        id: compute_parametric
        run: |
          if [ "${{ steps.compute_run_all.outputs.result }}" == "true" ]; then
            echo "result=true" >> $GITHUB_OUTPUT

          elif [ "${{ contains(github.event.pull_request.labels.*.name, 'run-parametric-scenario') }}" == "true" ]; then
            echo "result=true" >> $GITHUB_OUTPUT

          else
            echo "result=false" >> $GITHUB_OUTPUT
          fi

          echo "Result: $GITHUB_OUTPUT"

      - name: Compute run_libinjection
        id: compute_libinjection
        run: |
          if [ "${{ steps.compute_run_all.outputs.result }}" == "true" ]; then
            echo "result=true" >> $GITHUB_OUTPUT

          elif [ "${{ contains(github.event.pull_request.labels.*.name, 'run-libinjection-scenarios') }}" == "true" ]; then
            echo "result=true" >> $GITHUB_OUTPUT

          else
            echo "result=false" >> $GITHUB_OUTPUT
          fi

          echo "Result: $GITHUB_OUTPUT"

      - name: Compute run_debugger
        id: compute_debugger
        run: |
          if [ "${{ steps.compute_run_all.outputs.result }}" == "true" ]; then
            echo "result=true" >> $GITHUB_OUTPUT

          elif [ "${{ contains(github.event.pull_request.labels.*.name, 'run-debugger-scenarios') }}" == "true" ]; then
            echo "result=true" >> $GITHUB_OUTPUT

          else
            echo "result=false" >> $GITHUB_OUTPUT
          fi

          echo "Result: $GITHUB_OUTPUT"

      - name: Compute run_appsec
        id: compute_appsec
        run: |
          if [ "${{ steps.compute_run_all.outputs.result }}" == "true" ]; then
            echo "result=true" >> $GITHUB_OUTPUT

          elif [ "${{ contains(github.event.pull_request.labels.*.name, 'run-appsec-scenarios') }}" == "true" ]; then
            echo "result=true" >> $GITHUB_OUTPUT

          else
            echo "result=false" >> $GITHUB_OUTPUT
          fi

          echo "Result: $GITHUB_OUTPUT"

      - name: Compute run_integration
        id: compute_integration
        run: |
          if [ "${{ steps.compute_run_all.outputs.result }}" == "true" ]; then
            echo "result=true" >> $GITHUB_OUTPUT

          elif [ "${{ steps.compute_appsec.outputs.result }}" == "true" ]; then
            # Some AppSec tests are in integrations scenario
            echo "result=true" >> $GITHUB_OUTPUT

          elif [ "${{ contains(github.event.pull_request.labels.*.name, 'run-integration-scenarios') }}" == "true" ]; then
            echo "result=true" >> $GITHUB_OUTPUT

          else
            echo "result=false" >> $GITHUB_OUTPUT
          fi

          echo "Result: $GITHUB_OUTPUT"

      - name: Compute run_graphql
        id: compute_graphql
        run: |
          if [ "${{ steps.compute_run_all.outputs.result }}" == "true" ]; then
            echo "result=true" >> $GITHUB_OUTPUT

          elif [ "${{ steps.compute_appsec.outputs.result }}" == "true" ]; then
            # Some AppSec tests are in GraphQL scenario
            echo "result=true" >> $GITHUB_OUTPUT

          elif [ "${{ contains(github.event.pull_request.labels.*.name, 'run-graphql-scenarios') }}" == "true" ]; then
            echo "result=true" >> $GITHUB_OUTPUT

          else
            echo "result=false" >> $GITHUB_OUTPUT
          fi

          echo "Result: $GITHUB_OUTPUT"

      - name: Print results
        run: |
          echo "Run all: -> ${{ steps.compute_run_all.outputs.result }}"
          echo "Run open telemetry: -> ${{ steps.compute_open_telemetry.outputs.result }}"
          echo "Run sampling: -> ${{ steps.compute_sampling.outputs.result }}"
          echo "Run profiling: -> ${{ steps.compute_profiling.outputs.result }}"
          echo "Run parametric: -> ${{ steps.compute_parametric.outputs.result }}"
          echo "Run lib-injection: -> ${{ steps.compute_libinjection.outputs.result }}"
          echo "Run debugger: -> ${{ steps.compute_debugger.outputs.result }}"
          echo "Run appsec: -> ${{ steps.compute_appsec.outputs.result }}"
          echo "Run integration: -> ${{ steps.compute_integration.outputs.result }}"
          echo "Run graphql: -> ${{ steps.compute_graphql.outputs.result }}"

  manifests:
    runs-on: ubuntu-latest
    outputs:
      scenarios: ${{ steps.compute_impacted_scenarios.outputs.scenarios }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: 'DataDog/system-tests'
      - name: Install runner
        uses: ./.github/actions/install_runner
      - name: Get original manifest
        run: |
          mkdir original/
          git --work-tree=original/ checkout HEAD -- manifests/
      - name: Get scenario map 
        run: ./run.sh MOCK_THE_TEST --collect-only --scenario-report
      - name: Compute impacted scenario
        id: compute_impacted_scenarios
        run: |
          source venv/bin/activate
          echo "scenarios=$(python utils/scripts/compute_impacted_scenario.py)" >> $GITHUB_OUTPUT
        env:
          PYTHONPATH: "."

name: "Compute libraries and scenarios"

on:
  workflow_call:
    outputs:
      # Library outputs
      libraries_with_dev:
        description: "JSON list of libraries that require a dev run"
        value: ${{ jobs.main.outputs.libraries_with_dev }}
      library_matrix:
        description: "List of couple library + dev/prod to run"
        value: ${{ jobs.main.outputs.library_matrix }}
      desired_execution_time:
        description: "Time in seconds"
        value: ${{ jobs.main.outputs.desired_execution_time }}
      target-branch:
        description: "dd-trace branch to test"
        value: ${{ jobs.main.outputs.target-branch }}
      rebuild_lambda_proxy:
        description: "Should the lambda-proxy image be rebuilt"
        value: ${{ jobs.main.outputs.rebuild_lambda_proxy }}
      # Scenario outputs
      scenarios:
        description: "Comma-separated list of scenarios to run"
        value: ${{ jobs.main.outputs.scenarios }}
      scenario_groups:
        description: "Comma-separated list of scenarios groups to run"
        value: ${{ jobs.main.outputs.scenario_groups }}

jobs:
  main:
    runs-on: ubuntu-latest
    outputs:
      library_matrix:  ${{ steps.compute.outputs.library_matrix }}
      libraries_with_dev:  ${{ steps.compute.outputs.libraries_with_dev }}
      desired_execution_time:  ${{ steps.compute.outputs.desired_execution_time }}
      target-branch: ${{ steps.get-target-branch.outputs.target-branch }}
      rebuild_lambda_proxy: ${{ steps.compute.outputs.rebuild_lambda_proxy }}
      scenarios: ${{ steps.compute.outputs.scenarios }}
      scenario_groups: ${{ steps.compute.outputs.scenarios_groups }}
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          repository: 'DataDog/system-tests'
      - name: Checkout main branch
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          repository: 'DataDog/system-tests'
          ref: 'main'
          path: 'original'
      - name: Install runner
        uses: ./.github/actions/install_runner
      - name: Get scenario map
        run: ./run.sh MOCK_THE_TEST --collect-only --scenario-report
      - name: Files changed in PR
        if: github.event_name == 'pull_request'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh api \
            repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files \
            --paginate --jq '.[].filename' \
            > modified_files.txt
          cat modified_files.txt
      - name: Compute libraries and scenarios
        id: compute
        run: |
          source venv/bin/activate
          python utils/scripts/compute_libraries_and_scenarios.py -o $GITHUB_OUTPUT
        env:
          PYTHONPATH: "."
          GITHUB_REF: ${{ github.ref }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_PR_TITLE: ${{ github.event.pull_request.title }}
      - name: Get target branch
        uses: ./.github/actions/get_target_branch
        id: get-target-branch
        with:
          text: ${{ github.event.pull_request.title }}
      - name: Print results
        run: |
          echo 'Impacted libraries: -> ${{ steps.compute.outputs.library_matrix }}'
          echo 'Desired execution time: -> ${{ steps.compute.outputs.desired_execution_time }}'
          echo 'Target branch: -> ${{ steps.get-target-branch.outputs.target-branch }}'
          echo 'Rebuild lambda-proxy: -> ${{ steps.compute.outputs.rebuild_lambda_proxy }}'
          echo 'Scenarios: -> ${{ steps.compute.outputs.scenarios }}'
          echo 'Scenario Groups: -> ${{ steps.compute.outputs.scenario_groups }}'

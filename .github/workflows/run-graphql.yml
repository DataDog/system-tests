name: GraphQL
on:
  workflow_call:
    inputs:
      build_proxy_image:
        description: "Shall we build proxy image"
        default: false
        required: false
        type: boolean
      library:
        description: "Library to test"
        required: true
        type: string
      weblogs: 
        description: "JSON array of weblogs to run"
        default: "[]"
        required: false
        type: string
      binaries_artifact:
        description: "Artifact name containing the binaries to test"
        default: ''
        required: false
        type: string
      ci_environment:
        description: "Which CI environment is running the tests, used for FPD"
        default: 'custom'
        required: false
        type: string

env:
  REGISTRY: ghcr.io

jobs:
  graphql:
    if: inputs.library == 'golang' || inputs.library == 'nodejs'
    runs-on:
      group: "APM Larger Runners"
    strategy:
      matrix:
        weblog: ${{ fromJson(inputs.weblogs) }}
      fail-fast: false

    env:
      TEST_LIBRARY: ${{ inputs.library }}
      WEBLOG_VARIANT: ${{ matrix.weblog }}
      SYSTEM_TESTS_REPORT_ENVIRONMENT: ${{ inputs.ci_environment }}
      SYSTEM_TESTS_REPORT_RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: 'DataDog/system-tests'
      - name: Install runner
        uses: ./.github/actions/install_runner

      - name: Build proxy image
        if: inputs.build_proxy_image
        run: ./build.sh -i proxy
      - name: Get binaries artifact
        if : ${{ inputs.binaries_artifact != '' }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.binaries_artifact }}
          path: binaries/
      - name: Log in to the Container registry
        if: ${{ inputs.library == 'ruby' }}
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

      - name: Build agent
        run: SYSTEM_TEST_BUILD_ATTEMPTS=3 ./build.sh -i agent

      - name: Build weblog
        id: build
        run: SYSTEM_TEST_BUILD_ATTEMPTS=3 ./build.sh -i weblog

      - name: Run GRAPHQL_APPSEC scenario
        run: ./run.sh GRAPHQL_APPSEC
        env:
          DD_API_KEY: ${{ secrets.DD_API_KEY }}

      - name: Compress logs
        id: compress_logs
        if: always()
        run: tar -czvf artifact.tar.gz $(ls | grep logs)
      - name: Upload artifact
        if: always() && steps.compress_logs.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: logs_graphql_${{ inputs.library }}_${{ matrix.weblog }}_${{ inputs.ci_environment }}
          path: artifact.tar.gz
      - name: Upload results CI Visibility
        if: always()
        run: ./utils/scripts/upload_results_CI_visibility.sh dev system-tests ${{ github.run_id }}-${{ github.run_attempt }}
        env:
          DD_API_KEY: ${{ secrets.DD_CI_API_KEY }}
      - name: Print fancy log report
        if: always()
        run: python utils/scripts/markdown_logs.py >> $GITHUB_STEP_SUMMARY

name: Stream Processing Offload (HAProxy) tests

on:
  workflow_call:
    inputs:
      ref:
        description: "system-tests ref to run the tests on (can be any valid branch, tag or SHA in system-tests repo)"
        type: string
      binaries_artifact:
        description: "Artifact name containing the binaries to test"
        default: ''
        required: false
        type: string
      ci_environment:
        description: "Which CI environment is running the tests, used for FPD"
        default: 'custom'
        required: false
        type: string
      _build_proxy_image:
        description: "Shall we build proxy image"
        default: false
        required: false
        type: boolean
      artifact_retention_days:
        description: "Maximum retention of artifacts generated by upload-artifact action"
        default: 14
        required: false
        type: number
      unique_id:
        description: "Unique ID to append to the artifact name, useful for parallel runs"
        default: "1"
        required: false
        type: string
      push_to_test_optimization:
        description: "Push test result to DataDog Test Optimization"
        default: false
        required: false
        type: boolean

env:
  REGISTRY: ghcr.io


jobs:
  stream-processing-offload:
    runs-on:
      group: "APM Larger Runners"

    env:
      SYSTEM_TESTS_REPORT_ENVIRONMENT: ${{ inputs.ci_environment }}
      SYSTEM_TESTS_REPORT_RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

    steps:
      - name: Compute ref
        id: compute_ref
        run: |
          if [[ "${{ inputs.ref }}" != "" ]]; then
            echo "ref=${{ inputs.ref }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.repository }}" == "DataDog/system-tests" ]]; then
            echo "ref=" >> $GITHUB_OUTPUT
          else
            echo "ref=main" >> $GITHUB_OUTPUT
          fi
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          repository: 'DataDog/system-tests'
          ref: ${{ steps.compute_ref.outputs.ref }}
      - name: Install runner
        uses: ./.github/actions/install_runner

      - name: Log in to the Container registry
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

      - name: Get binaries artifact
        if : ${{ inputs.binaries_artifact != '' }}
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: ${{ inputs.binaries_artifact }}
          path: binaries/

      - name: Pull images
        uses: ./.github/actions/pull_images
        with:
          library: golang
          weblog: golang-dummy
          scenarios: '["STREAM_PROCESSING_OFFLOAD", "STREAM_PROCESSING_OFFLOAD_BLOCKING"]'

      - name: Build proxy image
        if: inputs._build_proxy_image
        run: ./build.sh -i proxy

      - name: Run STREAM_PROCESSING_OFFLOAD scenario
        run: ./run.sh STREAM_PROCESSING_OFFLOAD

      - name: Run STREAM_PROCESSING_OFFLOAD_BLOCKING scenario
        run: ./run.sh STREAM_PROCESSING_OFFLOAD_BLOCKING

      - name: Compress logs
        id: compress_logs
        if: always() && steps.build.outcome == 'success'
        run: |
          if compgen -G "logs*/" > /dev/null; then
            tar -czvf artifact.tar.gz logs*/
          else
            echo "No logs*/ found; skipping tar."
          fi
      - name: Upload artifact
        if: always() && steps.compress_logs.outcome == 'success'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: logs_streamprocessingoffload_golang_golang-dummy_${{ inputs.ci_environment }}_${{ inputs.unique_id }}
          path: artifact.tar.gz
          retention-days: ${{ inputs.artifact_retention_days }}

      - name: Push results to Test Optimization
        if: always() && inputs.push_to_test_optimization
        uses: ./.github/actions/push_to_test_optim
        with:
          datadog_api_key: ${{ secrets.TEST_OPTIMIZATION_API_KEY }}

name: Docker SSI tests

on:
  workflow_call:
    inputs:
      library:
        description: "Library to test"
        required: true
        type: string
      weblogs:
        description: "JSON array of weblogs to run"
        default: "[]"
        required: false
        type: string

jobs:
  docker-ssi-check-injection:
    if: inputs.library == 'java'
    strategy:
      matrix: ${{ fromJson(inputs.weblogs) }}
      fail-fast: false
    # the runner depends of the architecture of the image that we want to test
    runs-on: ${{ matrix.github_runner }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        repository: 'DataDog/system-tests'
    - name: check os
      run: echo ${{ matrix.github_runner }}
    - name: Prepare arm runner
      if: ${{ matrix.platform.runner }} == 'arm-4core-linux'
      # The ARM64 Ubuntu has less things installed by default
      # We need docker, and acl allows us to use docker in the same session
      run: |
        curl -fsSL https://get.docker.com -o get-docker.sh
        sudo sh get-docker.sh
        sudo usermod -a -G docker $USER
        sudo apt install -y acl
        sudo setfacl --modify user:runner:rw /var/run/docker.sock
    - uses: actions/checkout@v4
    - name: Set up QEMU for docker cross platform setup
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Install runner
      uses: ./.github/actions/install_runner
    - name: Run Docker SSI scenario
      if: always()
      run: ./run.sh DOCKER_SSI --ssi-weblog ${{matrix.weblog}} --ssi-library ${{ inputs.library }} --ssi-base-image ${{matrix.base_image}} --ssi-arch ${{matrix.arch}} --ssi-runtime ${{matrix.runtime}}
      env:
        TEST_LIBRARY: ${{ inputs.library }}
    - name: Compress logs
      if: always()
      run: tar -czvf artifact.tar.gz $(ls | grep logs)
    - name: Upload artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: logs_docker_ssi_${{ inputs.library }}_${{ matrix.unique_name }}
        path: artifact.tar.gz
import json

from tests.apm_tracing_e2e.test_single_span import _get_spans_submitted, _assert_msg
from utils import weblog, scenarios, interfaces
from utils.parametric.spec.tracecontext import get_traceparent


@scenarios.apm_tracing_e2e_tracecontext
class Test_Tracecontext_Span:
    """This is a smoke test that exercises the W3C context propagation.
    '/make_tracecontext_call' request flow:
     - extracts context from the propagated headers,
     - creates a span with extracted context,
     - injects new span context into a map and returns it as text upon success
    As a summary, successful request produces a span with injected context and
    returns a map with newly generated W3C headers.
    """

    def setup_tracecontext_span(self):
        self.req = weblog.get(
            "/make_tracecontext_call",
            {
                "shouldIndex": 1,
                "name": "inherited_child",
                "tracestate": "dd=s:2;o:system-tests;t.usr.id:baz64~~,othervendor=t61rcWkgMzE",
                "traceparent": "00-00000000000000001111111111111111-2222222222222222-01",
            })

    def test_tracecontext_span(self):
        # Assert the weblog server span was sent by the agent.
        spans = _get_spans_submitted(self.req)
        # we are expecting two spans, one of which is generated by weblog
        assert 2 == len(spans), _assert_msg(2, len(spans), "Agent did not submit the spans we want!")

        # Assert received span has properties from the passed headers
        span = _get_span(spans, "inherited_child")
        # 00000000000000001111111111111111 in integer form
        assert span.get("traceID") == '1229782938247303441'
        # 2222222222222222 in integer form
        assert span.get("parentID") == '2459565876494606882'

        data = json.loads(self.req.text)
        # Assert only W3C headers were injected (no Datadog headers)
        assert "traceparent" in data
        assert "tracestate" in data
        assert "x-datadog-parent-id" not in data
        assert "x-datadog-sampling-priority" not in data
        assert "x-datadog-tags" not in data
        assert "x-datadog-trace-id" not in data

        # Assert injected headers have
        # - the same trace id, as passed through traceparent header before
        # - different parent id, that is equal to the spanId of the received span
        # - trace flags == 01,
        traceparent = get_traceparent(data)
        assert traceparent.trace_id == '00000000000000001111111111111111'
        assert int(traceparent.parent_id, 16) == int(span.get('spanID'))
        assert traceparent.trace_flags == '01'

        # Assert all spans in the distributed trace were received from the backend
        spans = interfaces.backend.assert_request_spans_exist(self.req, query_filter="")
        assert 1 == len(spans), _assert_msg(1, len(spans))


def _get_span(spans, span_name):
    for s in spans:
        if s["name"] == span_name:
            return s
    return {}

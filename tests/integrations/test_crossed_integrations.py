from utils import interfaces, scenarios, coverage, weblog
from utils._weblog import _Weblog
from utils.tools import logger


# TODO: move this class in utils
class _PythonBuddy(_Weblog):
    def __init__(self):
        from collections import defaultdict

        self.port = 9001
        self.domain = "localhost"

        self.responses = defaultdict(list)
        self.current_nodeid = "not used"
        self.replay = False


@scenarios.crossed_integrations
@coverage.basic
class Test_PythonKafka:
    """ Test kafka compatibility with datadog python tracer """

    # Given a trace payload, find the producer and consumer spans
    @staticmethod
    def find_producer_consumer_spans(trace):
        producer_span = None
        consumer_span = None

        for span in trace:
            span_component = span["meta"]["component"]
            span_kind = span["meta"].get("span.kind")

            if span_component == "kafka" and span_kind == "producer":
                logger.debug("producer span found:", span)
                producer_span = span
            elif span_component == "kafka" and span_kind == "consumer":
                logger.debug("consumer span found:", span)
                consumer_span = span

        return producer_span, consumer_span

    def get_topic_from_span(self, span):
        # argument span : a span from the tracer
        # returns the kafka topic if exists, None otherwise

        return None

    def get_traces(self, topic):
        paths = ["/v0.4/traces", "/v0.5/traces"]

        logger.debug(f"Try to found traces related to kafka topic {topic}")

        for data in interfaces.library.get_data(path_filters=paths):
            traces = data["request"]["content"]
            for trace in traces:
                for span in trace:
                    if topic == self.get_topic_from_span(span):  # TODO
                        yield data, trace
                        break

    def setup_produce(self):
        """
            send request A to weblog : this request will produce a kafka message
            send request B to python buddy, this request will consume kafka message
        """

        python_buddy = _PythonBuddy()

        self.production_response = weblog.get("/kafka/produce", params={"topic": "MyUniqueTopic"})
        self.consume_response = python_buddy.get("/kafka/consume")

    def test_produce(self):
        """ Check that a message produced to kafka is correctly ingested by a Datadog python tracer"""

        assert self.production_response.status_code == 200
        assert self.consume_response.status_code == 200

        # traces = interfaces.library.get_traces(request=A)
        # do whatever test we want on traces generated by request A

        # traces = interfaces.python_buddy.get_traces(request=B)
        # do whatever test we want on traces generated by request B

        producer_span_from_producer = None
        consumer_span_from_consumer = None

        # get_spans returns several tuple items
        # for data, trace in interfaces.library.get_traces(self.production_response):
        for data, trace in self.get_traces(topic="MyUniqueTopic"):
            producer_span_from_producer, consumer_span_from_producer = self.find_producer_consumer_spans(trace)

            # The producer endpoint should not create any consumer spans
            assert producer_span_from_producer is not None
            assert consumer_span_from_producer is None

        for data, trace in interfaces.python_buddy.get_traces(self.consume_response):
            producer_span_from_consumer, consumer_span_from_consumer = self.find_producer_consumer_spans(trace)

            # The consumer endpoint should not create any producer spans
            assert producer_span_from_consumer is None
            assert consumer_span_from_consumer is not None

        # TODO: Add more assertions between producer_span_from_producer and consumer_span_from_consumer
        assert consumer_span_from_consumer["meta"]["kafka.received_message"] == "True"

        # assert that trace and span ids are equals on both sides
        assert producer_span_from_producer["trace_id"] == consumer_span_from_consumer["trace_id"]
        assert producer_span_from_producer["span_id"] == consumer_span_from_consumer["parent_id"]

    def setup_consume(self):
        """
            send request A to python buddy : this request will produce a kafka message
            send request B to weblog, this request will consume kafka message

            request A: GET /python_buddy/produce_kafka_message
            request B: GET /java_weblog/consume_kafka_message 
        """

    def test_consume(self):
        """ Check that a message by an app instrumented by a Datadog python tracer is correctly ingested """
        # traces = interfaces.library.get_traces(request=A)
        # do whatever test we want on traces generated by request A

        # traces = interfaces.python_buddy.get_traces(request=B)
        # do whatever test we want on traces generated by request B

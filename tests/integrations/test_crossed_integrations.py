from utils import interfaces, scenarios, coverage, weblog
from utils._weblog import _Weblog


# TODO: move this class in utils
class _PythonBuddy(_Weblog):
    def __init__(self):
        from collections import defaultdict

        self.port = 9001
        self.domain = "localhost"

        self.responses = defaultdict(list)
        self.current_nodeid = "not used"
        self.replay = False


@scenarios.crossed_integrations
@coverage.basic
class Test_PythonKafka:
    """ Test kafka compatibility with datadog python tracer """

    def setup_produce(self):
        """
            send request A to weblog : this request will produce a kafka message
            send request B to python buddy, this request will consume kafka message
        """

        python_buddy = _PythonBuddy()

        self.production_response = weblog.get("/kafka/produce")
        self.consume_response = python_buddy.get("/kafka/consume")

    def test_produce(self):
        """ Check that a message produced to kafka is correctly ingested by a Datadog python tracer"""
        assert self.production_response.status_code == 200
        assert self.consume_response.status_code == 200

        # traces = interfaces.library.get_traces(request=A)
        # do whatever test we want on traces generated by request A

        # traces = interfaces.python_buddy.get_traces(request=B)
        # do whatever test we want on traces generated by request B

    def setup_consume(self):
        """
            send request A to python buddy : this request will produce a kafka message
            send request B to weblog, this request will consume kafka message

            request A: GET /python_buddy/produce_kafka_message
            request B: GET /java_weblog/consume_kafka_message 
        """

    def test_consume(self):
        """ Check that a message by an app instrumented by a Datadog python tracer is correctly ingested """
        # traces = interfaces.library.get_traces(request=A)
        # do whatever test we want on traces generated by request A

        # traces = interfaces.python_buddy.get_traces(request=B)
        # do whatever test we want on traces generated by request B

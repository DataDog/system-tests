[project]
name = 'system_tests'
version = '0.0.1'

[tool.setuptools]
packages = ["tests", "utils", "manifests"]

[tool.black]
line-length = 120
exclude = "(venv/|utils/grpc/weblog_pb2_grpc.py|utils/grpc/weblog_pb2.py|parametric/apps)"

[tool.pytest.ini_options]
addopts = "--json-report --json-report-indent=2 --color=yes --no-header --junitxml=reportJunit.xml -r Xf"
testpaths = [
    "tests",
]
# log_cli = True
# log_cli_level = DEBUG
log_level = "DEBUG"
log_format = "%(asctime)s.%(msecs)03d %(levelname)-8s %(message)s"
log_date_format = "%H:%M:%S"
log_file_format = "%(asctime)s.%(msecs)03d %(levelname)-8s %(message)s"
log_file_date_format = "%H:%M:%S"

junit_family = "xunit2"
junit_logging = "no"
junit_duration_report = "call"
junit_suite_name = "system_tests_suite"

markers =[
    "scenario: run a test only for a specified scenario",
    "features: declare the feature id"
]

python_files = "test_*.py *utils.py"

# migration tooling: list of folders where feature declarations are mandatory
# once every test class got its feature declaration, we can remove this
allow_no_feature_nodes = [
    "tests/apm_tracing_e2e/test_single_span.py",
    "tests/apm_tracing_e2e/test_smoke.py",
    "tests/otel_tracing_e2e/test_e2e.py",
    "tests/parametric/test_span_links.py",
    "tests/parametric/test_tracer.py",
    "tests/perfs/test_performances.py",  # exotic scenario, not really used
    "tests/test_the_test/",  # Not a real test
]

allow_no_jira_ticket_for_bugs = [
    "tests/integrations/test_db_integrations_sql.py::Test_Postgres.test_db_type",
    "tests/integrations/test_dbm.py::Test_Dbm.test_trace_payload_service",
    "tests/integrations/test_open_telemetry.py::_BaseOtelDbIntegrationTestClass.test_db_operation",
    "tests/integrations/test_open_telemetry.py::Test_MsSql.test_db_operation",
    "tests/integrations/test_open_telemetry.py::Test_MsSql.test_resource",
    "tests/k8s_lib_injection/test_k8s_init_image_validator.py::TestK8sInitImageValidator.test_valid_weblog_instrumented",
    "tests/k8s_lib_injection/test_k8s_init_image_validator.py::TestK8sInitImageValidatorUnsupported.test_invalid_weblog_not_instrumented",

    "tests/parametric/test_headers_tracestate_dd.py::Test_Headers_Tracestate_DD.test_headers_tracestate_dd_evicts_32_or_greater_list_members",
    "tests/parametric/test_headers_tracestate_dd.py::Test_Headers_Tracestate_DD.test_headers_tracestate_dd_keeps_32_or_fewer_list_members",
    "tests/parametric/test_otel_span_methods.py::Test_Otel_Span_Methods.test_otel_span_started_with_link_from_other_spans",
    "tests/parametric/test_partial_flushing.py::Test_Partial_Flushing.test_partial_flushing_one_span_default",
    "tests/parametric/test_span_sampling.py::Test_Span_Sampling.test_multi_rule_independent_rate_limiters_sss013",
    "tests/parametric/test_span_sampling.py::Test_Span_Sampling.test_single_rule_rate_limiter_span_sampling_sss008",
    "tests/parametric/test_trace_sampling.py::Test_Trace_Sampling_Tags_Feb2024_Revision.test_globs_different_casing",
    "tests/parametric/test_trace_sampling.py::Test_Trace_Sampling_Tags_Feb2024_Revision.test_metric_existence",
    "tests/parametric/test_trace_sampling.py::Test_Trace_Sampling_Tags_Feb2024_Revision.test_metric_matching",
    "tests/remote_config/test_remote_configuration.py::Test_RemoteConfigurationUpdateSequenceFeatures.test_tracer_update_sequence",
    "tests/stats/test_miscs.py::Test_Miscs.test_request_headers",
    "tests/test_schemas.py::Test_Agent.test_agent_schema_telemetry_main_payload",
    "tests/test_semantic_conventions.py::Test_Meta.test_meta_component_tag",
    "tests/test_semantic_conventions.py::Test_Meta.test_meta_http_url",
    "tests/test_semantic_conventions.py::Test_Meta.test_meta_language_tag",
    "tests/test_semantic_conventions.py::Test_Meta.test_meta_span_kind",
    "tests/test_telemetry.py::Test_Telemetry.test_proxy_forwarding",
    "tests/test_telemetry.py::Test_MessageBatch.test_message_batch_enabled",
    "tests/test_telemetry.py::Test_Telemetry.test_app_dependencies_loaded",
    "tests/test_telemetry.py::Test_Telemetry.test_app_started_is_first_message",
    "tests/test_telemetry.py::Test_Telemetry.test_status_ok",
    "tests/test_telemetry.py::Test_Telemetry.test_telemetry_proxy_enrichment",
    "tests/test_telemetry.py::Test_TelemetryV2.test_telemetry_v2_required_headers",
    "tests/test_the_test/",

    "tests/test_profiling.py::Test_Profile",
    "tests/parametric/test_config_consistency.py::Test_Config_TraceLogDirectory",
]

[tool.mypy]
files = ["utils/parametric", "tests/parametric"]
ignore_missing_imports = true
disable_error_code = ["no-redef"]
exclude = 'utils/parametric/_library_client\.py|^(?!utils/parametric|tests/parametric).*$'
follow_imports = "skip"

[tool.pylint]
init-hook='import sys; sys.path.append(".")'
max-line-length = 120
disable = [
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
    "fixme",
    "raise-missing-from",
    "invalid-name",
    "import-outside-toplevel",
    "logging-fstring-interpolation",
    "broad-except",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-branches,",
    "bare-except",
    "too-many-instance-attributes",
    "too-many-locals",
    "too-many-public-methods",
    "too-many-nested-blocks",
    "too-many-return-statements",
    "duplicate-code",
    "abstract-method",
    "inconsistent-return-statements", # because lot of validator function returns nothing
    "unused-argument", # pain, as there are some function that MUST have a prototype. TODO...
    "attribute-defined-outside-init",
    "no-name-in-module",  # full of bug
    "import-error",  # full of bug
]
ignore-paths = [
]
generated-members = [
    "(ok_summary|err_summary)\\.mapping",
]

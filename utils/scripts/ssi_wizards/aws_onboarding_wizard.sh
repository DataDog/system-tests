#!/bin/bash
#Generated by chatgpt
# shellcheck disable=SC1090,SC2162,SC2181,SC2207,SC2004
# Title
echo "==============================================="
echo "🚀 Welcome to System-Tests AWS/Onboarding Tests Wizard 🚀"
echo "==============================================="
echo ""

ENV_FILE=".env"

#For local development we skip the cache
export AMI_UPDATE=false
export SKIP_AMI_CACHE=true

# Function: Add blank lines for better UX
spacer() {
    echo ""
    echo "-----------------------------------------------"
    echo ""
}

# Step 1: Check Pulumi Installation
check_pulumi_installed() {
    if ! command -v pulumi &> /dev/null; then
        echo "⚠️ Pulumi is not installed."
        echo "🔗 Please install Pulumi: https://www.pulumi.com/docs/iac/get-started/aws/begin/"
        exit 1
    fi
}

# Step 2: Show Pulumi Version
get_pulumi_version() {
    echo "🔍 Pulumi version information:"
    pulumi about | head -n 4
    echo ""
}

# Step 3: Load .env file safely
load_env_file() {
    if [[ -f "$ENV_FILE" ]]; then
        echo "📂 Loading environment variables from $ENV_FILE..."
        set -a
        source "$ENV_FILE"
        set +a
    else
        echo "⚠️ No .env file found. A new one will be created if needed."
    fi
}

# Step 4: Check if a variable is already in .env
is_var_in_env_file() {
    local var_name="$1"
    grep -q "^$var_name=" "$ENV_FILE" 2>/dev/null
}

# Step 5: Check if a variable is already set in the environment or .env
is_var_set() {
    local var_name="$1"
    if [[ -n "${!var_name}" ]]; then
        return 0  # Set in the environment
    elif is_var_in_env_file "$var_name"; then
        return 0  # Found in .env
    else
        return 1  # Not found
    fi
}

# Step 6: Save variable to .env file
save_to_env_file() {
    local var_name="$1"
    local var_value="$2"

    # Ensure .env exists
    touch "$ENV_FILE"

    # Remove existing entry if present
    grep -q "^$var_name=" "$ENV_FILE" && sed -i "/^$var_name=/d" "$ENV_FILE"

    # Append new value (without quotes)
    echo "$var_name=$var_value" >> "$ENV_FILE"
    echo "✅ Saved $var_name in $ENV_FILE"
}

# Step 6.5: Ask to Load System-Tests Requirements
ask_load_requirements() {
    spacer
    echo "🔧 Do you want to load the system-tests requirements?"
    echo "This will execute: ./build.sh -i runner"
    read -p "Run this setup? (y/n): " load_choice
    if [[ "$load_choice" =~ ^[Yy]$ ]]; then
        echo "🚀 Loading system-tests requirements..."
        ./build.sh -i runner
        if [[ $? -ne 0 ]]; then
            echo "❌ Error: Failed to load system-tests requirements. Please check the logs."
            exit 1
        fi
        echo "✅ System-tests requirements loaded successfully."
    else
        echo "⚠️ Skipping system-tests requirements setup."
    fi
}

# Step 7: Prompt for missing environment variables
check_and_set_env_var() {
    local var_name="$1"
    local help_message="$2"

    if is_var_in_env_file "$var_name"; then
        echo "✅ $var_name is already stored in $ENV_FILE."
    elif is_var_set "$var_name"; then
        echo "✅ $var_name is already set in the environment."
        read -p "Do you want to save $var_name in $ENV_FILE? (y/n): " save_choice
        if [[ "$save_choice" =~ ^[Yy]$ ]]; then
            save_to_env_file "$var_name" "${!var_name}"
        fi
    else
        echo "❓ $var_name is missing."
        echo "ℹ️ $help_message"
        read -p "Enter value for $var_name: " user_value
        export "$var_name=$user_value"
        read -p "Do you want to save $var_name in $ENV_FILE? (y/n): " save_choice
        if [[ "$save_choice" =~ ^[Yy]$ ]]; then
            save_to_env_file "$var_name" "$user_value"
        fi
    fi
}

# Step 8: Check Pulumi Installation & Version
check_pulumi_installed
get_pulumi_version

read -p "Is your Pulumi version equal to or greater than 3.69.0? (y/n): " user_input
if [[ "$user_input" =~ ^[Nn]$ ]]; then
    echo "⚠️ Your Pulumi version might be outdated."
    echo "🔗 Please upgrade Pulumi: https://www.pulumi.com/docs/iac/get-started/aws/begin/"
    exit 1
fi

# Step 9: Pulumi Login
echo "🔑 Attempting to log in to Pulumi (local mode)..."
pulumi login --local
if [[ $? -ne 0 ]]; then
    echo "❌ Pulumi login failed. Please check the error and try again."
    exit 1
fi
echo "✅ Successfully logged in to Pulumi (local mode)."

#Ask to Load System-Tests Requirements
ask_load_requirements

# Step 10: Load environment variables
load_env_file

# Step 10.5. Verify AWS environment if networking variables are missing
verify_aws_environment() {
    if ! is_var_set "ONBOARDING_AWS_INFRA_SUBNET_ID" || ! is_var_set "ONBOARDING_AWS_INFRA_SECURITY_GROUPS_ID"; then
        spacer
        echo "🔍 Checking AWS environment..."

        # Run AWS environment check
        if ! aws-vault exec sso-sandbox-account-admin -- aws s3 ls &>/dev/null; then
            echo "❌ AWS environment check failed!"
            echo "🔗 Please follow the AWS SSO setup guide:"
            echo "   👉 https://datadoghq.atlassian.net/wiki/spaces/ENG/pages/2498068557/AWS+SSO+Getting+Started"
            echo "⚠️ Exiting wizard to prevent further issues."
            exit 1
        fi

        echo "✅ AWS environment verified successfully!"
    fi
}

# Call the function to verify AWS setup
verify_aws_environment

# Required environment variables
check_and_set_env_var "PULUMI_CONFIG_PASSPHRASE" "Passphrase to store secure data in Pulumi."
check_and_set_env_var "DD_API_KEY_ONBOARDING" "🔑 API Key required for system-tests.\n🏢 You can retrieve this key from the Datadog system-tests organization.\n🔗 Access the organization page here: https://system-tests.datadoghq.com/dashboard/zqg-kqn-2mc?fromUser=false&refresh_mode=sliding&from_ts=1736776640739&to_ts=1739368640739&live=true"
check_and_set_env_var "DD_APP_KEY_ONBOARDING" "🔑 Application Key required for system-tests.\n🏢 You can retrieve this key from the Datadog system-tests organization.\n🔗 Access the organization page here: https://system-tests.datadoghq.com/dashboard/zqg-kqn-2mc?fromUser=false&refresh_mode=sliding&from_ts=1736776640739&to_ts=1739368640739&live=true"
check_and_set_env_var "ONBOARDING_AWS_INFRA_SUBNET_ID" "🌐 Networking configuration for AWS.\n📖 You can find this value in the internal documentation:\n🔗 https://datadoghq.atlassian.net/wiki/spaces/APMINT/pages/3487138295/Using+virtual+machines+to+test+your+software+components+against+different+operating+systems#Run-command"
check_and_set_env_var "ONBOARDING_AWS_INFRA_SECURITY_GROUPS_ID" "🌐 Networking configuration for AWS.\n📖 You can find this value in the internal documentation:\n🔗 https://datadoghq.atlassian.net/wiki/spaces/APMINT/pages/3487138295/Using+virtual+machines+to+test+your+software+components+against+different+operating+systems#Run-command"

# Automatically set and offer to save some variables
if ! is_var_in_env_file "ONBOARDING_LOCAL_TEST"; then
    export ONBOARDING_LOCAL_TEST="true"
    save_to_env_file "ONBOARDING_LOCAL_TEST" "true"
fi

if ! is_var_in_env_file "ONBOARDING_AWS_INFRA_IAM_INSTANCE_PROFILE"; then
    export ONBOARDING_AWS_INFRA_IAM_INSTANCE_PROFILE="onboarding-system-tests"
    save_to_env_file "ONBOARDING_AWS_INFRA_IAM_INSTANCE_PROFILE" "onboarding-system-tests"
fi

# Key-pair selection
# Step: Ask to create AWS Key Pair or manually set it
create_key_pair() {
    spacer

    # Ask for key pair name
    read -p "Enter a name for your new AWS Key Pair: " key_name
    if [[ -z "$key_name" ]]; then
        echo "❌ Invalid name. Key pair creation aborted."
        return
    fi

    # Define PEM file path
    pem_path="$HOME/.ssh/${key_name}.pem"

    # Create key pair
    echo "🚀 Creating AWS Key Pair: $key_name ..."
    aws-vault exec sso-sandbox-account-admin -- aws ec2 create-key-pair --key-name "$key_name" --output text > "$pem_path"

    if [[ $? -ne 0 ]]; then
        echo "❌ Failed to create AWS Key Pair. Please check AWS permissions and try again."
        exit 1
    fi

    # Clean up PEM file
    echo "🔧 Cleaning up the PEM file..."

    # Run the Python script to clean the PEM file
    echo "🔧 Cleaning up the PEM file using Python..."
    python utils/scripts/ssi_wizards/aws_onboarding_wizard_utils.py "$pem_path"

    # Verify the file is cleaned properly
    if [[ $? -ne 0 ]]; then
        echo "❌ Error: Python script failed to clean the PEM file. Keeping the original file."
        exit 1
    fi

    #Protect with pass
    ssh-keygen -p -f $pem_path

    # Set proper permissions
    chmod 400 "$pem_path"
    echo "🔒 File permissions set to 0400."

    # Save values to .env
    save_to_env_file "ONBOARDING_AWS_INFRA_KEY_PATH" "$pem_path"
    save_to_env_file "ONBOARDING_AWS_INFRA_KEYPAIR_NAME" "$key_name"

    echo "✅ AWS Key Pair created successfully!"
    echo "   🔹 Key Name: $key_name"
    echo "   🔹 PEM File: $pem_path"
    echo "   🔹 Permissions set to 0400 (read-only for owner)"
}

# Step: AWS Key Pair Selection
ask_for_key_pair_selection() {
    spacer
    echo "🔑 AWS Key Pair Configuration"
    echo "You have three options:"
    echo "1️⃣ Use the **default AWS key-pair** (recommended if no special permissions are needed and you don't want to debug the virtual machines)."
    echo "2️⃣ Use your own custom key-pair (set manually)."
    echo "3️⃣ Generate a new key-pair automatically using this wizard."

    while true; do
        read -p "Select an option (1-3): " keypair_choice
        case "$keypair_choice" in
            1)  # Option 1: Use Default Key-Pair
                echo "✅ Using the default AWS key-pair. No variables will be set."
                return ;;  # Exit function, do not set variables

            2)  # Option 2: Use Custom Key-Pair
                echo "🔍 Using a custom key-pair. Please provide the following details:"
                check_and_set_env_var "ONBOARDING_AWS_INFRA_KEY_PATH" "Absolute path to your PEM file. Ensure correct file permissions (chmod 400)."
                check_and_set_env_var "ONBOARDING_AWS_INFRA_KEYPAIR_NAME" "Name of the key pair created in AWS Console."
                return ;;  # Exit function after setting variables

            3)  # Option 3: Generate Key-Pair Automatically
                create_key_pair
                return ;;  # Exit function after generating key-pair

            *)  # Invalid input
                echo "❌ Invalid choice. Please enter a number between 1 and 3."
                ;;
        esac
    done
}

# Step: Check if AWS Key Pair is already set
if ! is_var_set "ONBOARDING_AWS_INFRA_KEY_PATH" || ! is_var_set "ONBOARDING_AWS_INFRA_KEYPAIR_NAME"; then
    ask_for_key_pair_selection
else
    echo "✅ AWS Key Pair is already configured."
    echo "   🔹 Key Path: ${ONBOARDING_AWS_INFRA_KEY_PATH}"
    echo "   🔹 Key Pair Name: ${ONBOARDING_AWS_INFRA_KEYPAIR_NAME}"
fi


# VM Keep-Alive Option
if [[ -z "$ONBOARDING_KEEP_VMS" ]]; then
    echo "🖥️ Keep Virtual Machines Alive?"
    echo "By default, VMs shut down after tests. You can keep them running for debugging."
    echo "Refer to the guide: https://github.com/DataDog/system-tests/blob/main/docs/scenarios/onboarding.md#how-to-debug-a-virtual-machine-at-runtime"
    read -p "Do you want to keep VMs running after tests? (y/n): " keep_vms_choice

    if [[ "$keep_vms_choice" =~ ^[Yy]$ ]]; then
        export ONBOARDING_KEEP_VMS="true"
        echo "✅ ONBOARDING_KEEP_VMS is set to true (not stored in .env)"
    fi
fi


# Run the tests. Get all the data before
# Step 11: Ask for the test language
# Step 11: Ask for the test language
ask_for_test_language() {
    spacer
    if [[ -n "$TEST_LIBRARY" ]]; then
        echo "✅ TEST_LIBRARY is already set to: ${TEST_LIBRARY}"
    else
        echo "🧪 Select the language you want to test:"
        echo "1) Java"
        echo "2) Node.js"
        echo "3) Python"
        echo "4) .NET"
        echo "5) Ruby"
        echo "6) PHP"

        while true; do
            read -p "Enter the number of your choice (1-6): " choice
            case $choice in
                1) TEST_LIBRARY="java"; break;;
                2) TEST_LIBRARY="nodejs"; break;;
                3) TEST_LIBRARY="python"; break;;
                4) TEST_LIBRARY="dotnet"; break;;
                5) TEST_LIBRARY="ruby"; break;;
                6) TEST_LIBRARY="php"; break;;
                *) echo "❌ Invalid choice. Please select a number between 1 and 6.";;
            esac
        done

        export TEST_LIBRARY
        echo "✅ Selected test language: $TEST_LIBRARY"
    fi
}

# Call the function to ask for the test language
ask_for_test_language


# Step 12: Execute Python script and select a scenario
select_scenario() {
    spacer
    echo "🔄 Running Python script to compute workflow parameters..."

    # Run the Python script and capture the JSON output
    WORKFLOW_JSON=$(python utils/scripts/compute-workflow-parameters.py "$TEST_LIBRARY" -g "onboarding" --parametric-job-count 1 --ci-environment "prod" --format json)
    WORKFLOW_JSON=$(echo "$WORKFLOW_JSON" | jq '.aws_ssi_scenario_defs')


    if [[ $? -ne 0 ]]; then
        echo "❌ Error: Failed to execute the Python script."
        exit 1
    fi

    echo "✅ Successfully retrieved workflow parameters."

    # Extract top-level keys (scenarios) from the JSON
    SCENARIOS=($(echo "$WORKFLOW_JSON" | python3 -c "import sys, json; print(' '.join(json.load(sys.stdin).keys()))"))

    if [[ ${#SCENARIOS[@]} -eq 0 ]]; then
        echo "❌ No scenarios found in the JSON output."
        exit 1
    fi

    echo "📝 Available scenarios:"
    for i in "${!SCENARIOS[@]}"; do
        echo "$(($i + 1))) ${SCENARIOS[$i]}"
    done

    # Ask the user to select a scenario
    while true; do
        read -p "Enter the number of the scenario you want to test: " scenario_choice
        if [[ "$scenario_choice" =~ ^[0-9]+$ ]] && (( scenario_choice >= 1 && scenario_choice <= ${#SCENARIOS[@]} )); then
            SCENARIO="${SCENARIOS[$((scenario_choice - 1))]}"
            break
        else
            echo "❌ Invalid choice. Please select a number between 1 and ${#SCENARIOS[@]}."
        fi
    done

    echo "✅ Selected scenario: $SCENARIO"
}

# Call the function to select a scenario
select_scenario

# Step 13: Select the weblog based on the chosen scenario
select_weblog() {
    spacer
    echo "🔄 Fetching weblogs for the selected scenario: $SCENARIO..."

    # Extract available weblogs (second-level keys under the selected SCENARIO)
    WEBLOGS=($(echo "$WORKFLOW_JSON" | python3 -c "import sys, json; data=json.load(sys.stdin); print(' '.join(data.get('$SCENARIO', {}).keys()))"))

    if [[ ${#WEBLOGS[@]} -eq 0 ]]; then
        echo "❌ No weblogs found for scenario: $SCENARIO"
        exit 1
    fi

    echo "📝 Available weblogs:"
    for i in "${!WEBLOGS[@]}"; do
        echo "$(($i + 1))) ${WEBLOGS[$i]}"
    done

    # Ask the user to select a weblog
    while true; do
        read -p "Enter the number of the weblog you want to test: " weblog_choice
        if [[ "$weblog_choice" =~ ^[0-9]+$ ]] && (( weblog_choice >= 1 && weblog_choice <= ${#WEBLOGS[@]} )); then
            export WEBLOG="${WEBLOGS[$((weblog_choice - 1))]}"
            break
        else
            echo "❌ Invalid choice. Please select a number between 1 and ${#WEBLOGS[@]}."
        fi
    done

    echo "✅ Selected weblog: $WEBLOG"
}

# Call the function to select a weblog
select_weblog


# Step 14: Select the virtual machine for testing
select_virtual_machine() {
    spacer
    echo "🔄 Fetching available virtual machines for:"
    echo "   - Test Library: $TEST_LIBRARY"
    echo "   - Scenario: $SCENARIO"
    echo "   - Weblog: $WEBLOG"
    echo ""

    # Extract available virtual machines (third-level keys under TEST_LIBRARY > SCENARIO > WEBLOG)
    VIRTUAL_MACHINES=($(echo "$WORKFLOW_JSON" | python3 -c "
import sys, json
data = json.load(sys.stdin)
machines = data.get('$SCENARIO', {}).get('$WEBLOG', [])
print(' '.join(machines))
"))

    if [[ ${#VIRTUAL_MACHINES[@]} -eq 0 ]]; then
        echo "❌ No virtual machines found for:"
        echo "   - Test Library: $TEST_LIBRARY"
        echo "   - Scenario: $SCENARIO"
        echo "   - Weblog: $WEBLOG"
        exit 1
    fi

    echo "📝 Available virtual machines:"
    for i in "${!VIRTUAL_MACHINES[@]}"; do
        echo "$(($i + 1))) ${VIRTUAL_MACHINES[$i]}"
    done

    # Ask the user to select a virtual machine
    while true; do
        read -p "Enter the number of the virtual machine you want to use: " vm_choice
        if [[ "$vm_choice" =~ ^[0-9]+$ ]] && (( vm_choice >= 1 && vm_choice <= ${#VIRTUAL_MACHINES[@]} )); then
            export VIRTUAL_MACHINE="${VIRTUAL_MACHINES[$((vm_choice - 1))]}"
            break
        else
            echo "❌ Invalid choice. Please select a number between 1 and ${#VIRTUAL_MACHINES[@]}."
        fi
    done

    echo "✅ Selected virtual machine: $VIRTUAL_MACHINE"
}

# Call the function to select a virtual machine
select_virtual_machine

# Step 15: Select the environment for testing
select_test_environment() {
    spacer
    echo "🌍 Choose the environment for testing:"
    echo "1) prod - Test latest releases of injector and tracer components (default)"
    echo "2) dev - Test latest snapshots of injector and tracer components"

    # Set default value
    CI_ENVIRONMENT="prod"

    # Ask for user choice
    read -p "Enter your choice (1 for prod, 2 for dev) [default: prod]: " env_choice

    case "$env_choice" in
        1|"") CI_ENVIRONMENT="prod";;
        2) CI_ENVIRONMENT="dev";;
        *) echo "❌ Invalid choice. Defaulting to 'prod'."; CI_ENVIRONMENT="prod";;
    esac

    export CI_ENVIRONMENT
    echo "✅ Selected environment: $CI_ENVIRONMENT"
}

# Call the function to select the test environment
select_test_environment

# Step 16: Ask for optional OCI image versions
ask_for_optional_versions() {
    spacer
    echo "🛠️ Optional: Use a custom version of the tracer or injector OCI image."

    # Ask for DD_INSTALLER_LIBRARY_VERSION
    read -p "Enter a custom tracer OCI image version (pipeline-<your pipeline id>) or press Enter to skip: " input_version
    if [[ -n "$input_version" ]]; then
        export DD_INSTALLER_LIBRARY_VERSION="$input_version"
        echo "✅ Using custom tracer OCI image version: $DD_INSTALLER_LIBRARY_VERSION"
    else
        export DD_INSTALLER_LIBRARY_VERSION=""
        echo "✅ No custom tracer OCI image version set."
    fi

    # Ask for DD_INSTALLER_INJECTOR_VERSION
    read -p "Enter a custom injector OCI image version (pipeline-<your pipeline id>) or press Enter to skip: " input_version
    if [[ -n "$input_version" ]]; then
        export DD_INSTALLER_INJECTOR_VERSION="$input_version"
        echo "✅ Using custom injector OCI image version: $DD_INSTALLER_INJECTOR_VERSION"
    else
        export DD_INSTALLER_INJECTOR_VERSION=""
        echo "✅ No custom injector OCI image version set."
    fi
}

# Call the function to ask for optional versions
ask_for_optional_versions

# Step 17: Run the final test command
run_test_command() {
    echo ""
    echo "==============================================="
    echo "🚀 READY TO RUN THE TESTS! 🚀"
    echo "==============================================="
    echo ""
    echo "✨ Here’s a summary of your selections:"
    echo "   🔹 Scenario:         $SCENARIO"
    echo "   🔹 Weblog:           $WEBLOG"
    echo "   🔹 Virtual Machine:  $VIRTUAL_MACHINE"
    echo "   🔹 Environment:      $CI_ENVIRONMENT"
    echo "   🔹 Test Library:     $TEST_LIBRARY"
    echo ""

    if [[ -n "$DD_INSTALLER_LIBRARY_VERSION" ]]; then
        echo "   🔹 Custom Tracer OCI Image:   $DD_INSTALLER_LIBRARY_VERSION"
    else
        echo "   🔹 Custom Tracer OCI Image:   (Not set)"
    fi

    if [[ -n "$DD_INSTALLER_INJECTOR_VERSION" ]]; then
        echo "   🔹 Custom Injector OCI Image: $DD_INSTALLER_INJECTOR_VERSION"
    else
        echo "   🔹 Custom Injector OCI Image: (Not set)"
    fi

    echo ""
    echo "✅ Everything is set up! Here is the command that will be executed:"
    echo ""

    # Construct the command
    TEST_COMMAND="aws-vault exec sso-sandbox-account-admin -- ./run.sh $SCENARIO --vm-weblog $WEBLOG --vm-env $CI_ENVIRONMENT --vm-library $TEST_LIBRARY --vm-provider aws --vm-default-vms All --vm-only $VIRTUAL_MACHINE"

    echo "🖥️ Command:"
    echo "   $TEST_COMMAND"
    echo ""

    # Ask for user confirmation
    read -p "❓ Do you want to execute this command now? (y/n): " execute_choice

    if [[ "$execute_choice" =~ ^[Yy]$ ]]; then
        echo "🚀 Running the test command..."
        eval "$TEST_COMMAND"

        # Check if the command was successful
        if [[ $? -eq 0 ]]; then
            echo "🎉 ✅ TESTS COMPLETED SUCCESSFULLY! 🎉"

            # If ONBOARDING_KEEP_VMS is set, remind the user to destroy the stack
            if [[ -n "$ONBOARDING_KEEP_VMS" ]]; then
                echo ""
                echo "⚠️  🔥 **REMINDER: YOU MUST MANUALLY DESTROY THE PULUMI STACK!** 🔥 ⚠️"
                echo "🖥️  Run the following command to stop your EC2 instance:"
                echo ""
                echo "   🛑 aws-vault exec sso-sandbox-account-admin -- pulumi destroy"
                echo ""
                echo "📝 **Why?** Since ONBOARDING_KEEP_VMS is set, your virtual machine will stay running."
                echo "💡 **To avoid extra AWS costs, remember to manually destroy the stack when finished.**"
                echo "🚀 Have a great debugging session! 🖥️"
                echo ""
            fi
        else
            echo "❌ There was an error running the tests. Please check the logs above."
        fi
    else
        echo "🛑 Test command execution skipped."
        echo "📌 You can run it manually later by copying and pasting this command:"
        echo ""
        echo "$TEST_COMMAND"
        echo ""
    fi
}

# Call the function to run the final test command
run_test_command

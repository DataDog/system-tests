error_log /var/log/system-tests/error.log info;

load_module modules/ngx_http_datadog_module.so;
thread_pool waf_thread_pool threads=2 max_queue=1000;

events {
    worker_connections  1024;
}

http {
    datadog_trace_locations off;

    # enabled via ENV var:
    # datadog_appsec_enabled on;
    # datadog_appsec_waf_timeout 2s;

    datadog_waf_thread_pool_name waf_thread_pool;

    server {
        listen       7777;
        server_name  0.0.0.0;

        root /builds;

        # `return` directives are not traced
        # See, <https://github.com/DataDog/nginx-datadog/issues/58>
        location ~* /sample_rate/([0-9]+) {
          try_files /hello.html =404;
        }

        location /mysql {
          # can't use `return`
          try_files /non_existent =404;
		}

        location /healthcheck {
          root /builds;
          try_files /healthcheck.json =404;
        }

        location ~ ^/tag_value/([^/]+)/(\d+) {
          datadog_tag appsec.events.system_tests_appsec_event.value $1;
          proxy_pass http://127.0.0.1:7778/content?status=$2&value=Value+tagged&tag_value=$1&$args;
        }

        location =/status {
           proxy_pass http://127.0.0.1:7778/content?status=$arg_code&value=something;
        }

        location /headers {
          add_header Content-Language "en-US" always;
          try_files /headers.txt =404;
        }

        location =/ {
          try_files /hello.html =404;
        }

        location =/params {
          try_files /hello.html =404;
        }

        location /waf {
           proxy_pass http://127.0.0.1:7778/content?status=200&value=Hello,+World!;
        }

        location =/read_file {
            limit_except GET {
                deny all;
            }
            if ($arg_file = "") {
                return 400 "Bad Request: 'file' parameter is required.";
            }

            proxy_pass http://127.0.0.1:7778;
        }

        location ~ ^/sample_rate_route/\d+$ {
               rewrite ^/sample_rate_route/\d+$ /content?status=200&value=Hello+world! break;
               proxy_pass http://127.0.0.1:7778;
        }

        location /path_that_doesn't_exists {
          try_files /non_existent =404;
        }

        location ~ ^/api_security_sampling/\d+$ {
            rewrite ^/api_security_sampling/(\d+)$ /content?status=200&value=api_security_sampling break;
            proxy_pass http://127.0.0.1:7778;
        }

        # yes, this one is very similarly named...
        location ~ ^/api_security/sampling/\d+$ {
            rewrite ^/api_security/sampling/(\d+)$ /content?status=$1&value=api_security/sampling break;
            proxy_pass http://127.0.0.1:7778;
        }

        location = /requestdownstream {
            rewrite ^/requestdownstream$ /returnheaders break;
            proxy_pass http://127.0.0.1:7778;
        }

        location / {
          try_files $uri =404;
        }
    }
}

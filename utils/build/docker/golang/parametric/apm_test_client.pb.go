// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.3
// source: apm_test_client.proto

package main

type GetTraceConfigReturn struct {
	Config map[string]string `json:"config"`
}

type StartSpanArgs struct {
	Name        string                  `json:"name,omitempty"`
	Service     *string                 `json:"service,omitempty"`
	ParentId    *uint64                 `json:"parent_id,omitempty"`
	Resource    *string                 `json:"resource,omitempty"`
	Type        *string                 `json:"type,omitempty"`
	Origin      *string                 `json:"origin,omitempty"`
	HttpHeaders []*HeaderTuple `json:"http_headers,omitempty"`
	SpanTags    []TagTuple          `json:"span_tags,omitempty"`
	SpanLinks   []*SpanLink             `json:"span_links,omitempty"`
}

type TagTuple []string

func (x *TagTuple) GetKey() string {
	if x != nil {
		return (*x)[0]
	}
	return ""
}

func (x *TagTuple) GetValue() string {
	if x != nil {
		return (*x)[1]
	}
	return ""
}

func (x *StartSpanArgs) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StartSpanArgs) GetService() string {
	if x != nil && x.Service != nil {
		return *x.Service
	}
	return ""
}

func (x *StartSpanArgs) GetParentId() uint64 {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return 0
}

func (x *StartSpanArgs) GetResource() string {
	if x != nil && x.Resource != nil {
		return *x.Resource
	}
	return ""
}

func (x *StartSpanArgs) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *StartSpanArgs) GetOrigin() string {
	if x != nil && x.Origin != nil {
		return *x.Origin
	}
	return ""
}

func (x *StartSpanArgs) GetHttpHeaders() []*HeaderTuple {
	if x != nil {
		return x.HttpHeaders
	}
	return nil
}

func (x *StartSpanArgs) GetSpanTags() []TagTuple {
	if x != nil {
		return x.SpanTags
	}
	return nil
}

type DistributedHTTPHeaders [][]string

type SpanLink struct {
	// Types that are assignable to From:
	//
	//	*SpanLink_ParentId
	//	*SpanLink_HttpHeaders
	From       isSpanLink_From `protobuf_oneof:"from"`
	Attributes *Attributes     `json:"attributes,omitempty"`
}

func (x *SpanLink) GetAttributes() *Attributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type isSpanLink_From interface {
	isSpanLink_From()
}

type SpanLink_ParentId struct {
	ParentId uint64 `protobuf:"varint,1,opt,name=parent_id,json=parentId,proto3,oneof"`
}

type SpanLink_HttpHeaders struct {
	HttpHeaders *[]HeaderTuple `protobuf:"bytes,2,opt,name=http_headers,json=httpHeaders,proto3,oneof"`
}

func (*SpanLink_ParentId) isSpanLink_From() {}

func (*SpanLink_HttpHeaders) isSpanLink_From() {}

type HeaderTuple struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

func (x *HeaderTuple) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *HeaderTuple) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type StartSpanReturn struct {
	SpanId  uint64 `json:"span_id"`
	TraceId uint64 `json:"trace_id"`
}

type InjectHeadersArgs struct {
	SpanId uint64 `json:"span_id"`
}

type InjectHeadersReturn struct {
	HttpHeaders *DistributedHTTPHeaders `json:"http_headers"`
}

type FinishSpanArgs struct {
	Id uint64 `json:"span_id"`
}

type SpanSetMetaArgs struct {
	SpanId uint64 `json:"span_id"`
	Key    string `json:"key"`
	Value  string `json:"value"`
}

type SpanSetMetricArgs struct {
	SpanId uint64  `json:"span_id"`
	Key    string  `json:"key"`
	Value  float32 `json:"value"`
}
type SpanSetErrorArgs struct {
	SpanId  uint64  `json:"span_id"`
	Type    *string `json:"type"`
	Message *string `json:"message"`
	Stack   *string `json:"stack"`
}

type OtelStartSpanArgs struct {
	Name        string                  `json:"name"`
	ParentId    uint64                 `json:"parent_id"`
	SpanKind    uint64                 `json:"span_kind"`
	Service     string                 `json:"service"`
	Resource    string                 `json:"resource"`
	Type        string                 `json:"type"`
	Timestamp   int64                  `json:"timestamp"`
	SpanLinks   []SpanLink             `json:"span_links"`
	HttpHeaders []HeaderTuple `json:"http_headers"`
	Attributes  Attributes             `json:"attributes"`
}

func (x *OtelStartSpanArgs) GetAttributes() map[string]interface{}{
	return x.Attributes.KeyVals
}

type OtelStartSpanReturn struct {
	SpanId  uint64 `json:"span_id"`
	TraceId uint64 `json:"trace_id"`
}

type OtelEndSpanArgs struct {
	Id        uint64 `json:"id"`
	Timestamp *int64 `json:"timestamp,omitempty"`
}

func (x *OtelEndSpanArgs) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type OtelFlushSpansArgs struct {
	Seconds uint32 `json:"seconds"`
}

type OtelFlushSpansReturn struct {
	Success bool `json:"success"`
}

type OtelIsRecordingArgs struct {
	SpanId uint64 `json:"span_id"`
}

type OtelIsRecordingReturn struct {
	IsRecording bool `json:"is_recording"`
}

type OtelSpanContextArgs struct {
	SpanId uint64 `json:"span_id,omitempty"`
}

type OtelSpanContextReturn struct {
	SpanId     string `json:"span_id"`
	TraceId    string `json:"trace_id"`
	TraceFlags string `json:"trace_flags"`
	TraceState string `json:"trace_state"`
	Remote     bool   `json:"remote"`
}

type OtelSetStatusArgs struct {
	SpanId      uint64 `json:"span_id"`
	Code        string `json:"code"`
	Description string `json:"description"`
}

type OtelSetNameArgs struct {
	SpanId uint64 `json:"span_id"`
	Name   string `json:"name"`
}

type OtelSetAttributesArgs struct {
	SpanId     uint64      `json:"span_id"`
	Attributes *Attributes `json:"attributes"`
}

type OtelAddEventArgs struct {
	SpanId     uint64      `json:"span_id"`
	Name       string      `json:"name"`
	Timestamp  *int64      `json:"timestamp"`
	Attributes *Attributes `json:"attributes"`
}

func (x *OtelAddEventArgs) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *OtelAddEventArgs) GetAttributes() *Attributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type Attributes struct {
	KeyVals map[string]interface{} 
}

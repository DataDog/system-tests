package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"weblog/gqlgen/graph/model"
)

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id int) (*model.User, error) {
	if name, found := users[id]; found {
		return &model.User{ID: id, Name: name}, nil
	}
	return nil, nil
}

// UserByName is the resolver for the userByName field.
func (r *queryResolver) UserByName(ctx context.Context, name *string) ([]*model.User, error) {
	if name == nil {
		name = new(string)
	}

	result := make([]*model.User, 0, len(users))
	for id, val := range users {
		if val == *name {
			result = append(result, &model.User{ID: id, Name: val})
		}
	}
	return result, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }

akka.http {
  routing {
    verbose-error-messages = on
    file-get-conditional = on
    render-vanity-footer = yes
    range-coalescing-threshold = 80
    range-count-limit = 
    decode-max-bytes-per-chunk = 1m
    decode-max-size = 8m
  }
  sse {
    max-event-size = 8192
    max-line-size = 4096
    emit-empty-events = off
  }
}
include "akka-http-version"
akka.http {
  server {
    server-header = akka-http/${akka.http.version}
    preview {
      enable-http2 = off
    }
    enable-http2 = false
    idle-timeout = 60 s
    request-timeout = 20 s
    bind-timeout = 1s
    default-http-port = 80
    default-https-port = 443
    linger-timeout = 1 min
    max-connections = 1024
    pipelining-limit = 1
    remote-address-header = off
    remote-address-attribute = off
    raw-request-uri-header = off
    transparent-head-requests = off
    verbose-error-messages = on
    response-header-size-hint = 512
    backlog = 100
    default-host-header = ""
    socket-options {
      so-receive-buffer-size = undefined
      so-send-buffer-size = undefined
      so-reuse-address = undefined
      so-traffic-class = undefined
      tcp-keep-alive = undefined
      tcp-oob-inline = undefined
      tcp-no-delay = undefined
    }
    termination-deadline-exceeded-response {
      status = 503 # ServiceUnavailable
    }
    parsing {
      max-content-length = 8m
      error-handler = "akka.http.DefaultParsingErrorHandler$"
    }
    log-unencrypted-network-bytes = off
    stream-cancellation-delay = 100 millis
    http2 {
      max-concurrent-streams = 256
      request-entity-chunk-size = 65536 b
      incoming-connection-level-buffer-size = 10 MB
      incoming-stream-level-buffer-size = 512kB
      min-collect-strict-entity-size = 0
      outgoing-control-frame-buffer-size = 1024
      log-frames = false
      ping-interval = 0s
      ping-timeout = 0s
    }
    websocket {
      periodic-keep-alive-mode = ping
      periodic-keep-alive-max-idle = infinite
      log-frames = false
    }
  }
  client {
    user-agent-header = akka-http/${akka.http.version}
    connecting-timeout = 10s
    idle-timeout = 60 s
    request-header-size-hint = 512
    socket-options {
      so-receive-buffer-size = undefined
      so-send-buffer-size = undefined
      so-reuse-address = undefined
      so-traffic-class = undefined
      tcp-keep-alive = undefined
      tcp-oob-inline = undefined
      tcp-no-delay = undefined
    }
    proxy {
      https {
        host = ""
        port = 443
      }
    }
    parsing {
      max-content-length = infinite
    }
    log-unencrypted-network-bytes = off
    // FIXME: unify with server-side part (by importing or similar to parsing)
    http2 {
      max-concurrent-streams = 256
      request-entity-chunk-size = 65536 b
      incoming-connection-level-buffer-size = 10 MB
      incoming-stream-level-buffer-size = 512kB
      outgoing-control-frame-buffer-size = 1024
      log-frames = false
      ping-interval = 0s
      ping-timeout = 0s
      max-persistent-attempts = 0
      base-connection-backoff = ${akka.http.host-connection-pool.base-connection-backoff}
      max-connection-backoff = ${akka.http.host-connection-pool.max-connection-backoff}
      completion-timeout = 3s
    }
    websocket {
      periodic-keep-alive-mode = ping
      periodic-keep-alive-max-idle = infinite
      log-frames = false
    }
    stream-cancellation-delay = 100 millis
  }
  host-connection-pool {
    max-connections = 4
    min-connections = 0
    max-retries = 5
    max-open-requests = 32
    max-connection-lifetime = infinite
    pipelining-limit = 1
    base-connection-backoff = 100ms
    max-connection-backoff = 2 min
    idle-timeout = 30 s
    keep-alive-timeout = infinite
    response-entity-subscription-timeout = 1.second
    client = {
    }
    per-host-override = []
  }
  parsing {
    max-uri-length             = 2k
    max-method-length          = 16
    max-response-reason-length = 64
    max-header-name-length     = 64
    max-header-value-length    = 8k
    max-header-count           = 64
    max-chunk-ext-length       = 256
    max-chunk-size             = 1m
    max-comment-parsing-depth  = 5
    max-to-strict-bytes = 8m
    uri-parsing-mode = strict
    cookie-parsing-mode = rfc6265
    illegal-header-warnings = on
    ignore-illegal-header-for = []
    modeled-header-parsing = on
    error-logging-verbosity = full
    illegal-response-header-name-processing-mode = error
    illegal-response-header-value-processing-mode = error
    conflicting-content-type-header-processing-mode = error
    header-cache {
      default = 12
      Content-MD5 = 0
      Date = 0
      If-Match = 0
      If-Modified-Since = 0
      If-None-Match = 0
      If-Range = 0
      If-Unmodified-Since = 0
      User-Agent = 32
    }
    tls-session-info-header = off
    ssl-session-attribute = off
  }
}
include "version"
akka {
  home = ""
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.DefaultLoggingFilter"
  loggers-dispatcher = "akka.actor.default-dispatcher"
  logger-startup-timeout = 5s
  loglevel = "DEBUG"
  stdout-loglevel = "DEBUG"
  log-config-on-start = off
  log-dead-letters = 10
  log-dead-letters-during-shutdown = off
  log-dead-letters-suspend-duration = 5 minutes
  library-extensions = ${?akka.library-extensions} ["akka.serialization.SerializationExtension$"]
  extensions = []
  daemonic = off
  jvm-exit-on-fatal-error = on
  jvm-shutdown-hooks = on
  fail-mixed-versions = on
  java-flight-recorder {
    enabled = true
  }
  actor {
    provider = "local"
    guardian-supervisor-strategy = "akka.actor.DefaultSupervisorStrategy"
    creation-timeout = 20s
    serialize-messages = off
    serialize-creators = off
    no-serialization-verification-needed-class-prefix = ["akka."]
    unstarted-push-timeout = 10s
    typed {
      timeout = 5s
    }
    router.type-mapping {
      from-code = "akka.routing.NoRouter"
      round-robin-pool = "akka.routing.RoundRobinPool"
      round-robin-group = "akka.routing.RoundRobinGroup"
      random-pool = "akka.routing.RandomPool"
      random-group = "akka.routing.RandomGroup"
      balancing-pool = "akka.routing.BalancingPool"
      smallest-mailbox-pool = "akka.routing.SmallestMailboxPool"
      broadcast-pool = "akka.routing.BroadcastPool"
      broadcast-group = "akka.routing.BroadcastGroup"
      scatter-gather-pool = "akka.routing.ScatterGatherFirstCompletedPool"
      scatter-gather-group = "akka.routing.ScatterGatherFirstCompletedGroup"
      tail-chopping-pool = "akka.routing.TailChoppingPool"
      tail-chopping-group = "akka.routing.TailChoppingGroup"
      consistent-hashing-pool = "akka.routing.ConsistentHashingPool"
      consistent-hashing-group = "akka.routing.ConsistentHashingGroup"
    }
    deployment {
      default {
        dispatcher = ""
        mailbox = ""
        router = "from-code"
        nr-of-instances = 1
        within = 5 seconds
        virtual-nodes-factor = 10
        tail-chopping-router {
          interval = 10 milliseconds
        }
        routees {
          paths = []
        }
        resizer {
          enabled = off
          lower-bound = 1
          upper-bound = 10
          pressure-threshold = 1
          rampup-rate = 0.2
          backoff-threshold = 0.3
          backoff-rate = 0.1
          messages-per-resize = 10
        }
        optimal-size-exploring-resizer {
          enabled = off
          lower-bound = 1
          upper-bound = 10
          chance-of-ramping-down-when-full = 0.2
          action-interval = 5s
          downsize-after-underutilized-for = 72h
          explore-step-size = 0.1
          chance-of-exploration = 0.4
          downsize-ratio = 0.8
          optimization-range = 16
          weight-of-latest-metric = 0.5
        }
      }
      "/IO-DNS/inet-address" {
        mailbox = "unbounded"
        router = "consistent-hashing-pool"
        nr-of-instances = 4
      }
      "/IO-DNS/inet-address/*" {
        dispatcher = "akka.actor.default-blocking-io-dispatcher"
      }
      "/IO-DNS/async-dns" {
        mailbox = "unbounded"
        router = "round-robin-pool"
        nr-of-instances = 1
      }
    }
    default-dispatcher {
      type = "Dispatcher"
      executor = "default-executor"
      default-executor {
        fallback = "fork-join-executor"
      }
      affinity-pool-executor {
        parallelism-min = 4
        parallelism-factor = 0.8
        parallelism-max = 64
        task-queue-size = 512
        rejection-handler = "akka.dispatch.affinity.ThrowOnOverflowRejectionHandler"
        idle-cpu-level = 5
        queue-selector = "akka.dispatch.affinity.FairDistributionHashCache"
        fair-work-distribution {
          threshold = 128
        }
      }
      fork-join-executor {
        parallelism-min = 8
        parallelism-factor = 1.0
        parallelism-max = 64
        task-peeking-mode = "FIFO"
      }
      thread-pool-executor {
        keep-alive-time = 60s
        fixed-pool-size = off
        core-pool-size-min = 8
        core-pool-size-factor = 3.0
        core-pool-size-max = 64
        max-pool-size-min = 8
        max-pool-size-factor  = 3.0
        max-pool-size-max = 64
        task-queue-size = -1
        task-queue-type = "linked"
        allow-core-timeout = on
      }
      shutdown-timeout = 1s
      throughput = 5
      throughput-deadline-time = 0ms
      attempt-teamwork = on
      mailbox-requirement = ""
    }
    internal-dispatcher {
      type = "Dispatcher"
      executor = "fork-join-executor"
      throughput = 5
      fork-join-executor {
        parallelism-min = 4
        parallelism-factor = 1.0
        parallelism-max = 64
      }
    }
    default-blocking-io-dispatcher {
      type = "Dispatcher"
      executor = "thread-pool-executor"
      throughput = 1
      thread-pool-executor {
        fixed-pool-size = 16
      }
    }
    default-mailbox {
      mailbox-type = "akka.dispatch.UnboundedMailbox"
      mailbox-capacity = 1000
      mailbox-push-timeout-time = 10s
      stash-capacity = -1
    }
    mailbox {
      requirements {
        "akka.dispatch.UnboundedMessageQueueSemantics" =
          akka.actor.mailbox.unbounded-queue-based
        "akka.dispatch.BoundedMessageQueueSemantics" =
          akka.actor.mailbox.bounded-queue-based
        "akka.dispatch.DequeBasedMessageQueueSemantics" =
          akka.actor.mailbox.unbounded-deque-based
        "akka.dispatch.UnboundedDequeBasedMessageQueueSemantics" =
          akka.actor.mailbox.unbounded-deque-based
        "akka.dispatch.BoundedDequeBasedMessageQueueSemantics" =
          akka.actor.mailbox.bounded-deque-based
        "akka.dispatch.MultipleConsumerSemantics" =
          akka.actor.mailbox.unbounded-queue-based
        "akka.dispatch.ControlAwareMessageQueueSemantics" =
          akka.actor.mailbox.unbounded-control-aware-queue-based
        "akka.dispatch.UnboundedControlAwareMessageQueueSemantics" =
          akka.actor.mailbox.unbounded-control-aware-queue-based
        "akka.dispatch.BoundedControlAwareMessageQueueSemantics" =
          akka.actor.mailbox.bounded-control-aware-queue-based
        "akka.event.LoggerMessageQueueSemantics" =
          akka.actor.mailbox.logger-queue
      }
      unbounded-queue-based {
        mailbox-type = "akka.dispatch.UnboundedMailbox"
      }
      bounded-queue-based {
        mailbox-type = "akka.dispatch.BoundedMailbox"
      }
      unbounded-deque-based {
        mailbox-type = "akka.dispatch.UnboundedDequeBasedMailbox"
      }
      bounded-deque-based {
        mailbox-type = "akka.dispatch.BoundedDequeBasedMailbox"
      }
      unbounded-control-aware-queue-based {
        mailbox-type = "akka.dispatch.UnboundedControlAwareMailbox"
      }
      bounded-control-aware-queue-based {
        mailbox-type = "akka.dispatch.BoundedControlAwareMailbox"
      }
      logger-queue {
        mailbox-type = "akka.event.LoggerMailboxType"
      }
    }
    debug {
      receive = off
      autoreceive = off
      lifecycle = off
      fsm = off
      event-stream = off
      unhandled = off
      router-misconfiguration = off
    }
    allow-java-serialization = off
    warn-about-java-serializer-usage = on
    warn-on-no-serialization-verification = on
    serializers {
      java = "akka.serialization.JavaSerializer"
      bytes = "akka.serialization.ByteArraySerializer"
      primitive-long = "akka.serialization.LongSerializer"
      primitive-int = "akka.serialization.IntSerializer"
      primitive-string = "akka.serialization.StringSerializer"
      primitive-bytestring = "akka.serialization.ByteStringSerializer"
      primitive-boolean = "akka.serialization.BooleanSerializer"
    }
    serialization-bindings {
      "[B" = bytes
      "java.io.Serializable" = java
      "java.lang.String" = primitive-string
      "akka.util.ByteString$ByteString1C" = primitive-bytestring
      "akka.util.ByteString$ByteString1" = primitive-bytestring
      "akka.util.ByteString$ByteStrings" = primitive-bytestring
      "java.lang.Long" = primitive-long
      "scala.Long" = primitive-long
      "java.lang.Integer" = primitive-int
      "scala.Int" = primitive-int
      "java.lang.Boolean" = primitive-boolean
      "scala.Boolean" = primitive-boolean
    }
    serialization-identifiers {
      "akka.serialization.JavaSerializer" = 1
      "akka.serialization.ByteArraySerializer" = 4
      primitive-long = 18
      primitive-int = 19
      primitive-string = 20
      primitive-bytestring = 21
      primitive-boolean = 35
    }
  }
  serialization.protobuf {
    whitelist-class = [
      "com.google.protobuf.GeneratedMessage",
      "com.google.protobuf.GeneratedMessageV3",
      "scalapb.GeneratedMessageCompanion",
      "akka.protobufv3.internal.GeneratedMessageV3"
    ]
    allowed-classes = ${akka.serialization.protobuf.whitelist-class}
  }
  scheduler {
    tick-duration = 10ms
    ticks-per-wheel = 512
    implementation = akka.actor.LightArrayRevolverScheduler
    shutdown-timeout = 5s
  }
  scheduled-clock-interval = 1 s
  io {
    pinned-dispatcher {
      type = "PinnedDispatcher"
      executor = "thread-pool-executor"
      thread-pool-executor.allow-core-timeout = off
    }
    tcp {
      nr-of-selectors = 1
      max-channels = 256000
      selector-association-retries = 10
      batch-accept-limit = 10
      direct-buffer-size = 128 KiB
      direct-buffer-pool-limit = 1000
      register-timeout = 5s
      max-received-message-size = unlimited
      trace-logging = off
      selector-dispatcher = "akka.io.pinned-dispatcher"
      worker-dispatcher = "akka.actor.internal-dispatcher"
      management-dispatcher = "akka.actor.internal-dispatcher"
      file-io-dispatcher = "akka.actor.default-blocking-io-dispatcher"
      file-io-transferTo-limit = 512 KiB
      finish-connect-retries = 5
      windows-connection-abort-workaround-enabled = off
    }
    udp {
      nr-of-selectors = 1
      max-channels = 4096
      select-timeout = infinite
      selector-association-retries = 10
      receive-throughput = 3
      direct-buffer-size = 128 KiB
      direct-buffer-pool-limit = 1000
      trace-logging = off
      selector-dispatcher = "akka.io.pinned-dispatcher"
      worker-dispatcher = "akka.actor.internal-dispatcher"
      management-dispatcher = "akka.actor.internal-dispatcher"
    }
    udp-connected {
      nr-of-selectors = 1
      max-channels = 4096
      select-timeout = infinite
      selector-association-retries = 10
      receive-throughput = 3
      direct-buffer-size = 128 KiB
      direct-buffer-pool-limit = 1000
      trace-logging = off
      selector-dispatcher = "akka.io.pinned-dispatcher"
      worker-dispatcher = "akka.actor.internal-dispatcher"
      management-dispatcher = "akka.actor.internal-dispatcher"
    }
    dns {
      dispatcher = "akka.actor.internal-dispatcher"
      resolver = "inet-address"
      inet-address {
        provider-object = "akka.io.InetAddressDnsProvider"
        positive-ttl = default
        negative-ttl = default
        cache-cleanup-interval = 120s
      }
      async-dns {
        provider-object = "akka.io.dns.internal.AsyncDnsProvider"
        positive-ttl = forever
        negative-ttl = never
        nameservers = default
        resolve-timeout = 5s
        cache-cleanup-interval = 120s
        search-domains = default
        ndots = default
      }
    }
  }
  coordinated-shutdown {
    default-phase-timeout = 5 s
    terminate-actor-system = on
    exit-jvm = off
    exit-code = 0
    run-by-jvm-shutdown-hook = on
    run-by-actor-system-terminate = on
    reason-overrides {
      "akka.actor.CoordinatedShutdown$ClusterDowningReason$" {
        exit-code = -1
      }
      "akka.actor.CoordinatedShutdown$ClusterJoinUnsuccessfulReason$" {
        exit-code = -1
      }
    }
    phases {
      before-service-unbind {
      }
      service-unbind {
        depends-on = [before-service-unbind]
      }
      service-requests-done {
        depends-on = [service-unbind]
      }
      service-stop {
        depends-on = [service-requests-done]
      }
      before-cluster-shutdown {
        depends-on = [service-stop]
      }
      cluster-sharding-shutdown-region {
        timeout = 10 s
        depends-on = [before-cluster-shutdown]
      }
      cluster-leave {
        depends-on = [cluster-sharding-shutdown-region]
      }
      cluster-exiting {
        timeout = 10 s
        depends-on = [cluster-leave]
      }
      cluster-exiting-done {
        depends-on = [cluster-exiting]
      }
      cluster-shutdown {
        depends-on = [cluster-exiting-done]
      }
      before-actor-system-terminate {
        depends-on = [cluster-shutdown]
      }
      actor-system-terminate {
        timeout = 10 s
        depends-on = [before-actor-system-terminate]
      }
    }
  }
  circuit-breaker {
    default {
      max-failures = 10
      call-timeout = 10s
      reset-timeout = 15s
      max-reset-timeout = 36500d
      exponential-backoff = 1.0
      random-factor = 0.0
      exception-allowlist = []
    }
  }
}
akka.library-extensions += "akka.stream.SystemMaterializer$"
akka {
  stream {
    materializer {
      initial-input-buffer-size = 4
      max-input-buffer-size = 16
      dispatcher = "akka.actor.default-dispatcher"
      mailbox {
        mailbox-type = "akka.dispatch.SingleConsumerOnlyUnboundedMailbox"
      }
      blocking-io-dispatcher = "akka.actor.default-blocking-io-dispatcher"
      subscription-timeout {
        mode = cancel
        timeout = 5s
      }
      debug-logging = off
      stage-errors-default-log-level = error
      output-burst-limit = 1000
      auto-fusing = on
      max-fixed-buffer-size = 1000000000
      sync-processing-limit = 1000
      debug {
        fuzzing-mode = off
      }
      io.tcp {
        write-buffer-size = 16 KiB
        coalesce-writes = 10
      }
      creation-timeout = 20 seconds
      //#stream-ref
      stream-ref {
        buffer-capacity = 32
        demand-redelivery-interval = 1 second
        subscription-timeout = 30 seconds
        final-termination-signal-deadline = 2 seconds
      }
      //#stream-ref
    }
    blocking-io-dispatcher = "akka.actor.default-blocking-io-dispatcher"
    default-blocking-io-dispatcher = "akka.actor.default-blocking-io-dispatcher"
  }
  ssl-config {
    protocol = "TLSv1.2"
  }
  actor {
    serializers {
      akka-stream-ref = "akka.stream.serialization.StreamRefSerializer"
    }
    serialization-bindings {
      "akka.stream.SinkRef"                           = akka-stream-ref
      "akka.stream.SourceRef"                         = akka-stream-ref
      "akka.stream.impl.streamref.StreamRefsProtocol" = akka-stream-ref
    }
    serialization-identifiers {
      "akka.stream.serialization.StreamRefSerializer" = 30
    }
  }
}
ssl-config {
  logger = "com.typesafe.sslconfig.akka.util.AkkaLoggerBridge"
}
ssl-config {
  logger = "com.typesafe.sslconfig.util.NoopLogger"
  default = false
  protocol = "TLSv1.2"
  checkRevocation = null
  revocationLists = []
  enabledCipherSuites = []
  enabledProtocols = ["TLSv1.2", "TLSv1.1", "TLSv1"]
  hostnameVerifierClass = null
  sslParameters {
    clientAuth = "default"
    protocols = []
  }
  keyManager {
    algorithm = null
    stores = [
    ]
    prototype.stores {
      type = null
      path = null
      data = null
      password = null
    }
  }
  trustManager {
    algorithm = null
    stores = [
    ]
    prototype.stores {
      type = null
      path = null
      data = null
      password = null
    }
  }
  loose {
    allowLegacyHelloMessages = null
    allowUnsafeRenegotiation = null
    disableHostnameVerification = false
    disableSNI = false
    acceptAnyCertificate = false
  }
  debug {
    all = false
    ssl = false
    sslctx = false
    keymanager = false
    trustmanager = false
    // The following settings are deprecated and have no effect in code.
    certpath = false # DEPRECATED
    ocsp = false # DEPRECATED
    record = false # DEPRECATED
    plaintext = false # DEPRECATED
    packet = false # DEPRECATED
    handshake = false # DEPRECATED
    data = false # DEPRECATED
    verbose = false # DEPRECATED
    keygen = false # DEPRECATED
    session = false # DEPRECATED
    defaultctx = false # DEPRECATED
    sessioncache = false # DEPRECATED
    pluggability = false # DEPRECATED
  }
}

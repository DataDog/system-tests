global
    daemon
    log stdout local0 debug
    maxconn 4096

    lua-load /etc/haproxy/lua/datadog_aap_blocking_response.lua

    # The value should be equal to the bigger backend server timeout where the SPOA Agent is running on
    setenv DD_SPOA_TIMEOUT 1m
    setenv DD_SPOA_PROCESSING_TIMEOUT 200ms

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option redispatch
    retries 3
    timeout connect 5s
    timeout client 30s
    timeout server 30s

# Main frontend - listens on port 8088 like Envoy setup
frontend main
    bind *:80

    filter spoe engine datadog-aap-engine config /usr/local/etc/haproxy/spoe.cfg
    
    # Process the Request Headers
    http-request set-var(txn.timeout) str("$DD_SPOA_TIMEOUT")
    http-request send-spoe-group datadog-aap-engine dd-aap-http-request-headers-msg
    http-request set-var(sess.span_id) var(txn.dd.span_id)
    http-request set-var(sess.send_request_body) var(txn.dd.request_body)
    http-request lua.send_blocking_response if { var(txn.dd.blocked) -m bool }

    # Process the Request Body (when needed)
    http-request wait-for-body time 1s if { var(sess.send_request_body) -m bool }
    http-request send-spoe-group datadog-aap-engine dd-aap-http-request-body-msg if { var(sess.send_request_body) -m bool }
    http-request lua.send_blocking_response if { var(sess.send_request_body) -m bool } { var(txn.dd.blocked) -m bool }

    # Process the Response Headers
    http-response send-spoe-group datadog-aap-engine dd-aap-http-response-headers-msg
    http-response set-var(sess.send_response_body) var(txn.dd.request_body)
    http-request lua.send_blocking_response if { var(txn.dd.blocked) -m bool }
    
    # Process the Response Body (when needed)
    http-response wait-for-body time 1s if { var(sess.send_response_body) -m bool }
    http-response send-spoe-group datadog-aap-engine dd-aap-http-response-body-msg if { var(sess.send_response_body) -m bool }
    http-request lua.send_blocking_response if { var(sess.send_response_body) -m bool } { var(txn.dd.blocked) -m bool }
    
    default_backend webserver

# Backend webserver pool
backend webserver
    timeout server "$DD_SPOA_TIMEOUT"

    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    server web1 http-app:8080 check inter 5s fall 3 rise 2

# Backend for SPOA (Stream Processing Offload Agent)
backend spoa-backend
    mode spop
    timeout connect 5s
    timeout server 1m
    option spop-check
    balance roundrobin
    server spoa1 stream-processing-offload:3000 check

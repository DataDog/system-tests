# Optional: Load the environment variables
init-environment: !include utils/build/virtual_machine/provisions/auto-inject/auto-inject-environment.yml

# Mandatory: Scripts to extract the installed/tested components (json {component1:version, component2:version})
tested_components:
  install: !include utils/build/virtual_machine/provisions/auto-inject/auto-inject-tested_components.yml

#Optional: Extract the logs from the VM
vm_logs:
  install: !include utils/build/virtual_machine/provisions/auto-inject/auto-inject-vm_logs.yml

# Mandatory: Steps to provision VM
provision_steps:
  - init-config #Â Init the VM configuration
  - prepare-docker # Install docker
  - amazon-ecr-credential-helper # Install AWS ECR helper to download images from ECR
  - patch-docker-daemon #Patch the docker daemon to avoid networking issues/ip conflicts incident-31160
  - install-kind # Install kind

init-config:
  cache: true
  populate_env: false
  install: !include utils/build/virtual_machine/provisions/auto-inject/auto-inject_init_vm_config.yml

prepare-docker:
  cache: true
  install: !include utils/build/virtual_machine/provisions/auto-inject/docker/auto-inject_prepare_docker.yml

amazon-ecr-credential-helper:
  cache: true
  install: !include utils/build/virtual_machine/provisions/auto-inject/docker/amazon-ecr-credential-helper.yml

patch-docker-daemon:
  cache: true
  install: !include utils/build/virtual_machine/provisions/auto-inject/docker/patch-docker-daemon.yml

install-kind:
  cache: false
  install:
    - os_type: linux
      os_distro: deb
      remote-command: |
        # Detect architecture
        ARCH=$(uname -m)
        if [[ "$ARCH" == "x86_64" ]]; then
            ARCH="amd64"
        elif [[ "$ARCH" == "aarch64" ]]; then
            ARCH="arm64"
        else
            echo "Unsupported architecture: $ARCH"
            exit 1
        fi
        curl -Lo ./kind "https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-$ARCH"
        chmod +x ./kind
        sudo mv ./kind /usr/local/bin/kind
        curl -LO "https://dl.k8s.io/release/v1.25.3/bin/linux/$ARCH/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        chmod 700 get_helm.sh
        ./get_helm.sh
        sudo usermod -aG docker $USER
        newgrp docker
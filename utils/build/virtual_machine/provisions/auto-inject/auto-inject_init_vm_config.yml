 #Add initial configuration that it must do after start the machine
- os_type: linux
  os_distro: deb
  remote-command: |

    #Disable auto updates. It could raise problems if the update proccess is launched just when we are trying to install de software
    sudo sed -i 's/1/0/g' /etc/apt/apt.conf.d/20auto-upgrades
    sudo sed -i 's/1/0/g'  /etc/apt/apt.conf.d/10periodic || true

    echo "On VM boot the Apt service status::::"
    sudo ps -fea|grep apt
    echo "On VM boot the System service apt-daily.service  status"
    #These commands will fail on the microvm
    sudo systemctl list-units --all apt-daily.service || true

    sudo rm -rf /etc/cron.daily/update-notifier-common || true
    sudo rm -rf /etc/cron.weekly/update-notifier-common || true
    sudo systemctl disable --now apt-daily.service || true
    sudo systemctl disable --now apt-daily.timer || true
    sudo systemctl disable --now apt-daily-upgrade.timer || true
    sudo systemctl disable --now apt-daily-upgrade.service || true

    echo "After stop updates. Apt service status::::"
    sudo ps -fea|grep apt
    echo "After stop updates. System service apt-daily.service  status"
    sudo systemctl list-units --all apt-daily.service || true

    lsb_release=/etc/lsb-release
    if [ -e "$lsb_release" ]; then
      if grep -q 'Ubuntu 21.04' "$lsb_release"; then
      echo "Configuring ubuntu 21.04 repositories"
      sudo sed -i -r 's/ports.ubuntu.com/old-releases.ubuntu.com/g' /etc/apt/sources.list
      sudo sed -i -r 's/ubuntu-ports/ubuntu/g' /etc/apt/sources.list
      sudo sed -i -r 's/us-east-1.ec2.//g' /etc/apt/sources.list
      fi
      echo 'apt_preserve_sources_list: true' | sudo tee -a /etc/cloud/cloud.cfg
      sudo apt-get update
    fi
    if [ "$(. /etc/os-release && echo "$VERSION_CODENAME")" = "buster" ]; then
      echo "Configuring debian 10 repositories"
      sudo sed -i -r 's/cdn-aws.deb.debian.org/archive.debian.org/g' /etc/apt/sources.list
      echo 'apt_preserve_sources_list: true' | sudo tee -a /etc/cloud/cloud.cfg
      sudo apt-get update
    fi
    sudo apt-get -y update

    #Install some basic tools (microvm doesn't have them by default)
    hosts_file="/etc/hosts"
    if [ ! -s $hosts_file ]; then echo "Creating /etc/hosts file with default values..."
      # Default values for /etc/hosts file
      echo "127.0.0.1 localhost" > $hosts_file
      echo "::1 localhost" >> $hosts_file
      echo "/etc/hosts file created with default values"
    fi

    echo "After update the Apt service status::::"
    sudo ps -fea|grep apt

    #Create a datadog user if it doesn't exists
    sudo id -u datadog &>/dev/null || sudo useradd -m datadog

    #Allow DD env variables from ssh
    echo 'AcceptEnv DD_*' | sudo tee -a /etc/ssh/sshd_config
    sudo systemctl restart sshd.service || sudo systemctl restart ssh.service || true

    #Install git and clone system tests repository
    sudo apt-get -y install git wget
    git clone https://github.com/DataDog/system-tests.git

    echo "DONE"
- os_type: linux
  os_distro: rpm
  os_branch: centos_7_amd64 # CentOS override as the mirrors are not available anymore
  remote-command: |
    sudo sed -i s/mirror.centos.org/vault.centos.org/g /etc/yum.repos.d/*.repo
    sudo sed -i s/^#.*baseurl=http/baseurl=http/g /etc/yum.repos.d/*.repo
    sudo sed -i s/^mirrorlist=http/#mirrorlist=http/g /etc/yum.repos.d/*.repo

    #Allow DD env variables from ssh
    echo 'AcceptEnv DD_*' | sudo tee -a /etc/ssh/sshd_config
    sudo id -u datadog &>/dev/null || sudo useradd -m datadog
    sudo yum clean expire-cache
    #sudo yum -y update
    sudo systemctl restart sshd.service

    #Install git and clone system tests repository
    sudo yum -y install git wget
    git clone https://github.com/DataDog/system-tests.git

- os_type: linux
  os_distro: rpm
  os_branch: oracle_linux
  remote-command: |
    #Allow DD env variables from ssh
    echo 'AcceptEnv DD_*' | sudo tee -a /etc/ssh/sshd_config
    sudo id -u datadog &>/dev/null || sudo useradd -m datadog
    sudo yum clean expire-cache
    #sudo yum -y update
    sudo systemctl restart sshd.service
    #Install git and clone system tests repository
    sudo yum -y install git wget
    git clone https://github.com/DataDog/system-tests.git
    #We need to access from outside the VM
    sudo systemctl stop firewalld
    sudo systemctl stop iptables
    sudo systemctl disable firewalld
    sudo systemctl disable iptables
    if [ $? -eq 3 ]
    then
      echo "Firewall disabled"
      exit 0
    fi
- os_type: linux
  os_distro: rpm
  remote-command: |
    #Allow DD env variables from ssh
    echo 'AcceptEnv DD_*' | sudo tee -a /etc/ssh/sshd_config
    sudo id -u datadog &>/dev/null || sudo useradd -m datadog
    sudo yum clean expire-cache
    #sudo yum -y update
    sudo systemctl restart sshd.service
    #Install git and clone system tests repository
    sudo yum -y install git wget
    git clone https://github.com/DataDog/system-tests.git

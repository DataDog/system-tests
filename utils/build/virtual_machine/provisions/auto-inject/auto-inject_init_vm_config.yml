 #Add initial configuration that it must do after start the machine 
- os_type: linux
  os_distro: deb
  remote-command: |

    #Disable auto updates. It could raise problems if the update proccess is launched just when we are trying to install de software 
    sudo sed -i 's/1/0/g' /etc/apt/apt.conf.d/20auto-upgrades
    sudo sed -i 's/1/0/g'  /etc/apt/apt.conf.d/10periodic || true
 
    echo "On VM boot the Apt service status::::"
    sudo ps -fea|grep apt
    echo "On VM boot the System service apt-daily.service  status"
    #These commands will fail on the microvm
    sudo systemctl list-units --all apt-daily.service || true

    sudo rm -rf /etc/cron.daily/update-notifier-common || true
    sudo rm -rf /etc/cron.weekly/update-notifier-common || true
    sudo systemctl disable --now apt-daily.service || true
    sudo systemctl disable --now apt-daily.timer || true
    sudo systemctl disable --now apt-daily-upgrade.timer || true
    sudo systemctl disable --now apt-daily-upgrade.service || true

    echo "After stop updates. Apt service status::::"
    sudo ps -fea|grep apt
    echo "After stop updates. System service apt-daily.service  status"
    sudo systemctl list-units --all apt-daily.service || true

    #There are some old machines that need to change the repositories because there are not available anymore
    lsb_release=/etc/lsb-release
    must_update_repositories="false"

    if [ -e "$lsb_release" ]; then
      if grep -q 'Ubuntu 21' "$lsb_release"; then
          must_update_repositories="true"
      elif grep -q 'Ubuntu 23' "$lsb_release"; then
          #Why this works for arm machine but not for amd64?
          must_update_repositories="true"
      elif grep -q 'Ubuntu 24.10' "$lsb_release"; then
          echo "Detected Ubuntu 24.10 - applying repository fixes"
          must_update_repositories="true"
      fi
    fi 
    if [ "$must_update_repositories" == "true" ]; then
        echo "Configuring archive ubuntu repositories"
        
        # Fix traditional sources.list format
        sudo sed -i -r 's/ports.ubuntu.com/old-releases.ubuntu.com/g' /etc/apt/sources.list 
        sudo sed -i -r 's/ubuntu-ports/ubuntu/g' /etc/apt/sources.list
        sudo sed -i -r 's/us-east-1.ec2.//g' /etc/apt/sources.list
        
        # Also fix DEB822 format files (Ubuntu 24.10+)
        if [ -f "/etc/apt/sources.list.d/ubuntu.sources" ]; then
            echo "Fixing DEB822 format ubuntu.sources file"
            sudo sed -i 's|URIs: http://us-east-1\.ec2\.ports\.ubuntu\.com/ubuntu-ports|URIs: http://old-releases.ubuntu.com/ubuntu|g' /etc/apt/sources.list.d/ubuntu.sources
            sudo sed -i 's|URIs: http://ports\.ubuntu\.com/ubuntu-ports|URIs: http://old-releases.ubuntu.com/ubuntu|g' /etc/apt/sources.list.d/ubuntu.sources
            sudo sed -i 's|URIs: http://archive\.ubuntu\.com/ubuntu/|URIs: http://old-releases.ubuntu.com/ubuntu/|g' /etc/apt/sources.list.d/ubuntu.sources
            sudo sed -i 's|URIs: http://security\.ubuntu\.com/ubuntu/|URIs: http://old-releases.ubuntu.com/ubuntu/|g' /etc/apt/sources.list.d/ubuntu.sources
        fi
        
        # Fix any other sources.list.d files
        for file in /etc/apt/sources.list.d/*.list; do
            if [ -f "$file" ]; then
                sudo sed -i -r 's/ports.ubuntu.com/old-releases.ubuntu.com/g' "$file"
                sudo sed -i -r 's/ubuntu-ports/ubuntu/g' "$file"
                sudo sed -i -r 's/us-east-1.ec2.//g' "$file"
            fi
        done
        
        echo 'apt_preserve_sources_list: true' | sudo tee -a /etc/cloud/cloud.cfg
        sudo apt-get update
    fi

    #Debian 11 repositories are not available anymore, so we need to update the repositories
    if [ -e "/etc/debian_version" ]; then
      if grep -q '11' "/etc/debian_version"; then
        echo "Updating Debian 11 repositories"
        echo "deb http://archive.debian.org/debian bullseye-backports main contrib non-free" | sudo tee /etc/apt/sources.list.d/bullseye-backports.list >/dev/null || true
        sudo sed -i 's|cdn-aws.deb.debian.org|archive.debian.org|g' /etc/apt/sources.list || true
        sudo find /etc/apt/sources.list.d -name '*.list' -exec sudo sed -i 's|cdn-aws.deb.debian.org|archive.debian.org|g' {} + || true
      fi
    fi
    sudo apt-get -y update

    #Install some basic tools (microvm doesn't have them by default)
    hosts_file="/etc/hosts"
    if [ ! -s $hosts_file ]; then echo "Creating /etc/hosts file with default values..."
      # Default values for /etc/hosts file
      echo "127.0.0.1 localhost" > $hosts_file
      echo "::1 localhost" >> $hosts_file
      echo "/etc/hosts file created with default values"
    fi

    echo "After update the Apt service status::::"
    sudo ps -fea|grep apt

    #Create a datadog user if it doesn't exists
    sudo id -u datadog &>/dev/null || sudo useradd -m datadog

    #Allow DD env variables from ssh
    echo 'AcceptEnv DD_*' | sudo tee -a /etc/ssh/sshd_config
    sudo systemctl restart sshd.service || sudo systemctl restart ssh.service || true

    #Install git and clone system tests repository
    sudo apt-get -y install git wget
    git clone https://github.com/DataDog/system-tests.git

    echo "DONE"
- os_type: linux
  os_distro: rpm
  os_branch: centos_7_amd64 # CentOS override as the mirrors are not available anymore
  remote-command: |    
    sudo sed -i s/mirror.centos.org/vault.centos.org/g /etc/yum.repos.d/*.repo
    sudo sed -i s/^#.*baseurl=http/baseurl=http/g /etc/yum.repos.d/*.repo
    sudo sed -i s/^mirrorlist=http/#mirrorlist=http/g /etc/yum.repos.d/*.repo
  
    #Allow DD env variables from ssh
    echo 'AcceptEnv DD_*' | sudo tee -a /etc/ssh/sshd_config
    sudo id -u datadog &>/dev/null || sudo useradd -m datadog
    sudo yum clean expire-cache
    #sudo yum -y update
    sudo systemctl restart sshd.service

    #Install git and clone system tests repository
    sudo yum -y install git wget
    git clone https://github.com/DataDog/system-tests.git

- os_type: linux
  os_distro: rpm
  os_branch: centos_8_amd64 # CentOS override as the mirrors are not available anymore
  remote-command: |    
    sudo sed -i s/mirror.centos.org/vault.centos.org/g /etc/yum.repos.d/*.repo
    sudo sed -i s/^#.*baseurl=http/baseurl=http/g /etc/yum.repos.d/*.repo
    sudo sed -i s/^mirrorlist=http/#mirrorlist=http/g /etc/yum.repos.d/*.repo
  
    #Allow DD env variables from ssh
    echo 'AcceptEnv DD_*' | sudo tee -a /etc/ssh/sshd_config
    sudo id -u datadog &>/dev/null || sudo useradd -m datadog
    sudo yum clean expire-cache
    #sudo yum -y update
    sudo systemctl restart sshd.service

    #Install git and clone system tests repository
    sudo yum -y install git wget
    git clone https://github.com/DataDog/system-tests.git

- os_type: linux
  os_distro: rpm
  os_branch: oracle_linux
  remote-command: |
    #Allow DD env variables from ssh
    echo 'AcceptEnv DD_*' | sudo tee -a /etc/ssh/sshd_config
    sudo id -u datadog &>/dev/null || sudo useradd -m datadog
    sudo yum clean expire-cache
    #sudo yum -y update
    sudo systemctl restart sshd.service
    #Install git and clone system tests repository
    sudo yum -y install git wget
    git clone https://github.com/DataDog/system-tests.git
    #We need to access from outside the VM
    sudo systemctl stop firewalld
    sudo systemctl stop iptables
    sudo systemctl disable firewalld
    sudo systemctl disable iptables
    if [ $? -eq 3 ]
    then
      echo "Firewall disabled"
      exit 0
    fi
- os_type: linux
  os_branch: fedora
  os_distro: rpm
  remote-command: |
    # Disable SELinux as it isn't supported by the injector today
    sudo setenforce 0
    sudo sed -i 's/enforcing/disabled/g' /etc/selinux/config
    # Allow DD env variables from ssh
    echo 'AcceptEnv DD_*' | sudo tee -a /etc/ssh/sshd_config
    sudo id -u datadog &>/dev/null || sudo useradd -m datadog
    sudo yum clean expire-cache
    #sudo yum -y update
    sudo systemctl restart sshd.service
    #Install git and clone system tests repository
    sudo yum -y install git wget which
    git clone https://github.com/DataDog/system-tests.git
- os_type: linux
  os_distro: rpm
  remote-command: |
    #Allow DD env variables from ssh
    echo 'AcceptEnv DD_*' | sudo tee -a /etc/ssh/sshd_config
    sudo id -u datadog &>/dev/null || sudo useradd -m datadog
    sudo yum clean expire-cache
    #sudo yum -y update
    sudo systemctl restart sshd.service
    #Install git and clone system tests repository
    sudo yum -y install git wget
    git clone https://github.com/DataDog/system-tests.git

- os_type: windows
  copy_files:
    - name: copy-tracer-debug-config
      local_path: utils/build/virtual_machine/provisions/auto-inject/tracer_debug/debug_config.yaml
  remote-command: |
    $filePath = "C:\ProgramData\ssh\sshd_config"
    $acceptEnvEntry = "AcceptEnv LANG LC_* DD_*"

    # Check if AcceptEnv exists in the file
    if (Select-String -Path $filePath -Pattern "^AcceptEnv" -Quiet) {
        # If AcceptEnv exists, replace it
        (Get-Content $filePath) -replace "^AcceptEnv.*", $acceptEnvEntry | Set-Content $filePath
    } else {
        # If AcceptEnv does not exist, append it to the end of the file
        Add-Content -Path $filePath -Value "`n$acceptEnvEntry"
    }

    # Restart SSH service to apply changes
    Restart-Service sshd

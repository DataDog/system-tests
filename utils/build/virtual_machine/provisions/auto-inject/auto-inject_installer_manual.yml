# Installs the installer package
- os_type: linux
  copy_files:
    - name: copy-tracer-debug-config
      local_path: utils/build/virtual_machine/provisions/auto-inject/tracer_debug/debug_config.yaml
    - name: copy-docker-config
      local_path: utils/build/virtual_machine/provisions/auto-inject/docker/docker_config.yaml

  remote-command: |
    # Check if Docker is installed and ensure it's running
    if command -v docker >/dev/null 2>&1; then
        echo "Docker is installed, ensuring service is enabled and running..."
        sudo systemctl enable docker.service docker.socket
        
        if ! sudo systemctl is-active --quiet docker.service; then
            echo "Docker service is not running, starting it..."
            sudo systemctl start docker.service docker.socket
            
            # Wait for Docker to be fully ready
            echo "Waiting for Docker service to be ready..."
            MAX_WAIT=20
            COUNTER=0
            while [ $COUNTER -lt $MAX_WAIT ]; do
                if sudo docker info >/dev/null 2>&1; then
                    echo "Docker service is ready"
                    break
                fi
                echo "Docker not ready yet, waiting... ($((COUNTER + 1))/$MAX_WAIT)"
                sleep 1
                ((COUNTER++))
            done
            
            if [ $COUNTER -eq $MAX_WAIT ]; then
                echo "WARNING: Docker service did not become ready after $MAX_WAIT seconds"
            fi
        else
            echo "Docker service is already running"
        fi
    else
        echo "Docker is not installed, skipping Docker service setup"
    fi

    if [ "${DD_env}" == "dev" ]; then
      # To force the installer to pull from dev repositories -- agent config is set manually to datadoghq.com
      export DD_SITE="datad0g.com"
      export DD_INSTALLER_REGISTRY_URL='install.datad0g.com'
      #The latest_snapshot of python tracer version is 2.x we want to use 3.x. Get from repo.
      #more details: https://datadoghq.atlassian.net/browse/APMSP-2259
      echo "DD_LANG: ${DD_LANG}"
      if [ "${DD_LANG}" == "python" ]; then
        export DD_INSTALLER_DEFAULT_PKG_VERSION_DATADOG_APM_LIBRARY_PYTHON=3
      fi

    else 
      export DD_SITE="datadoghq.com" 
      #The latest release of python tracer version is 2.x we want to use 3.x. Get from repo tags v3* and not rc*. We get the SHA of the tag.
      #more details: https://datadoghq.atlassian.net/browse/APMSP-2259
      if [ "${DD_LANG}" == "python" ]; then
        export DD_INSTALLER_DEFAULT_PKG_VERSION_DATADOG_APM_LIBRARY_PYTHON=3
      fi
    fi

    # Environment variables for the installer
    export DD_APM_INSTRUMENTATION_ENABLED=host
    export DD_APM_INSTRUMENTATION_LIBRARIES="${DD_LANG}"

    if [ -n "${DD_INSTALLER_LIBRARY_VERSION}" ]; then
       export "DD_INSTALLER_REGISTRY_URL_APM_LIBRARY_$(echo "$DD_LANG" | tr "[:lower:]" "[:upper:]")_PACKAGE"='installtesting.datad0g.com'
       export "DD_INSTALLER_DEFAULT_PKG_VERSION_DATADOG_APM_LIBRARY_$(echo "$DD_LANG" | tr "[:lower:]" "[:upper:]")"="${DD_INSTALLER_LIBRARY_VERSION}"
    fi

    if [ "${DD_LANG}" == "js" ] && [ "${DD_env}" == "dev" ] && [ -z "${DD_INSTALLER_DEFAULT_PKG_VERSION_DATADOG_APM_LIBRARY_JS}" ]; then
        # Special case for Node.js, the staging major version is 1 above the prod major (6 here)
        export DD_INSTALLER_DEFAULT_PKG_VERSION_DATADOG_APM_LIBRARY_JS="6"
    fi

    if [ -n "${DD_INSTALLER_INJECTOR_VERSION}" ]; then
      export DD_INSTALLER_REGISTRY_URL_APM_INJECT_PACKAGE='installtesting.datad0g.com'
      export DD_INSTALLER_DEFAULT_PKG_VERSION_DATADOG_APM_INJECT="${DD_INSTALLER_INJECTOR_VERSION}"
    fi

    if [ -n "${DD_INSTALLER_AGENT_VERSION}" ]; then
      export DD_INSTALLER_REGISTRY_URL_AGENT_PACKAGE='installtesting.datad0g.com'
      export DD_INSTALLER_DEFAULT_PKG_VERSION_DATADOG_AGENT="${DD_INSTALLER_AGENT_VERSION}"
    fi

    if [ -n "${DD_INSTALLER_INSTALLER_VERSION}" ]; then
      export DD_INSTALLER_REGISTRY_URL_INSTALLER_PACKAGE='installtesting.datad0g.com'
      export DD_INSTALLER_DEFAULT_PKG_VERSION_DATADOG_INSTALLER="${DD_INSTALLER_INSTALLER_VERSION}"
    fi

    # Env variables set on the scenario definition. Write to application_monitoring.yaml
    SCENARIO_AGENT_ENV="${DD_AGENT_ENV:-''}"

    # Create the application_monitoring.yaml file with apm_configuration_default section
    sudo mkdir -p /etc/datadog-agent
    echo "apm_configuration_default:" | sudo tee /etc/datadog-agent/application_monitoring.yaml > /dev/null

    # Parse SCENARIO_AGENT_ENV (key=value pairs) and write to YAML format
    if [ -n "${SCENARIO_AGENT_ENV}" ]; then
        echo "AGENT VARIABLES CONFIGURED FROM THE SCENARIO:"
        echo "${SCENARIO_AGENT_ENV}"
        echo "${SCENARIO_AGENT_ENV}" | tr ' ' '\n' | while IFS='=' read -r key value; do
            if [ -n "${key}" ] && [ -n "${value}" ]; then
                echo "  ${key}: ${value}" | sudo tee -a /etc/datadog-agent/application_monitoring.yaml > /dev/null
                # Also export for immediate use
                export "${key}=${value}"
            fi
        done
    fi

    echo "APPLICATION MONITORING CONFIG:"
    sudo cat /etc/datadog-agent/application_monitoring.yaml || true

    # dns install.datadoghq.com or the network interfaces are no very steady, so we need to retry
    # On the old machines the curl command doesn't support the --retry-connrefused flag, we implement the retry policy in a loop
    # standard exec: DD_REPO_URL=${DD_injection_repo_url} bash -c "$(curl -L https://dd-agent.s3.amazonaws.com/scripts/install_script_agent7.sh)"
    MAX_RETRIES=5
    RETRY_DELAY=5
    COUNTER=0

    while [ $COUNTER -lt $MAX_RETRIES ]; do
        curl -L https://dd-agent.s3.amazonaws.com/scripts/install_script_agent7.sh -o install_script.sh && break
        echo "Retrying in $RETRY_DELAY seconds..."
        sleep $RETRY_DELAY
        ((COUNTER++))
    done

    if [ $COUNTER -eq $MAX_RETRIES ]; then
        echo "Failed to connect to install.datadoghq.com the script after $MAX_RETRIES attempts"
        exit 1
    fi

    DD_REPO_URL=${DD_injection_repo_url} bash -c "$(cat install_script.sh)"

    sudo -E sh -c "sudo mkdir -p /etc/datadog-agent && printf \"api_key: ${DD_API_KEY}\nsite: datadoghq.com\n\" > /etc/datadog-agent/datadog.yaml"
    sudo systemctl restart datadog-agent

    sudo cp /tmp/datadog-installer-*.log /var/log/datadog

    sudo mkdir -p /etc/datadog-agent/inject
    sudo cp docker_config.yaml /etc/datadog-agent/inject/docker_config.yaml
    sudo cp debug_config.yaml /etc/datadog-agent/inject/debug_config.yaml

    for i in 1 2 3 4 5; do  sudo datadog-installer apm instrument docker && break || sleep 1; done
    
    # Add dd-agent user to docker group for docker socket access
    sudo usermod -aG docker dd-agent || echo "Warning: Could not add dd-agent to docker group"
    
    # Restart datadog-agent so the new group membership takes effect
    sudo systemctl restart datadog-agent || echo "Warning: Could not restart datadog-agent"
- os_type: windows
  remote-command: |
    if ($env:DD_env -eq "dev") {
      $env:DD_INSTALLER_REGISTRY_URL = "install.datad0g.com";
    }

    # Environment variables for the installer
    $env:DD_APM_INSTRUMENTATION_LIBRARIES = $env:DD_LANG;
    $env:DD_INSTALLER_DEFAULT_PKG_INSTALL_DATADOG_AGENT = $true;

    if ($env:DD_INSTALLER_LIBRARY_VERSION) {
      $DD_LANG = $env:DD_LANG.ToUpper()
      Set-Item -Path "Env:DD_INSTALLER_REGISTRY_URL_APM_LIBRARY_${DD_LANG}_PACKAGE" -Value "installtesting.datad0g.com"
      Set-Item -Path "Env:DD_INSTALLER_DEFAULT_PKG_VERSION_DATADOG_APM_LIBRARY_${DD_LANG}" -Value $env:DD_INSTALLER_LIBRARY_VERSION
    }

    # if ($env:DD_INSTALLER_INJECTOR_VERSION) {
    #   $env:DD_INSTALLER_REGISTRY_URL_APM_INJECT_PACKAGE = "installtesting.datad0g.com";
    #   $env:DD_INSTALLER_DEFAULT_PKG_VERSION_DATADOG_APM_INJECT = $env:DD_INSTALLER_INJECTOR_VERSION;
    # }

    if ($env:DD_INSTALLER_AGENT_VERSION) {
      $env:DD_INSTALLER_REGISTRY_URL_AGENT_PACKAGE = "installtesting.datad0g.com";
      $env:DD_INSTALLER_DEFAULT_PKG_VERSION_DATADOG_AGENT = $env:DD_INSTALLER_AGENT_VERSION;
    }

    if ($env:DD_INSTALLER_INSTALLER_VERSION) {
      $env:DD_INSTALLER_REGISTRY_URL_INSTALLER_PACKAGE = "installtesting.datad0g.com";
      $env:DD_INSTALLER_DEFAULT_PKG_VERSION_DATADOG_INSTALLER = $env:DD_INSTALLER_INSTALLER_VERSION;
    }

    Set-ExecutionPolicy Bypass -Scope Process -Force;
    [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072;
    $env:DD_SITE = "datadoghq.com";
    $env:DD_APM_INSTRUMENTATION_ENABLED = "iis"
    (New-Object System.Net.WebClient).DownloadFile('https://install.datadoghq.com/Install-Datadog.ps1', 'C:\Windows\SystemTemp\Install-Datadog.ps1');
    C:\Windows\SystemTemp\Install-Datadog.ps1

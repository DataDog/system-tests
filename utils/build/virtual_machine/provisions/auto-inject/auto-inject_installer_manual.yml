# Installs the installer package
- os_type: linux
  copy_files:
    - name: copy-tracer-debug-config
      local_path: utils/build/virtual_machine/provisions/auto-inject/tracer_debug/debug_config.yaml
    - name: copy-docker-config
      local_path: utils/build/virtual_machine/provisions/auto-inject/docker/docker_config.yaml

  remote-command: |
    if [ "${DD_env}" == "dev" ]; then
      # To force the installer to pull from dev repositories -- agent config is set manually to datadoghq.com
      export DD_SITE="datad0g.com"
      export DD_INSTALLER_REGISTRY_URL='install.datad0g.com'
    else 
      export DD_SITE="datadoghq.com" 
    fi

    # Environment variables for the installer
    export DD_APM_INSTRUMENTATION_ENABLED=all
    export DD_APM_INSTRUMENTATION_LIBRARIES="${DD_LANG}"
    export DD_INSTALLER_DEFAULT_PKG_INSTALL_DATADOG_AGENT=true

    if [ -n "${DD_INSTALLER_LIBRARY_VERSION}" ]; then
       export "DD_INSTALLER_REGISTRY_URL_APM_LIBRARY_$(echo "$DD_LANG" | tr "[:lower:]" "[:upper:]")_PACKAGE"='installtesting.datad0g.com'
       export "DD_INSTALLER_DEFAULT_PKG_VERSION_DATADOG_APM_LIBRARY_$(echo "$DD_LANG" | tr "[:lower:]" "[:upper:]")"="${DD_INSTALLER_LIBRARY_VERSION}"
    fi

    if [ -n "${DD_INSTALLER_INJECTOR_VERSION}" ]; then
      export DD_INSTALLER_REGISTRY_URL_APM_INJECT_PACKAGE='installtesting.datad0g.com'
      export DD_INSTALLER_DEFAULT_PKG_VERSION_DATADOG_APM_INJECT="${DD_INSTALLER_INJECTOR_VERSION}"
    fi

    if [ -n "${DD_INSTALLER_AGENT_VERSION}" ]; then
      export DD_INSTALLER_REGISTRY_URL_AGENT_PACKAGE='installtesting.datad0g.com'
      export DD_INSTALLER_DEFAULT_PKG_VERSION_DATADOG_AGENT="${DD_INSTALLER_AGENT_VERSION}"
    fi

    if [ -n "${DD_INSTALLER_INSTALLER_VERSION}" ]; then
      export DD_INSTALLER_REGISTRY_URL_INSTALLER_PACKAGE='installtesting.datad0g.com'
      export DD_INSTALLER_DEFAULT_PKG_VERSION_DATADOG_INSTALLER="${DD_INSTALLER_INSTALLER_VERSION}"
    fi

    # Env variables set on the scenario definition. Write to file and load
    SCENARIO_AGENT_ENV="${DD_AGENT_ENV:-''}"
    echo "${SCENARIO_AGENT_ENV}" > scenario_agent.env
    echo "AGENT VARIABLES CONFIGURED FROM THE SCENARIO:"
    cat scenario_agent.env
    export $(cat scenario_agent.env | xargs)

    sudo -E sh -c "sudo mkdir -p /etc/datadog-agent && printf \"api_key: ${DD_API_KEY}\nsite: datadoghq.com\n\" > /etc/datadog-agent/datadog.yaml"
    
    
    # dns install.datadoghq.com or the network interfaces are no very steady, so we need to retry
    # On the old machines the curl command doesn't support the --retry-connrefused flag, we implement the retry policy in a loop
    # standard exec: DD_REPO_URL=${DD_injection_repo_url} bash -c "$(curl -L https://install.datadoghq.com/scripts/install_script_agent7.sh)"
    MAX_RETRIES=5
    RETRY_DELAY=5
    COUNTER=0

    while [ $COUNTER -lt $MAX_RETRIES ]; do
        curl -L https://install.datadoghq.com/scripts/install_script_agent7.sh -o install_script.sh && break
        echo "Retrying in $RETRY_DELAY seconds..."
        sleep $RETRY_DELAY
        ((COUNTER++))
    done

    if [ $COUNTER -eq $MAX_RETRIES ]; then
        echo "Failed to connect to install.datadoghq.com the script after $MAX_RETRIES attempts"
        exit 1
    fi

     DD_REPO_URL=${DD_injection_repo_url} bash -c "install_script.sh"


    sudo cp /tmp/datadog-installer-*.log /var/log/datadog

    sudo mkdir -p /etc/datadog-agent/inject
    sudo cp docker_config.yaml /etc/datadog-agent/inject/docker_config.yaml
    sudo cp debug_config.yaml /etc/datadog-agent/inject/debug_config.yaml

- os_type: windows
  remote-command: |
    Set-ExecutionPolicy Bypass -Scope Process -Force;
    [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072;
    $env:DD_REMOTE_UPDATES = 'true'; # Needed?
    $env:DD_SITE = "datadoghq.com";

    if ($env:DD_env -eq "dev") {
      $env:DD_INSTALLER_REGISTRY_URL = "install.datad0g.com";
    }

    # Environment variables for the installer
    # $env:DD_APM_INSTRUMENTATION_ENABLED = "all";
    $env:DD_APM_INSTRUMENTATION_LIBRARIES = $env:DD_LANG;
    $env:DD_INSTALLER_DEFAULT_PKG_INSTALL_DATADOG_AGENT = $true;

    if ($env:DD_INSTALLER_LIBRARY_VERSION) {
      $DD_LANG = $env:DD_LANG.ToUpper()
      Set-Item -Path "Env:DD_INSTALLER_REGISTRY_URL_APM_LIBRARY_${DD_LANG}_PACKAGE" -Value "installtesting.datad0g.com"
      Set-Item -Path "Env:DD_INSTALLER_DEFAULT_PKG_VERSION_DATADOG_APM_LIBRARY_${DD_LANG}" -Value $env:DD_INSTALLER_LIBRARY_VERSION
    }

    # if ($env:DD_INSTALLER_INJECTOR_VERSION) {
    #   $env:DD_INSTALLER_REGISTRY_URL_APM_INJECT_PACKAGE = "installtesting.datad0g.com";
    #   $env:DD_INSTALLER_DEFAULT_PKG_VERSION_DATADOG_APM_INJECT = $env:DD_INSTALLER_INJECTOR_VERSION;
    # }

    if ($env:DD_INSTALLER_AGENT_VERSION) {
      $env:DD_INSTALLER_REGISTRY_URL_AGENT_PACKAGE = "installtesting.datad0g.com";
      $env:DD_INSTALLER_DEFAULT_PKG_VERSION_DATADOG_AGENT = $env:DD_INSTALLER_AGENT_VERSION;
    }

    if ($env:DD_INSTALLER_INSTALLER_VERSION) {
      $env:DD_INSTALLER_REGISTRY_URL_INSTALLER_PACKAGE = "installtesting.datad0g.com";
      $env:DD_INSTALLER_DEFAULT_PKG_VERSION_DATADOG_INSTALLER = $env:DD_INSTALLER_INSTALLER_VERSION;
    }

    iex ((New-Object System.Net.WebClient).DownloadString('https://s3.amazonaws.com/dd-agent-mstesting/Install-Datadog.ps1'));

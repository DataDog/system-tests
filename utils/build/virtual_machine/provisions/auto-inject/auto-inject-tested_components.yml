#Get version of the installed components
- os_type: linux
  os_distro: rpm
  copy_files:
    - name: copy-glibc-script
      local_path: utils/build/virtual_machine/provisions/auto-inject/check_glibc.sh
  remote-command: |
      if [ -n "$(rpm -qa --queryformat '%{VERSION}-%{RELEASE}' datadog-agent)" ]; then
        export agent_version=$(rpm -qa --queryformat '%{VERSION}-%{RELEASE}' datadog-agent);
      else
        export agent_path="$(readlink -f /opt/datadog-packages/datadog-agent/stable)"
        export agent_path="${agent_path%/}"
        export agent_version="${agent_path##*/}"
        export agent_version="${agent_version%-1}"
      fi

      if [ -n "$(rpm -qa --queryformat '%{VERSION}-%{RELEASE}' datadog-apm-inject)" ]; then
        export inject_version=$(rpm -qa --queryformat '%{VERSION}-%{RELEASE}' datadog-apm-inject);
      else
        export inject_path="$(readlink -f /opt/datadog-packages/datadog-apm-inject/stable)"
        export inject_path="${inject_path%/}"
        export inject_version="${inject_path##*/}"
        export inject_version="${inject_version%-1}"
      fi

      if [ -n "$(rpm -qa --queryformat '%{VERSION}-%{RELEASE}' datadog-apm-library-$DD_LANG)" ]; then
        export tracer_version=$(rpm -qa --queryformat '%{VERSION}-%{RELEASE}' datadog-apm-library-$DD_LANG);
      else
        export tracer_path="$(readlink -f /opt/datadog-packages/datadog-apm-library-$DD_LANG/stable)"
        export tracer_path="${tracer_path%/}"
        export tracer_version="${tracer_path##*/}"
        export tracer_version="${tracer_version%-1}"
      fi

      export installer_path="$(readlink -f /opt/datadog-packages/datadog-installer/stable)"
      export installer_path="${installer_path%/}"
      export installer_version="${installer_path##*/}"
      export installer_version="${installer_version%-1}"

      #Extract glibc
      sudo chmod 755 check_glibc.sh
      . ./check_glibc.sh

      #Try to extract runtime version. Not allways possible (ie container app)
      if [ "$DD_LANG" == "js" ]; then
        export runtime_version=$(node -v || echo "v")
        runtime_version="${runtime_version:1}"
      elif [ "$DD_LANG" == "python" ]; then
        export runtime_version=$(python --version 2>&1 | awk '{print $2}' | cut -d '.' -f 1,2)
      elif [ "$DD_LANG" == "java" ]; then
        export runtime_version=$(java -version 2>&1 | awk 'NR==1{ gsub(/"/,""); print $3 }')
      else
        export runtime_version=""
      fi

      echo "{'host':'$(hostname -I)','agent':'$(echo $agent_version)','datadog-apm-inject':'$(echo $inject_version)','datadog-apm-library-$DD_LANG': '$(echo $tracer_version)','docker':'$(docker -v || true)','datadog-installer':'$(echo $installer_version)','glibc_type':'$(echo $GLIBC_TYPE)','glibc':'$(echo $GLIBC_VERSION)','runtime_version':'$(echo $runtime_version)'}"

- os_type: linux
  os_distro: deb
  copy_files:
    - name: copy-glibc-script
      local_path: utils/build/virtual_machine/provisions/auto-inject/check_glibc.sh
  remote-command: |
      if dpkg -s datadog-agent &> /dev/null; then
        export agent_version=$(dpkg -s datadog-agent | grep Version  | head -n 1);
        export agent_version=${agent_version//'Version:'/}
      else
        export agent_path="$(readlink -f /opt/datadog-packages/datadog-agent/stable)"
        export agent_path="${agent_path%/}"
        export agent_version="${agent_path##*/}"
        export agent_version="${agent_version%-1}"
      fi

      if dpkg -s datadog-apm-inject &> /dev/null; then
        export inject_version=$(dpkg -s datadog-apm-inject | grep Version);
        export inject_version=${inject_version//'Version:'/}
      else
        export inject_path="$(readlink -f /opt/datadog-packages/datadog-apm-inject/stable)"
        export inject_path="${inject_path%/}"
        export inject_version="${inject_path##*/}"
        export inject_version="${inject_version%-1}"
      fi

      if dpkg -s datadog-apm-library-$DD_LANG &> /dev/null; then
        export tracer_version=$(dpkg -s datadog-apm-library-$DD_LANG | grep Version);
        export tracer_version=${tracer_version//'Version:'/}
      else
        export tracer_path="$(readlink -f /opt/datadog-packages/datadog-apm-library-$DD_LANG/stable)"
        export tracer_path="${tracer_path%/}"
        export tracer_version="${tracer_path##*/}"
        export tracer_version="${tracer_version%-1}"
      fi

      export installer_path="$(readlink -f /opt/datadog-packages/datadog-installer/stable)"
      export installer_path="${installer_path%/}"
      export installer_version="${installer_path##*/}"
      export installer_version="${installer_version%-1}"

      #Extract glibc
      sudo chmod 755 check_glibc.sh
      . ./check_glibc.sh

      #Try to extract runtime version. Not allways possible (ie container app)
      if [ "$DD_LANG" == "js" ]; then
        export runtime_version=$(node -v || echo "v")
        runtime_version="${runtime_version:1}"
      elif [ "$DD_LANG" == "python" ]; then
        export runtime_version=$(python --version 2>&1 | awk '{print $2}' | cut -d '.' -f 1,2)
      elif [ "$DD_LANG" == "java" ]; then
        export runtime_version=$(java -version 2>&1 | awk 'NR==1{ gsub(/"/,""); print $3 }')
      else
        export runtime_version=""
      fi

      echo "{'host':'$(hostname -I)','agent':'$(echo $agent_version)','datadog-apm-inject':'$(echo $inject_version)','datadog-apm-library-$DD_LANG': '$(echo $tracer_version)','docker':'$(docker -v || true)','datadog-installer':'$(echo $installer_version)','glibc_type':'$(echo $GLIBC_TYPE)','glibc':'$(echo $GLIBC_VERSION)','runtime_version':'$(echo $runtime_version)'}"

- os_type: windows
  remote-command: |
    # Works only for .NET today
    $data = @{
        host                    = (hostname).Trim()
        agent                   = (ls 'C:\ProgramData\Datadog Installer\packages\datadog-agent' | Where-Object { $_ -notmatch "(experiment|stable)" } | Select-String '(\d+\.\d+\.\d+.*)' | ForEach-Object { $_.Matches.Groups[1].Value }).Trim()
        "datadog-apm-inject"    = "N/A (Windows IIS)"
        "datadog-apm-library-dotnet" = (ls 'C:\ProgramData\Datadog Installer\packages\datadog-apm-library-dotnet' | Where-Object { $_ -notmatch "(experiment|stable)" } | Select-String '(\d+\.\d+\.\d+.*)' | ForEach-Object { $_.Matches.Groups[1].Value }).Trim()
        docker                  = "N/A (Windows)"
        "datadog-installer"     = (& 'C:\Program Files\Datadog\Datadog Installer\datadog-installer.exe' version).Trim()
        glibc_type              = "N/A (Windows)"
        glibc                   = "N/A (Windows)"
        runtime_version         = (& 'C:\Program Files\dotnet\dotnet.exe' --info | Select-String '(.*)\[C:\\Program Files\\dotnet\\sdk\]' | ForEach-Object { $_.Matches.Groups[1].Value }).Trim()
    }

    $data | ConvertTo-Json -Depth 3

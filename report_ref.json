{
  "created": 1634831552.4534616,
  "duration": 109.5075421333313,
  "exitcode": 0,
  "root": "/app",
  "environment": {
    "Python": "3.9.7",
    "Platform": "Linux-5.10.47-linuxkit-x86_64-with-glibc2.31",
    "Packages": {
      "pytest": "5.4.3",
      "py": "1.10.0",
      "pluggy": "0.13.1"
    },
    "Plugins": {
      "json-report": "1.2.1",
      "metadata": "1.11.0"
    }
  },
  "summary": {
    "passed": 2,
    "skipped": 99,
    "total": 101,
    "collected": 101
  },
  "tests": [
    {
      "nodeid": "tests/test_data_integrity.py::Test_TraceUniqueness::test_trace_ids",
      "outcome": "passed",
      "skip_reason": null
    },
    {
      "nodeid": "tests/test_data_integrity.py::Test_TraceHeaders::test_trace_header_container_tags",
      "outcome": "skipped",
      "skip_reason": "not relevant: echo isn't instrumented"
    },
    {
      "nodeid": "tests/test_data_integrity.py::Test_TraceHeaders::test_trace_header_container_tags_cpp",
      "outcome": "skipped",
      "skip_reason": "not relevant: echo isn't instrumented"
    },
    {
      "nodeid": "tests/test_data_integrity.py::Test_TraceHeaders::test_trace_header_count_match",
      "outcome": "skipped",
      "skip_reason": "not relevant: echo isn't instrumented"
    },
    {
      "nodeid": "tests/test_data_integrity.py::Test_TraceHeaders::test_traces_header_present",
      "outcome": "skipped",
      "skip_reason": "not relevant: echo isn't instrumented"
    },
    {
      "nodeid": "tests/test_data_integrity.py::Test_TraceHeaders::test_traces_header_present_php",
      "outcome": "skipped",
      "skip_reason": "not relevant: echo isn't instrumented"
    },
    {
      "nodeid": "tests/test_library_conf.py::Test_HeaderTags::test_trace_header_tags",
      "outcome": "skipped",
      "skip_reason": "Not relevant: echo is not instrumented"
    },
    {
      "nodeid": "tests/test_library_logs.py::Test_NoExceptions::test_dotnet",
      "outcome": "skipped",
      "skip_reason": "Not relevant: only for .NET"
    },
    {
      "nodeid": "tests/test_sampling.py::Test_SamplingDecisions::test_sampling_decision",
      "outcome": "skipped",
      "skip_reason": "Not relevant: echo is not instrumented"
    },
    {
      "nodeid": "tests/test_sampling.py::Test_SamplingDecisions::test_sampling_decision_added",
      "outcome": "skipped",
      "skip_reason": "Not relevant: echo is not instrumented"
    },
    {
      "nodeid": "tests/test_sampling.py::Test_SamplingDecisions::test_sampling_determinism",
      "outcome": "skipped",
      "skip_reason": "Not relevant: echo is not instrumented"
    },
    {
      "nodeid": "tests/test_schemas.py::Test_Library::test_library_format",
      "outcome": "skipped",
      "skip_reason": "known bug"
    },
    {
      "nodeid": "tests/test_schemas.py::Test_Agent::test_agent_format",
      "outcome": "skipped",
      "skip_reason": "known bug"
    },
    {
      "nodeid": "tests/test_semantic_conventions.py::Test_Meta::test_meta_http_method",
      "outcome": "skipped",
      "skip_reason": "not relevant: echo isn't instrumented"
    },
    {
      "nodeid": "tests/test_semantic_conventions.py::Test_Meta::test_meta_http_status_code",
      "outcome": "skipped",
      "skip_reason": "not relevant: echo isn't instrumented"
    },
    {
      "nodeid": "tests/test_semantic_conventions.py::Test_Meta::test_meta_http_url",
      "outcome": "skipped",
      "skip_reason": "not relevant: echo isn't instrumented"
    },
    {
      "nodeid": "tests/test_semantic_conventions.py::Test_Meta::test_meta_span_kind",
      "outcome": "skipped",
      "skip_reason": "not relevant: echo isn't instrumented"
    },
    {
      "nodeid": "tests/test_smoke.py::Test_Backend::test_good_backend",
      "outcome": "passed",
      "skip_reason": null
    },
    {
      "nodeid": "tests/test_smoke.py::Test_Library::test_receive_request_trace",
      "outcome": "skipped",
      "skip_reason": "not relevant: echo isn't instrumented"
    },
    {
      "nodeid": "tests/appsec/test_PII.py::Test_Scrubbing::test_basic",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/test_conf.py::Test_StaticRuleSet::test_basic_hardcoded_ruleset",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/test_conf.py::Test_FleetManagement::test_basic",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/test_logs.py::Test_Standardization::test_d01",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/test_logs.py::Test_Standardization::test_d02",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/test_logs.py::Test_Standardization::test_d03",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/test_logs.py::Test_Standardization::test_d04",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/test_logs.py::Test_Standardization::test_d05",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/test_logs.py::Test_Standardization::test_d06",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/test_logs.py::Test_Standardization::test_d07",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/test_logs.py::Test_Standardization::test_d09",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/test_logs.py::Test_Standardization::test_d10",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/test_logs.py::Test_Standardization::test_i01",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/test_logs.py::Test_Standardization::test_i02",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/test_logs.py::Test_Standardization::test_i05",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/test_logs.py::Test_Standardization::test_i07",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/test_logs.py::Test_Standardization::test_i08",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/test_logs.py::Test_Standardization::test_i09",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/test_logs.py::Test_Standardization::test_i10",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/test_logs.py::Test_StandardizationBlockMode::test_i06",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/test_reports.py::Test_StatusCode::test_basic",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/test_reports.py::Test_ActorIP::test_actor_ip",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/test_reports.py::Test_ActorIP::test_http_remote_ip",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/test_reports.py::Test_ActorIP::test_http_request_headers",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/test_reports.py::Test_Info::test_service",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/test_traces.py::Test_Retention::test_events_retain_traces",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/test_traces.py::Test_AppSecMonitoring::test_events_retain_traces",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_addresses.py::Test_UrlQueryKey::test_query_key",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_addresses.py::Test_UrlQueryKey::test_query_key_encoded",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_addresses.py::Test_UrlQuery::test_query_argument",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_addresses.py::Test_UrlQuery::test_query_encoded",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_addresses.py::Test_UrlQuery::test_query_with_strict_regex",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_addresses.py::Test_UrlRaw::test_path",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_addresses.py::Test_Headers::test_specific_key",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_addresses.py::Test_Headers::test_specific_key2",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_addresses.py::Test_Headers::test_specific_key3",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_addresses.py::Test_Headers::test_specific_wrong_key",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_addresses.py::Test_Headers::test_value",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_addresses.py::Test_HeadersSpecificKeyFormat::test_header_specific_key",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_addresses.py::Test_HeadersSpecificKeyFormat::test_header_specific_key2",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_addresses.py::Test_Cookies::test_cookies",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_addresses.py::Test_Cookies::test_cookies_with_special_chars",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_addresses.py::Test_Cookies::test_cookies_with_special_chars2",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_addresses.py::Test_BodyRaw::test_raw_body",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_addresses.py::Test_BodyUrlEncoded::test_body_key",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_addresses.py::Test_BodyUrlEncoded::test_body_value",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_addresses.py::Test_BodyJson::test_json_array",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_addresses.py::Test_BodyJson::test_json_key",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_addresses.py::Test_BodyJson::test_json_value",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_addresses.py::Test_BodyXml::test_xml_attr",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_addresses.py::Test_BodyXml::test_xml_attr_value",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_addresses.py::Test_BodyXml::test_xml_content",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_addresses.py::Test_BodyXml::test_xml_node",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_addresses.py::Test_Misc::test_client_ip",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_addresses.py::Test_Misc::test_method",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_miscs.py::Test_404::test_404",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_miscs.py::Test_404::test_404_legacy",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_miscs.py::Test_MultipleHighlight::test_multiple_hightlight",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_miscs.py::Test_MultipleAttacks::test_basic",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_miscs.py::Test_MultipleAttacks::test_same_location",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_miscs.py::Test_MultipleAttacks::test_same_source",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_rules.py::Test_Scanners::test_scanners",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_rules.py::Test_HttpProtocol::test_http_protocol",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_rules.py::Test_HttpProtocol::test_http_protocol2",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_rules.py::Test_LFI::test_lfi",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_rules.py::Test_LFI::test_lfi_in_path",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_rules.py::Test_RFI::test_rfi",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_rules.py::Test_CommandInjection::test_command_injection",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_rules.py::Test_PhpCodeInjection::test_php_code_injection",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_rules.py::Test_PhpCodeInjection::test_php_code_injection_bug",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_rules.py::Test_JsInjection::test_js_injection",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_rules.py::Test_JsInjection::test_js_injection1",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_rules.py::Test_XSS::test_xss",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_rules.py::Test_XSS::test_xss1",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_rules.py::Test_XSS::test_xss2",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_rules.py::Test_SQLI::test_sqli",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_rules.py::Test_SQLI::test_sqli1",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_rules.py::Test_SQLI::test_sqli2",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_rules.py::Test_SQLI::test_sqli3",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_rules.py::Test_NoSqli::test_nosqli",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_rules.py::Test_JavaCodeInjection::test_java_code_injection",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    },
    {
      "nodeid": "tests/appsec/waf/test_rules.py::Test_SSRF::test_ssrf",
      "outcome": "skipped",
      "skip_reason": "not relevant"
    }
  ],
  "docs": {
    "tests/test_data_integrity.py::Test_TraceUniqueness::test_trace_ids": "Test uniqeness of trace_ids",
    "tests/test_data_integrity.py::Test_TraceUniqueness": "Test uniques values",
    "tests/test_data_integrity.py": "Misc checks around data integrity during components' lifetime",
    "tests/test_data_integrity.py::Test_TraceHeaders::test_trace_header_container_tags": "Verify that the Datadog-Container-ID header value is right in all traces submitted to the agent",
    "tests/test_data_integrity.py::Test_TraceHeaders": null,
    "tests/test_data_integrity.py::Test_TraceHeaders::test_trace_header_container_tags_cpp": "Verify that the Datadog-Container-ID header value is right in all traces submitted to the agent",
    "tests/test_data_integrity.py::Test_TraceHeaders::test_trace_header_count_match": "Verify that the X-Datadog-Trace-Count header value is right in all traces submitted to the agent",
    "tests/test_data_integrity.py::Test_TraceHeaders::test_traces_header_present": "Verify that headers described in\n        https://github.com/DataDog/architecture/blob/master/rfcs/apm/integrations/submitting-traces-to-agent/rfc.md\n        are present in all traces submitted to the agent",
    "tests/test_data_integrity.py::Test_TraceHeaders::test_traces_header_present_php": "Verify that headers described in\n        https://github.com/DataDog/architecture/blob/master/rfcs/apm/integrations/submitting-traces-to-agent/rfc.md\n        are present in all traces submitted to the agent",
    "tests/test_library_conf.py::Test_HeaderTags::test_trace_header_tags": "DD_TRACE_HEADER_TAGS env var support",
    "tests/test_library_conf.py::Test_HeaderTags": null,
    "tests/test_library_conf.py": null,
    "tests/test_library_logs.py::Test_NoExceptions::test_dotnet": "There is not exception in dotnet-tracer-managed log files",
    "tests/test_library_logs.py::Test_NoExceptions": null,
    "tests/test_library_logs.py": null,
    "tests/test_sampling.py::Test_SamplingDecisions::test_sampling_decision": "Verify that traces are sampled following the sample rate",
    "tests/test_sampling.py::Test_SamplingDecisions": null,
    "tests/test_sampling.py": null,
    "tests/test_sampling.py::Test_SamplingDecisions::test_sampling_decision_added": "Verify that the distributed traces without sampling decisions have a sampling decision added",
    "tests/test_sampling.py::Test_SamplingDecisions::test_sampling_determinism": "Verify that the way traces are sampled are at least deterministic on trace and span id",
    "tests/test_schemas.py::Test_Library::test_library_format": "Libraries's payload are valid regarding schemas",
    "tests/test_schemas.py::Test_Library": null,
    "tests/test_schemas.py": "Test format specifications",
    "tests/test_schemas.py::Test_Agent::test_agent_format": "Agents's payload are valid regarding schemas",
    "tests/test_schemas.py::Test_Agent": null,
    "tests/test_semantic_conventions.py::Test_Meta::test_meta_http_method": "Validates that traces from an http framework carry a http.method meta tag, with a legal HTTP method",
    "tests/test_semantic_conventions.py::Test_Meta": null,
    "tests/test_semantic_conventions.py": null,
    "tests/test_semantic_conventions.py::Test_Meta::test_meta_http_status_code": "Validates that traces from an http framework carry a http.status_code meta tag, formatted as a int",
    "tests/test_semantic_conventions.py::Test_Meta::test_meta_http_url": "Validates that traces from an http framework carry a http.url meta tag, formatted as a URL",
    "tests/test_semantic_conventions.py::Test_Meta::test_meta_span_kind": "Validates that traces from an http framework carry a span.kind meta tag, with value server or client",
    "tests/test_smoke.py::Test_Backend::test_good_backend": "Agent reads and use DD_SITE env var",
    "tests/test_smoke.py::Test_Backend": "Misc test around agent/backend communication",
    "tests/test_smoke.py": null,
    "tests/test_smoke.py::Test_Library::test_receive_request_trace": "Basic test to verify that libraries sent traces to the agent",
    "tests/test_smoke.py::Test_Library": "Misc test around library/agent communication",
    "tests/appsec/test_PII.py::Test_Scrubbing::test_basic": null,
    "tests/appsec/test_PII.py::Test_Scrubbing": null,
    "tests/appsec/test_PII.py": null,
    "tests/appsec/test_conf.py::Test_StaticRuleSet::test_basic_hardcoded_ruleset": " Library has loaded a hardcoded AppSec ruleset",
    "tests/appsec/test_conf.py::Test_StaticRuleSet": "Appsec loads rules from a static rules file",
    "tests/appsec/test_conf.py": null,
    "tests/appsec/test_conf.py::Test_FleetManagement::test_basic": null,
    "tests/appsec/test_conf.py::Test_FleetManagement": null,
    "tests/appsec/test_logs.py::Test_Standardization::test_d01": "Log D1: names and adresses AppSec listen to",
    "tests/appsec/test_logs.py::Test_Standardization": "AppSec logs should be standardized",
    "tests/appsec/test_logs.py": null,
    "tests/appsec/test_logs.py::Test_Standardization::test_d02": "Log D2: Address pushed to Instrumentation Gateway",
    "tests/appsec/test_logs.py::Test_Standardization::test_d03": "Log D3: When an address matches a rule needs",
    "tests/appsec/test_logs.py::Test_Standardization::test_d04": "Log D4: When calling the WAF, logs parameters",
    "tests/appsec/test_logs.py::Test_Standardization::test_d05": "Log D5: WAF outputs",
    "tests/appsec/test_logs.py::Test_Standardization::test_d06": "Log D6: WAF rule detected an attack with details",
    "tests/appsec/test_logs.py::Test_Standardization::test_d07": "Log D7: Exception in rule",
    "tests/appsec/test_logs.py::Test_Standardization::test_d09": "Log D9: WAF start of execution",
    "tests/appsec/test_logs.py::Test_Standardization::test_d10": "Log D10: WAF end of execution",
    "tests/appsec/test_logs.py::Test_Standardization::test_i01": "Log I1: AppSec initial configuration",
    "tests/appsec/test_logs.py::Test_Standardization::test_i02": "Log I2: AppSec rule source",
    "tests/appsec/test_logs.py::Test_Standardization::test_i05": "Log I5: WAF detected an attack",
    "tests/appsec/test_logs.py::Test_Standardization::test_i07": "Log I7: Pushing AppSec events",
    "tests/appsec/test_logs.py::Test_Standardization::test_i08": "Log I8: Sending AppSec events",
    "tests/appsec/test_logs.py::Test_Standardization::test_i09": "Log I9: Dropping events",
    "tests/appsec/test_logs.py::Test_Standardization::test_i10": "Log I10: Flushing events before shutdown",
    "tests/appsec/test_logs.py::Test_StandardizationBlockMode::test_i06": "Log I6: AppSec blocked a request",
    "tests/appsec/test_logs.py::Test_StandardizationBlockMode": "AppSec blocking logs should be standardized",
    "tests/appsec/test_reports.py::Test_StatusCode::test_basic": " Appsec reports good status code ",
    "tests/appsec/test_reports.py::Test_StatusCode": null,
    "tests/appsec/test_reports.py": null,
    "tests/appsec/test_reports.py::Test_ActorIP::test_actor_ip": " AppSec reports the correct actor ip. ",
    "tests/appsec/test_reports.py::Test_ActorIP": null,
    "tests/appsec/test_reports.py::Test_ActorIP::test_http_remote_ip": " AppSec reports the HTTP request peer IP. ",
    "tests/appsec/test_reports.py::Test_ActorIP::test_http_request_headers": " AppSec reports the HTTP headers used for actor IP detection.",
    "tests/appsec/test_reports.py::Test_Info::test_service": " Appsec reports the service information ",
    "tests/appsec/test_reports.py::Test_Info": null,
    "tests/appsec/test_traces.py::Test_Retention::test_events_retain_traces": "On traces with appsec event, meta.appsec-event and sampling prio are set",
    "tests/appsec/test_traces.py::Test_Retention": null,
    "tests/appsec/test_traces.py": null,
    "tests/appsec/test_traces.py::Test_AppSecMonitoring::test_events_retain_traces": " AppSec store in APM traces some data when enabled. ",
    "tests/appsec/test_traces.py::Test_AppSecMonitoring": null,
    "tests/appsec/waf/test_addresses.py::Test_UrlQueryKey::test_query_key": " AppSec catches attacks in URL query key",
    "tests/appsec/waf/test_addresses.py::Test_UrlQueryKey": "Test that WAF access attacks sent threw query key",
    "tests/appsec/waf/test_addresses.py": null,
    "tests/appsec/waf/test_addresses.py::Test_UrlQueryKey::test_query_key_encoded": " AppSec catches attacks in URL query key",
    "tests/appsec/waf/test_addresses.py::Test_UrlQuery::test_query_argument": " AppSec catches attacks in URL query value",
    "tests/appsec/waf/test_addresses.py::Test_UrlQuery": "Test that WAF access attacks sent threw query",
    "tests/appsec/waf/test_addresses.py::Test_UrlQuery::test_query_encoded": " AppSec catches attacks in URL query value, even encoded",
    "tests/appsec/waf/test_addresses.py::Test_UrlQuery::test_query_with_strict_regex": " AppSec catches attacks in URL query value, even with regex containing",
    "tests/appsec/waf/test_addresses.py::Test_UrlRaw::test_path": " AppSec catches attacks in URL path",
    "tests/appsec/waf/test_addresses.py::Test_UrlRaw": "Test that WAF access attacks sent threw URL",
    "tests/appsec/waf/test_addresses.py::Test_Headers::test_specific_key": " Appsec WAF detects attacks on specific header x-file-name or referer ",
    "tests/appsec/waf/test_addresses.py::Test_Headers": "Appsec WAF access attacks sent threw headers",
    "tests/appsec/waf/test_addresses.py::Test_Headers::test_specific_key2": " When a specific header key is specified, other key are ignored ",
    "tests/appsec/waf/test_addresses.py::Test_Headers::test_specific_key3": " When a specific header key is specified, other key are ignored ",
    "tests/appsec/waf/test_addresses.py::Test_Headers::test_specific_wrong_key": " When a specific header key is specified, other key are ignored ",
    "tests/appsec/waf/test_addresses.py::Test_Headers::test_value": " Appsec WAF detects attacks in header value ",
    "tests/appsec/waf/test_addresses.py::Test_HeadersSpecificKeyFormat::test_header_specific_key": " Appsec WAF detects attacks on specific header x-file-name ",
    "tests/appsec/waf/test_addresses.py::Test_HeadersSpecificKeyFormat": " The reporting format of obj:k addresses should be obj:x",
    "tests/appsec/waf/test_addresses.py::Test_HeadersSpecificKeyFormat::test_header_specific_key2": " Appsec WAF detects attacks on specific header x-file-name ",
    "tests/appsec/waf/test_addresses.py::Test_Cookies::test_cookies": " Appsec WAF detects attackes in cookies ",
    "tests/appsec/waf/test_addresses.py::Test_Cookies": null,
    "tests/appsec/waf/test_addresses.py::Test_Cookies::test_cookies_with_special_chars": "Other cookies patterns, to be merged once issue are corrected",
    "tests/appsec/waf/test_addresses.py::Test_Cookies::test_cookies_with_special_chars2": "Other cookies patterns, to be merged once issue are corrected",
    "tests/appsec/waf/test_addresses.py::Test_BodyRaw::test_raw_body": "AppSec detects attacks in raw body",
    "tests/appsec/waf/test_addresses.py::Test_BodyRaw": "Appsec WAF detects attackes in regular body",
    "tests/appsec/waf/test_addresses.py::Test_BodyUrlEncoded::test_body_key": "AppSec detects attacks in URL encoded body keys",
    "tests/appsec/waf/test_addresses.py::Test_BodyUrlEncoded": "Appsec WAF detects attackes in regular body",
    "tests/appsec/waf/test_addresses.py::Test_BodyUrlEncoded::test_body_value": "AppSec detects attacks in URL encoded body values",
    "tests/appsec/waf/test_addresses.py::Test_BodyJson::test_json_array": null,
    "tests/appsec/waf/test_addresses.py::Test_BodyJson": " Appsec WAF detects attackes in JSON body ",
    "tests/appsec/waf/test_addresses.py::Test_BodyJson::test_json_key": null,
    "tests/appsec/waf/test_addresses.py::Test_BodyJson::test_json_value": null,
    "tests/appsec/waf/test_addresses.py::Test_BodyXml::test_xml_attr": null,
    "tests/appsec/waf/test_addresses.py::Test_BodyXml": " Appsec WAF detects attackes in XML body ",
    "tests/appsec/waf/test_addresses.py::Test_BodyXml::test_xml_attr_value": null,
    "tests/appsec/waf/test_addresses.py::Test_BodyXml::test_xml_content": null,
    "tests/appsec/waf/test_addresses.py::Test_BodyXml::test_xml_node": null,
    "tests/appsec/waf/test_addresses.py::Test_Misc::test_client_ip": " Appsec WAF supports server.request.client_ip ",
    "tests/appsec/waf/test_addresses.py::Test_Misc": null,
    "tests/appsec/waf/test_addresses.py::Test_Misc::test_method": " Appsec WAF supports server.request.method ",
    "tests/appsec/waf/test_miscs.py::Test_404::test_404": " AppSec WAF catches attacks, even on 404",
    "tests/appsec/waf/test_miscs.py::Test_404": " Appsec WAF misc tests ",
    "tests/appsec/waf/test_miscs.py": null,
    "tests/appsec/waf/test_miscs.py::Test_404::test_404_legacy": " AppSec WAF catches attacks, even on 404",
    "tests/appsec/waf/test_miscs.py::Test_MultipleHighlight::test_multiple_hightlight": "Rule with multiple condition are reported on all conditions",
    "tests/appsec/waf/test_miscs.py::Test_MultipleHighlight": " Appsec WAF misc tests ",
    "tests/appsec/waf/test_miscs.py::Test_MultipleAttacks::test_basic": "Basic test with more than one attack",
    "tests/appsec/waf/test_miscs.py::Test_MultipleAttacks": "If several attacks are sent threw one requests, all of them are reported",
    "tests/appsec/waf/test_miscs.py::Test_MultipleAttacks::test_same_location": "Test with more than one attack in a unique property",
    "tests/appsec/waf/test_miscs.py::Test_MultipleAttacks::test_same_source": "Test with more than one attack in headers",
    "tests/appsec/waf/test_rules.py::Test_Scanners::test_scanners": " AppSec catches attacks from scanners",
    "tests/appsec/waf/test_rules.py::Test_Scanners": " Appsec WAF tests on scanners rules ",
    "tests/appsec/waf/test_rules.py": "Exhaustive tests on WAF default rule set",
    "tests/appsec/waf/test_rules.py::Test_HttpProtocol::test_http_protocol": " AppSec catches attacks by violation of HTTP protocol",
    "tests/appsec/waf/test_rules.py::Test_HttpProtocol": " Appsec WAF tests on HTTP protocol rules ",
    "tests/appsec/waf/test_rules.py::Test_HttpProtocol::test_http_protocol2": " AppSec catches attacks by violation of HTTP protocol",
    "tests/appsec/waf/test_rules.py::Test_LFI::test_lfi": " AppSec catches LFI attacks",
    "tests/appsec/waf/test_rules.py::Test_LFI": " Appsec WAF tests on LFI rules ",
    "tests/appsec/waf/test_rules.py::Test_LFI::test_lfi_in_path": " AppSec catches LFI attacks in URL path like /..",
    "tests/appsec/waf/test_rules.py::Test_RFI::test_rfi": " Appsec WAF detects remote file injection attacks ",
    "tests/appsec/waf/test_rules.py::Test_RFI": " Appsec WAF tests on RFI rules ",
    "tests/appsec/waf/test_rules.py::Test_CommandInjection::test_command_injection": " Appsec WAF detects command injection attacks ",
    "tests/appsec/waf/test_rules.py::Test_CommandInjection": " Appsec WAF tests on Command injection rules ",
    "tests/appsec/waf/test_rules.py::Test_PhpCodeInjection::test_php_code_injection": " Appsec WAF detects unrestricted file upload attacks ",
    "tests/appsec/waf/test_rules.py::Test_PhpCodeInjection": " Appsec WAF tests on PHP injection rules ",
    "tests/appsec/waf/test_rules.py::Test_PhpCodeInjection::test_php_code_injection_bug": " Appsec WAF detects other php injection rules ",
    "tests/appsec/waf/test_rules.py::Test_JsInjection::test_js_injection": "AppSec catches JS code injection",
    "tests/appsec/waf/test_rules.py::Test_JsInjection": " Appsec WAF tests on Js Injection rules ",
    "tests/appsec/waf/test_rules.py::Test_JsInjection::test_js_injection1": "AppSec catches JS code injection",
    "tests/appsec/waf/test_rules.py::Test_XSS::test_xss": "AppSec catches XSS attacks",
    "tests/appsec/waf/test_rules.py::Test_XSS": " Appsec WAF tests on XSS rules ",
    "tests/appsec/waf/test_rules.py::Test_XSS::test_xss1": "AppSec catches XSS attacks",
    "tests/appsec/waf/test_rules.py::Test_XSS::test_xss2": "Other XSS patterns, to be merged once issue are corrected",
    "tests/appsec/waf/test_rules.py::Test_SQLI::test_sqli": "AppSec catches SQLI attacks",
    "tests/appsec/waf/test_rules.py::Test_SQLI": " Appsec WAF tests on SQLI rules ",
    "tests/appsec/waf/test_rules.py::Test_SQLI::test_sqli1": "AppSec catches SQLI attacks",
    "tests/appsec/waf/test_rules.py::Test_SQLI::test_sqli2": "Other SQLI patterns, to be merged once issue are corrected",
    "tests/appsec/waf/test_rules.py::Test_SQLI::test_sqli3": "Other SQLI patterns, to be merged once issue are corrected",
    "tests/appsec/waf/test_rules.py::Test_NoSqli::test_nosqli": "AppSec catches NoSQLI attacks",
    "tests/appsec/waf/test_rules.py::Test_NoSqli": " Appsec WAF tests on NoSQLi rules ",
    "tests/appsec/waf/test_rules.py::Test_JavaCodeInjection::test_java_code_injection": "AppSec catches java code injections",
    "tests/appsec/waf/test_rules.py::Test_JavaCodeInjection": " Appsec WAF tests on Java code injection rules ",
    "tests/appsec/waf/test_rules.py::Test_SSRF::test_ssrf": "AppSec catches SSRF attacks",
    "tests/appsec/waf/test_rules.py::Test_SSRF": " Appsec WAF tests on SSRF rules "
  },
  "context": {
    "library": {
      "library": "golang",
      "version": "1.34.0"
    },
    "weblog_variant": "echo-poc",
    "dd_site": "datad0g.com",
    "sampling_rate": 0.5
  },
  "release_versions": {
    "tests/test_data_integrity.py::Test_TraceUniqueness": null,
    "tests/test_data_integrity.py::Test_TraceHeaders": null,
    "tests/test_library_conf.py::Test_HeaderTags": null,
    "tests/test_library_logs.py::Test_NoExceptions": null,
    "tests/test_sampling.py::Test_SamplingDecisions": null,
    "tests/test_schemas.py::Test_Library": null,
    "tests/test_schemas.py::Test_Agent": null,
    "tests/test_semantic_conventions.py::Test_Meta": null,
    "tests/test_smoke.py::Test_Backend": null,
    "tests/test_smoke.py::Test_Library": null,
    "tests/appsec/test_PII.py::Test_Scrubbing": "not relevant: echo is not instrumented",
    "tests/appsec/test_conf.py::Test_StaticRuleSet": "not relevant: echo is not instrumented",
    "tests/appsec/test_conf.py::Test_FleetManagement": "not relevant: echo is not instrumented",
    "tests/appsec/test_logs.py::Test_Standardization": "not relevant: echo is not instrumented",
    "tests/appsec/test_logs.py::Test_StandardizationBlockMode": "not relevant: echo is not instrumented",
    "tests/appsec/test_reports.py::Test_StatusCode": "not relevant: echo is not instrumented",
    "tests/appsec/test_reports.py::Test_ActorIP": "not relevant: echo is not instrumented",
    "tests/appsec/test_reports.py::Test_Info": "not relevant: echo is not instrumented",
    "tests/appsec/test_traces.py::Test_Retention": "not relevant: echo is not instrumented",
    "tests/appsec/test_traces.py::Test_AppSecMonitoring": "not relevant: echo is not instrumented",
    "tests/appsec/waf/test_addresses.py::Test_UrlQueryKey": "not relevant: echo is not instrumented",
    "tests/appsec/waf/test_addresses.py::Test_UrlQuery": "not relevant: echo is not instrumented",
    "tests/appsec/waf/test_addresses.py::Test_UrlRaw": "not relevant: echo is not instrumented",
    "tests/appsec/waf/test_addresses.py::Test_Headers": "not relevant: echo is not instrumented",
    "tests/appsec/waf/test_addresses.py::Test_HeadersSpecificKeyFormat": "not relevant: echo is not instrumented",
    "tests/appsec/waf/test_addresses.py::Test_Cookies": "not relevant: echo is not instrumented",
    "tests/appsec/waf/test_addresses.py::Test_BodyRaw": "not relevant: echo is not instrumented",
    "tests/appsec/waf/test_addresses.py::Test_BodyUrlEncoded": "not relevant: echo is not instrumented",
    "tests/appsec/waf/test_addresses.py::Test_BodyJson": "not relevant: echo is not instrumented",
    "tests/appsec/waf/test_addresses.py::Test_BodyXml": "not relevant: echo is not instrumented",
    "tests/appsec/waf/test_addresses.py::Test_Misc": "not relevant: echo is not instrumented",
    "tests/appsec/waf/test_miscs.py::Test_404": "not relevant: echo is not instrumented",
    "tests/appsec/waf/test_miscs.py::Test_MultipleHighlight": "not relevant: echo is not instrumented",
    "tests/appsec/waf/test_miscs.py::Test_MultipleAttacks": "not relevant: echo is not instrumented",
    "tests/appsec/waf/test_rules.py::Test_Scanners": "not relevant: echo is not instrumented",
    "tests/appsec/waf/test_rules.py::Test_HttpProtocol": "not relevant: echo is not instrumented",
    "tests/appsec/waf/test_rules.py::Test_LFI": "not relevant: echo is not instrumented",
    "tests/appsec/waf/test_rules.py::Test_RFI": "not relevant: echo is not instrumented",
    "tests/appsec/waf/test_rules.py::Test_CommandInjection": "not relevant: echo is not instrumented",
    "tests/appsec/waf/test_rules.py::Test_PhpCodeInjection": "not relevant: echo is not instrumented",
    "tests/appsec/waf/test_rules.py::Test_JsInjection": "not relevant: echo is not instrumented",
    "tests/appsec/waf/test_rules.py::Test_XSS": "not relevant: echo is not instrumented",
    "tests/appsec/waf/test_rules.py::Test_SQLI": "not relevant: echo is not instrumented",
    "tests/appsec/waf/test_rules.py::Test_NoSqli": "not relevant: echo is not instrumented",
    "tests/appsec/waf/test_rules.py::Test_JavaCodeInjection": "not relevant: echo is not instrumented",
    "tests/appsec/waf/test_rules.py::Test_SSRF": "not relevant: echo is not instrumented"
  }
}
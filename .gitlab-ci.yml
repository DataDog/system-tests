include:
  - remote: https://gitlab-templates.ddbuild.io/libdatadog/one-pipeline/ca/31a2ee823af8650d3e8fb14f82279441922f004a03d1141d16d9e2ac644083b8/single-step-instrumentation-tests.yml

stages:
  - configure
  - nodejs
  - java
  - dotnet
  - python
  - php
  - ruby
  - pipeline-status
  - system-tests-utils

variables:
    TEST: 1

compute_pipeline:
  image: registry.ddbuild.io/ci/libdatadog-build/system-tests:57161036
  tags: ["arch:amd64"]
  stage: configure
  variables:
    CI_ENVIRONMENT: "prod"
  script:
    - |
      if [ -z "$SYSTEM_TESTS_SCENARIOS" ] && [ -z "$SYSTEM_TESTS_SCENARIOS_GROUPS" ]; then
        echo "❌ Both SYSTEM_TESTS_SCENARIOS and SYSTEM_TESTS_SCENARIOS_GROUPS are not defined.Computing changes..."
        ./build.sh -i runner
        source venv/bin/activate
        ./run.sh MOCK_THE_TEST --collect-only --scenario-report
        git clone https://github.com/DataDog/system-tests.git original
        git fetch --all  # Ensure all branches are available
        git branch --track $CI_COMMIT_REF_NAME origin/$CI_COMMIT_REF_NAME || true  # Track branch if not tracked
        git checkout $CI_COMMIT_REF_NAME  # Ensure the branch is checked out
        BASE_COMMIT=$(git merge-base origin/main $CI_COMMIT_REF_NAME)  # Get the base commit
        echo "Branch was created from commit--> $BASE_COMMIT"
        git diff --name-only $BASE_COMMIT $CI_COMMIT_SHA  >> modified_files.txt # List modified files
        cat modified_files.txt
        python utils/scripts/compute_impacted_scenario.py >> impacted_scenarios.txt
        cat impacted_scenarios.txt
        source impacted_scenarios.txt
      else
          echo "✅ SYSTEM_TESTS_SCENARIOS OR SYSTEM_TESTS_SCENARIOS_GROUPS are set."
          export scenarios=$SYSTEM_TESTS_SCENARIOS
          export scenarios_groups=$SYSTEM_TESTS_SCENARIOS_GROUPS
          cd /system-tests
          git pull
          if [ -n "$SYSTEM_TESTS_REF" ]; then
            git checkout $SYSTEM_TESTS_REF
          else
            echo "⚠️  SYSTEM_TESTS_REF variable is not set, skipping git checkout"
          fi
          ./build.sh -i runner
          source venv/bin/activate
      fi
    - python utils/scripts/compute-workflow-parameters.py nodejs -s "$scenarios" -g "$scenarios_groups" --parametric-job-count 1 --ci-environment "${CI_ENVIRONMENT}" --format gitlab
    - python utils/scripts/compute-workflow-parameters.py java -s "$scenarios" -g "$scenarios_groups" --parametric-job-count 1 --ci-environment "${CI_ENVIRONMENT}" --format gitlab
    - python utils/scripts/compute-workflow-parameters.py dotnet -s "$scenarios" -g "$scenarios_groups" --parametric-job-count 1 --ci-environment "${CI_ENVIRONMENT}" --format gitlab
    - python utils/scripts/compute-workflow-parameters.py python -s "$scenarios" -g "$scenarios_groups" --parametric-job-count 1 --ci-environment "${CI_ENVIRONMENT}" --format gitlab
    - python utils/scripts/compute-workflow-parameters.py php -s "$scenarios" -g "$scenarios_groups" --parametric-job-count 1 --ci-environment "${CI_ENVIRONMENT}" --format gitlab
    - python utils/scripts/compute-workflow-parameters.py ruby -s "$scenarios" -g "$scenarios_groups" --parametric-job-count 1 --ci-environment "${CI_ENVIRONMENT}" --format gitlab
    - |
      if [ -n "$SYSTEM_TESTS_SCENARIOS" ] || [ -n "$SYSTEM_TESTS_SCENARIOS_GROUPS" ]; then
        cp *.yml "$CI_PROJECT_DIR"
      fi
  rules:
    - if: '$SCHEDULED_JOB == ""'
    - if: '$SCHEDULED_JOB == null'
  artifacts:
    paths:
      - nodejs_ssi_gitlab_pipeline.yml
      - java_ssi_gitlab_pipeline.yml
      - dotnet_ssi_gitlab_pipeline.yml
      - python_ssi_gitlab_pipeline.yml
      - php_ssi_gitlab_pipeline.yml
      - ruby_ssi_gitlab_pipeline.yml

nodejs_ssi_pipeline:
  stage: nodejs
  needs: ["compute_pipeline"]
  variables:
    PARENT_PIPELINE_SOURCE: $CI_PIPELINE_SOURCE
  trigger:
    include:
      - artifact: nodejs_ssi_gitlab_pipeline.yml
        job: compute_pipeline
    strategy: depend
  rules:
    - if: '$SCHEDULED_JOB == ""'
    - if: '$SCHEDULED_JOB == null'
  when: always

java_ssi_pipeline:
  stage: java
  needs: ["compute_pipeline", "nodejs_ssi_pipeline"]
  variables:
    PARENT_PIPELINE_SOURCE: $CI_PIPELINE_SOURCE
  trigger:
    include:
      - artifact: java_ssi_gitlab_pipeline.yml
        job: compute_pipeline
    strategy: depend
  rules:
    - if: '$SCHEDULED_JOB == ""'
    - if: '$SCHEDULED_JOB == null'
  when: always

dotnet_ssi_pipeline:
  stage: dotnet
  needs: ["compute_pipeline", "java_ssi_pipeline"]
  variables:
    PARENT_PIPELINE_SOURCE: $CI_PIPELINE_SOURCE
  trigger:
    include:
      - artifact: dotnet_ssi_gitlab_pipeline.yml
        job: compute_pipeline
    strategy: depend
  rules:
    - if: '$SCHEDULED_JOB == ""'
    - if: '$SCHEDULED_JOB == null'
  when: always

python_ssi_pipeline:
  stage: python
  needs: ["compute_pipeline", "dotnet_ssi_pipeline"]
  variables:
    PARENT_PIPELINE_SOURCE: $CI_PIPELINE_SOURCE
  trigger:
    include:
      - artifact: python_ssi_gitlab_pipeline.yml
        job: compute_pipeline
    strategy: depend
  rules:
    - if: '$SCHEDULED_JOB == ""'
    - if: '$SCHEDULED_JOB == null'
  when: always

php_ssi_pipeline:
  stage: php
  needs: ["compute_pipeline", "python_ssi_pipeline"]
  variables:
    PARENT_PIPELINE_SOURCE: $CI_PIPELINE_SOURCE
  trigger:
    include:
      - artifact: php_ssi_gitlab_pipeline.yml
        job: compute_pipeline
    strategy: depend
  rules:
    - if: '$SCHEDULED_JOB == ""'
    - if: '$SCHEDULED_JOB == null'
  when: always

ruby_ssi_pipeline:
  stage: ruby
  needs: ["compute_pipeline", "php_ssi_pipeline"]
  variables:
    PARENT_PIPELINE_SOURCE: $CI_PIPELINE_SOURCE
  trigger:
    include:
      - artifact: ruby_ssi_gitlab_pipeline.yml
        job: compute_pipeline
    strategy: depend
  rules:
    - if: '$SCHEDULED_JOB == ""'
    - if: '$SCHEDULED_JOB == null'
  when: always

delete_amis:
  extends: .base_job_onboarding
  stage: system-tests-utils
  allow_failure: false
  variables:
    AMI_RETENTION_DAYS: 10
    AMI_LAST_LAUNCHED_DAYS: 10
  script:
        - ./build.sh -i runner
        - source venv/bin/activate
        - python utils/scripts/pulumi_clean_up.py --component amis --ami-retention-days $AMI_RETENTION_DAYS --ami-last-launched-days $AMI_LAST_LAUNCHED_DAYS
  rules:
    - if: '$SCHEDULED_JOB == "delete_amis"'
  after_script: echo "Finish"
  timeout: 3h

delete_amis_by_name_or_lang:
  extends: .base_job_onboarding
  stage: system-tests-utils
  allow_failure: false
  script:
        - |
          if [ -z "$AMI_NAME" ] && [ -z "$AMI_LANG" ]; then
            echo "❌ ERROR: Either AMI_NAME or AMI_LANG must be set."
            exit 1
          fi
          echo "✅ Proceeding with AMI_NAME=$AMI_NAME, AMI_LANG=$AMI_LANG"
        - ./build.sh -i runner
        - source venv/bin/activate
        - |
          CMD="python utils/scripts/pulumi_clean_up.py --component amis_by_name"

          if [ -n "$AMI_NAME" ]; then
            CMD="$CMD --ami-name $AMI_NAME"
          fi

          if [ -n "$AMI_LANG" ]; then
            CMD="$CMD --ami-lang $AMI_LANG"
          fi

          echo "Running: $CMD"
          eval $CMD
  rules:
    - if: '$SCHEDULED_JOB == "delete_amis_by_name_or_lang"'
  after_script: echo "Finish"

delete_ec2_instances:
  extends: .base_job_onboarding
  stage: system-tests-utils
  allow_failure: false
  variables:
    EC2_AGE_MINUTES: 45
  script:
        - ./build.sh -i runner
        - source venv/bin/activate
        - python utils/scripts/pulumi_clean_up.py --component ec2 --ec2-age-minutes $EC2_AGE_MINUTES
  rules:
    - if: '$SCHEDULED_JOB == "delete_ec2_instances"'
  after_script: echo "Finish"

count_amis:
  extends: .base_job_onboarding
  stage: system-tests-utils
  allow_failure: false
  script:
        - ./build.sh -i runner
        - source venv/bin/activate
        - python utils/scripts/pulumi_clean_up.py --component amis_count
  rules:
    - if: '$SCHEDULED_JOB == "count_amis"'
  after_script: echo "Finish"

check_merge_labels:
  #Build docker images if it's needed. Check if the PR has the labels associated with the image build.
  image: registry.ddbuild.io/ci/libdatadog-build/ci_docker_base:67145216
  tags: ["runner:docker"]
  needs: []
  stage: system-tests-utils
  allow_failure: true
  before_script:
    - export DOCKER_LOGIN=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.docker-login-write --with-decryption --query "Parameter.Value" --out text)
    - export DOCKER_LOGIN_PASS=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.docker-login-pass-write --with-decryption --query "Parameter.Value" --out text)
  script:
    - ./utils/scripts/get_pr_merged_labels.sh
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "main"

generate_system_tests_end_to_end_images:
  image: registry.ddbuild.io/ci/libdatadog-build/ci_docker_base:67145216
  tags: ["runner:docker"]
  needs: []
  stage: system-tests-utils
  allow_failure: true
  before_script:
    - export DOCKER_LOGIN=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.docker-login-write --with-decryption --query "Parameter.Value" --out text)
    - export DOCKER_LOGIN_PASS=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.docker-login-pass-write --with-decryption --query "Parameter.Value" --out text)
  script:
      - echo "$DOCKER_LOGIN_PASS" | docker login --username "$DOCKER_LOGIN" --password-stdin
      - ./utils/build/build_tracer_buddies.sh --push
      - ./utils/build/build_python_base_images.sh --push
  when: manual

generate_system_tests_lib_injection_images:
  extends: .base_job_k8s_docker_ssi
  needs: []
  stage: system-tests-utils
  allow_failure: true
  variables:
    PRIVATE_DOCKER_REGISTRY: 235494822917.dkr.ecr.us-east-1.amazonaws.com
    PRIVATE_DOCKER_REGISTRY_USER: AWS
  script:
      - aws ecr get-login-password | docker login --username ${PRIVATE_DOCKER_REGISTRY_USER} --password-stdin ${PRIVATE_DOCKER_REGISTRY}
      - ./lib-injection/build/build_lib_injection_images.sh $PRIVATE_DOCKER_REGISTRY
  rules:
    - if: '$SCHEDULED_JOB == "generate_system_tests_lib_injection_images"'
    - when: manual

.delayed_base_job:
    image: registry.ddbuild.io/ci/libdatadog-build/ci_docker_base:67145216
    tags: ["arch:amd64"]
    script:
        - echo "⏳ Waiting before triggering the child pipeline..."
    when: delayed
    start_in: 5 minutes

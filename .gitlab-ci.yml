include:
  - remote: https://gitlab-templates.ddbuild.io/libdatadog/include/single-step-instrumentation-tests.yml
stages:
  - compute_pipeline
  - nodejs_ssi_pipelines
  - before_tests

variables:
    # Do not modify this - must be the repository name for Kubernetes gitlab runners to run
    KUBERNETES_SERVICE_ACCOUNT_OVERWRITE: system-tests #helm-charts
    TEST: 1

compute_pipeline:
  image: registry.ddbuild.io/ci/libdatadog-build/system-tests:48436362
  tags: ["arch:amd64"]
  stage: compute_pipeline
 # rules:
 #   - if: $CI_PIPELINE_SOURCE == "schedule"
 #     when: always
 #   - when: manual
 #     allow_failure: true
  script:
    - ./build.sh -i runner
    - source venv/bin/activate
    - git fetch origin ${CI_COMMIT_SHA}
    - git diff --name-only HEAD ${CI_COMMIT_SHA} >> modified_files.txt
    - cat modified_files.txt
    - python utils/scripts/compute_impacted_scenario.py >> impacted_scenarios.txt
    - echo "**************** AHORA EL OTRO *************************"
    - cat impacted_scenarios.txt
    - python utils/scripts/compute-workflow-parameters.py nodejs -g "ipv6" --parametric-job-count 1 --ci-environment "prod" --format gitlab > gitlab_pipeline.yml
  artifacts:
    paths:
      - gitlab_pipeline.yml

exec_aws_ssi_pipeline:
  stage: nodejs_ssi_pipelines
  needs: ["compute_pipeline"]
#  rules:
#    - if: $CI_PIPELINE_SOURCE == "schedule"
#      when: always
#    - when: manual
#      allow_failure: true
  variables:
    PARENT_PIPELINE_SOURCE: $CI_PIPELINE_SOURCE
  trigger:
    include:
      - artifact: gitlab_pipeline.yml
        job: compute_pipeline
    strategy: depend

check_merge_labels:
  #Build docker images if it's needed. Check if the PR has the labels associated with the image build.
  image: registry.ddbuild.io/images/ci_docker_base
  tags: ["runner:docker"]

  stage: before_tests
  allow_failure: true
  before_script:
    - export GH_TOKEN=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.gh-token --with-decryption --query "Parameter.Value" --out text)
    - export DOCKER_LOGIN=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.docker-login-write --with-decryption --query "Parameter.Value" --out text)
    - export DOCKER_LOGIN_PASS=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.docker-login-pass-write --with-decryption --query "Parameter.Value" --out text)
  script:
    -  echo $GH_TOKEN | docker login ghcr.io -u publisher --password-stdin
    - ./utils/scripts/get_pr_merged_labels.sh
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "main"

generate_system_tests_images:
  image: registry.ddbuild.io/images/ci_docker_base
  tags: ["runner:docker"]

  stage: before_tests
  allow_failure: true
  before_script:
    - export GH_TOKEN=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.gh-token --with-decryption --query "Parameter.Value" --out text)
    - export DOCKER_LOGIN=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.docker-login-write --with-decryption --query "Parameter.Value" --out text)
    - export DOCKER_LOGIN_PASS=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.docker-login-pass-write --with-decryption --query "Parameter.Value" --out text)
  script:
      -  echo $GH_TOKEN | docker login ghcr.io -u publisher --password-stdin
      - ./utils/build/build_tracer_buddies.sh --push
      - ./utils/build/build_python_base_images.sh --push
      - ./lib-injection/build/build_lib_injection_images.sh
  when: manual
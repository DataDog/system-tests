include:
  - remote: https://gitlab-templates.ddbuild.io/libdatadog/include/single-step-instrumentation-tests.yml
stages:
  - compute_pipeline
  - ssi_pipeline
  - before_tests

variables:
    # Do not modify this - must be the repository name for Kubernetes gitlab runners to run
    KUBERNETES_SERVICE_ACCOUNT_OVERWRITE: system-tests #helm-charts
    TEST: 1

compute_changes_pipeline:
  image: registry.ddbuild.io/ci/libdatadog-build/system-tests:48436362
  tags: ["arch:amd64"]
  stage: compute_pipeline
  variables:
    CI_ENVIRONMENT: "prod"
  script:
    - ./build.sh -i runner
    - source venv/bin/activate
    - ./run.sh MOCK_THE_TEST --collect-only --scenario-report
    - git clone https://github.com/DataDog/system-tests.git original
    - git fetch --all  # Ensure all branches are available
    - git branch --track $CI_COMMIT_REF_NAME origin/$CI_COMMIT_REF_NAME || true  # Track branch if not tracked
    - git checkout $CI_COMMIT_REF_NAME  # Ensure the branch is checked out
    - BASE_COMMIT=$(git merge-base origin/main $CI_COMMIT_REF_NAME)  # Get the base commit
    - echo "Branch was created from commit--> $BASE_COMMIT"
    - git diff --name-only $BASE_COMMIT $CI_COMMIT_SHA  >> modified_files.txt # List modified files
    - cat modified_files.txt
    - python utils/scripts/compute_impacted_scenario.py >> impacted_scenarios.env
  artifacts:
    reports:
      dotenv: impacted_scenarios.env

trigger_ssi_pipeline:
  stage: ssi_pipeline
  trigger:
    include: .gitlab/ssi-gitlab-ci.yml
    strategy: depend  # Ensures child pipeline status affects parent pipeline
  variables:
    scenarios: $scenarios
    scenarios_groups: $scenarios_groups
  needs:
    - job: compute_changes_pipeline
      artifacts: true

check_merge_labels:
  #Build docker images if it's needed. Check if the PR has the labels associated with the image build.
  image: registry.ddbuild.io/images/ci_docker_base
  tags: ["runner:docker"]

  stage: before_tests
  allow_failure: true
  before_script:
    - export GH_TOKEN=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.gh-token --with-decryption --query "Parameter.Value" --out text)
    - export DOCKER_LOGIN=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.docker-login-write --with-decryption --query "Parameter.Value" --out text)
    - export DOCKER_LOGIN_PASS=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.docker-login-pass-write --with-decryption --query "Parameter.Value" --out text)
  script:
    -  echo $GH_TOKEN | docker login ghcr.io -u publisher --password-stdin
    - ./utils/scripts/get_pr_merged_labels.sh
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "main"

generate_system_tests_images:
  image: registry.ddbuild.io/images/ci_docker_base
  tags: ["runner:docker"]

  stage: before_tests
  allow_failure: true
  before_script:
    - export GH_TOKEN=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.gh-token --with-decryption --query "Parameter.Value" --out text)
    - export DOCKER_LOGIN=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.docker-login-write --with-decryption --query "Parameter.Value" --out text)
    - export DOCKER_LOGIN_PASS=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.docker-login-pass-write --with-decryption --query "Parameter.Value" --out text)
  script:
      -  echo $GH_TOKEN | docker login ghcr.io -u publisher --password-stdin
      - ./utils/build/build_tracer_buddies.sh --push
      - ./utils/build/build_python_base_images.sh --push
      - ./lib-injection/build/build_lib_injection_images.sh
  when: manual
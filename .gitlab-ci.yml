stages:
  #- ruby_tracer
  - nodejs_tracer
  #- java_tracer
  #- python_tracer
  #- dotnet_tracer
  - parse_results
  - before_tests

.base_job_onboarding:
  only:
      - web
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/test-infra-definitions/runner:a58cc31c
  tags: ["arch:amd64"]
  before_script:
    - apt-get update
    - apt-get install -y jq
    # Setup AWS Credentials
    - mkdir -p ~/.aws
    - aws ssm get-parameter --region us-east-1 --name ci.system-tests.agent-qa-profile --with-decryption --query "Parameter.Value" --out text >> ~/.aws/config
    - export DD_API_KEY_ONBOARDING=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.dd-api-key-onboarding --with-decryption --query "Parameter.Value" --out text)
    - export DD_APP_KEY_ONBOARDING=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.dd-app-key-onboarding --with-decryption --query "Parameter.Value" --out text)
    - export ONBOARDING_AWS_INFRA_SUBNET_ID=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.aws-infra-subnet-id --with-decryption --query "Parameter.Value" --out text)
    - export ONBOARDING_AWS_INFRA_SECURITY_GROUPS_ID=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.aws-infra-securiy-groups-id --with-decryption --query "Parameter.Value" --out text)
    - export PULUMI_CONFIG_PASSPHRASE=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.pulumi-config-passphrase --with-decryption --query "Parameter.Value" --out text) 
    #Install plugins for PULUMI you need connect to gh. Sometimes this problem arises: GitHub rate limit exceeded
    - export GITHUB_TOKEN=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.gh-token --with-decryption --query "Parameter.Value" --out text) 
    #Avoid dockerhub rate limits
    - export DOCKER_LOGIN=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.docker-login --with-decryption --query "Parameter.Value" --out text) 
    - export DOCKER_LOGIN_PASS=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.docker-login-pass --with-decryption --query "Parameter.Value" --out text) 
    - export AWS_PROFILE=agent-qa-ci
    - pulumi login --local #"s3://dd-pulumi-state?region=us-east-1&awssdk=v2&profile=$AWS_PROFILE"
    - pulumi plugin install resource command 0.7.2
    - pulumi plugin install resource aws 5.41.0
  artifacts:
    when: always
    reports:
      # using the https://docs.gitlab.com/ee/ci/yaml/artifacts_reports.html#artifactsreportsdotenv trick to fill a job variable for downstream of successor job
      dotenv: generate.env
    paths: 
      - logs_$SCENARIO_SUFIX/
 
variables:
    # Do not modify this - must be the repository name for Kubernetes gitlab runners to run
    KUBERNETES_SERVICE_ACCOUNT_OVERWRITE: system-tests #helm-charts
    TEST: 1
    
onboarding_nodejs:
  extends: .base_job_onboarding
  stage: nodejs_tracer
  allow_failure: true
  dependencies: []
  only:
    - schedules
  variables:
    TEST_LIBRARY: "nodejs"
  parallel:
      matrix:
        #- ONBOARDING_FILTER_ENV: [dev, prod]
        - ONBOARDING_FILTER_ENV: [dev]
          ONBOARDING_FILTER_WEBLOG: [test-app-nodejs]
          SCENARIO: [ONBOARDING_HOST_INSTALL_MANUAL] 
        #  SCENARIO: [ONBOARDING_HOST_INSTALL_MANUAL,ONBOARDING_CONTAINER_INSTALL_MANUAL, ONBOARDING_HOST_INSTALL_SCRIPT, ONBOARDING_CONTAINER_INSTALL_SCRIPT, ONBOARDING_HOST_UNINSTALL,ONBOARDING_CONTAINER_UNINSTALL, ONBOARDING_HOST_BLOCK_LIST] 
       # - ONBOARDING_FILTER_ENV: [dev, prod]
       #   ONBOARDING_FILTER_WEBLOG: [test-app-nodejs-alpine]
       #   SCENARIO: [ONBOARDING_CONTAINER_INSTALL_MANUAL, ONBOARDING_CONTAINER_INSTALL_SCRIPT, ONBOARDING_CONTAINER_UNINSTALL] 
         
  script:
      - export SCENARIO_SUFIX=$(echo "$SCENARIO" | tr '[:upper:]' '[:lower:]')
      - echo "SCENARIO_SUFIX=${SCENARIO_SUFIX}" >> generate.env
      - ./build.sh -i runner
      - timeout 2700s ./run.sh $SCENARIO --obd-weblog ${ONBOARDING_FILTER_WEBLOG} --obd-env ${ONBOARDING_FILTER_ENV} --obd-library ${TEST_LIBRARY} 

.onboarding_java:
  extends: .base_job_onboarding
  stage: java_tracer
  allow_failure: true
  dependencies: []
  only:
    - schedules
  variables:
    TEST_LIBRARY: "java"
  parallel:
      matrix:
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-java]
          SCENARIO: [ONBOARDING_HOST_INSTALL_MANUAL, ONBOARDING_HOST_INSTALL_SCRIPT, ONBOARDING_HOST_UNINSTALL, ONBOARDING_HOST_BLOCK_LIST]
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-java,test-app-java-buildpack,test-app-java-alpine]
          SCENARIO: [ONBOARDING_CONTAINER_INSTALL_MANUAL, ONBOARDING_CONTAINER_INSTALL_SCRIPT, ONBOARDING_CONTAINER_UNINSTALL]
  script:
      - ./build.sh -i runner
      - timeout 2700s ./run.sh $SCENARIO --obd-weblog ${ONBOARDING_FILTER_WEBLOG} --obd-env ${ONBOARDING_FILTER_ENV} --obd-library ${TEST_LIBRARY}

.onboarding_python:
  extends: .base_job_onboarding
  stage: python_tracer
  allow_failure: true
  dependencies: []
  only:
    - schedules
  variables:
    TEST_LIBRARY: "python"
  parallel:
      matrix:
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-python]
          SCENARIO: [ONBOARDING_HOST_INSTALL_MANUAL,ONBOARDING_CONTAINER_INSTALL_MANUAL, ONBOARDING_HOST_INSTALL_SCRIPT, ONBOARDING_CONTAINER_INSTALL_SCRIPT, ONBOARDING_HOST_UNINSTALL,ONBOARDING_CONTAINER_UNINSTALL, ONBOARDING_HOST_BLOCK_LIST] 
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-python-django-alpine]
          SCENARIO: [ONBOARDING_CONTAINER_INSTALL_MANUAL, ONBOARDING_CONTAINER_INSTALL_SCRIPT, ONBOARDING_CONTAINER_UNINSTALL] 
  script:
      - ./build.sh -i runner
      - timeout 2700s ./run.sh $SCENARIO --obd-weblog ${ONBOARDING_FILTER_WEBLOG} --obd-env ${ONBOARDING_FILTER_ENV} --obd-library ${TEST_LIBRARY} 

.onboarding_dotnet:
  extends: .base_job_onboarding
  stage: dotnet_tracer
  allow_failure: true
  dependencies: []
  only:
    - schedules
  variables:
    TEST_LIBRARY: "dotnet"
  parallel:
      matrix:
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-dotnet]
          SCENARIO: [ONBOARDING_HOST_INSTALL_MANUAL,ONBOARDING_CONTAINER_INSTALL_MANUAL, ONBOARDING_HOST_INSTALL_SCRIPT, ONBOARDING_CONTAINER_INSTALL_SCRIPT, ONBOARDING_HOST_UNINSTALL,ONBOARDING_CONTAINER_UNINSTALL,ONBOARDING_HOST_BLOCK_LIST] 
  script:
      - ./build.sh -i runner
      - timeout 2700s ./run.sh $SCENARIO --obd-weblog ${ONBOARDING_FILTER_WEBLOG} --obd-env ${ONBOARDING_FILTER_ENV} --obd-library ${TEST_LIBRARY}

.onboarding_ruby:
  extends: .base_job_onboarding
  stage: ruby_tracer
  allow_failure: true
  dependencies: []
  only:
    - schedules
  variables:
    TEST_LIBRARY: "ruby"
  parallel:
      matrix:
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-ruby] 
          SCENARIO: [ONBOARDING_HOST_INSTALL_MANUAL, ONBOARDING_HOST_INSTALL_SCRIPT, ONBOARDING_HOST_UNINSTALL, ONBOARDING_CONTAINER_INSTALL_MANUAL,ONBOARDING_CONTAINER_UNINSTALL,ONBOARDING_CONTAINER_INSTALL_SCRIPT,ONBOARDING_HOST_BLOCK_LIST] 
  script:
      - ./build.sh -i runner
      - timeout 2700s ./run.sh $SCENARIO --obd-weblog ${ONBOARDING_FILTER_WEBLOG} --obd-env ${ONBOARDING_FILTER_ENV} --obd-library ${TEST_LIBRARY}

onboarding_parse_results:
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/test-infra-definitions/runner:a58cc31c
  tags: ["arch:amd64"]
  stage: parse_results
  only:
    - schedules
  before_script:
    #We need authenticate on git repository
    - export FP_IMPORT_URL=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.fp-import-url --with-decryption --query "Parameter.Value" --out text) 
    - export FP_API_KEY=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.fp-api-key --with-decryption --query "Parameter.Value" --out text) 
  script:
      - |
        for folder in logs*/ ; do
          curl -X POST ${FP_IMPORT_URL} \
            --fail \
            --header "Content-Type: application/json" \
            --header "FP_API_KEY: ${FP_API_KEY}" \
            --data "@./${folder}feature_parity.json" \
            --include
        done

check_merge_labels:
  image: registry.ddbuild.io/images/ci_docker_base
  tags: ["runner:docker"]
  stage: before_tests
  before_script:
    - export GH_TOKEN=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.gh-token --with-decryption --query "Parameter.Value" --out text) 
    - export DOCKER_LOGIN=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.docker-login-write --with-decryption --query "Parameter.Value" --out text) 
    - export DOCKER_LOGIN_PASS=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.docker-login-pass-write --with-decryption --query "Parameter.Value" --out text) 
  script:  
    - ./utils/scripts/get_pr_merged_labels.sh
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "main"


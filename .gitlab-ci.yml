include:
  - remote: https://gitlab-templates.ddbuild.io/libdatadog/include/single-step-instrumentation-tests.yml

stages:
  - extravms_tracer
  - ruby_tracer
  - nodejs_tracer
  - java_tracer
  - python_tracer
  - dotnet_tracer
  - php_tracer
  - parse_results
  - before_tests

.base_job_onboarding_system_tests:
  extends: .base_job_onboarding
  after_script:
    - SCENARIO_SUFIX=$(echo "$SCENARIO" | tr '[:upper:]' '[:lower:]')
    - REPORTS_PATH="reports/"
    - mkdir -p "$REPORTS_PATH"
    - cp -R logs_"${SCENARIO_SUFIX}" $REPORTS_PATH/
    - cp logs_"${SCENARIO_SUFIX}"/feature_parity.json "$REPORTS_PATH"/"${SCENARIO_SUFIX}".json
    - mv "$REPORTS_PATH"/logs_"${SCENARIO_SUFIX}" "$REPORTS_PATH"/logs_"${TEST_LIBRARY}"_"${ONBOARDING_FILTER_WEBLOG}"_"${SCENARIO_SUFIX}"
  artifacts:
      when: always
      paths:
        - reports/

variables:
    # Do not modify this - must be the repository name for Kubernetes gitlab runners to run
    KUBERNETES_SERVICE_ACCOUNT_OVERWRITE: system-tests #helm-charts
    TEST: 1
    KUBERNETES_CPU_REQUEST: "6"
    KUBERNETES_CPU_LIMIT: "6"
    AMI_UPDATE:
      description: "Set to true to force the update the AMIs used in the system-tests"

onboarding_install_extra_vms:
  extends: .base_job_onboarding_system_tests
  stage: extravms_tracer
  allow_failure: true
  dependencies: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: always
    - when: manual
  variables:
    SCENARIO: "SIMPLE_INSTALLER_AUTO_INJECTION"
  parallel:
      matrix:
        - ONBOARDING_FILTER_ENV: [prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-nodejs,test-app-nodejs-container,test-app-nodejs-alpine]
          TEST_LIBRARY: "nodejs"
        - ONBOARDING_FILTER_ENV: [prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-java,test-app-java-container,test-app-java-container-jdk15,test-app-java-alpine]
          TEST_LIBRARY: "java"
        - ONBOARDING_FILTER_ENV: [prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-python,test-app-python-container,test-app-python-alpine]
          TEST_LIBRARY: "python"
        - ONBOARDING_FILTER_ENV: [prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-dotnet,test-app-dotnet-container]
          TEST_LIBRARY: "dotnet"
        - ONBOARDING_FILTER_ENV: [prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-ruby,test-app-ruby-container]
          TEST_LIBRARY: "ruby"
        - ONBOARDING_FILTER_ENV: [prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-php,test-app-php-container-83,test-app-php-container-alpine]
          TEST_LIBRARY: "php"
  script:
      - ./build.sh -i runner
      - timeout 2700s ./run.sh $SCENARIO --vm-weblog ${ONBOARDING_FILTER_WEBLOG} --vm-env ${ONBOARDING_FILTER_ENV} --vm-library ${TEST_LIBRARY} --vm-provider aws --vm-default-vms False
onboarding_nodejs:
  extends: .base_job_onboarding_system_tests
  stage: nodejs_tracer
  allow_failure: true
  dependencies: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: always
    - when: manual
  variables:
    TEST_LIBRARY: "nodejs"
  parallel:
      matrix:
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-nodejs]
          SCENARIO: [HOST_AUTO_INJECTION_INSTALL_SCRIPT, HOST_AUTO_INJECTION_INSTALL_SCRIPT_PROFILING]
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-shell-script]
          SCENARIO: [INSTALLER_AUTO_INJECTION_BLOCK_LIST]
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-nodejs-container,test-app-nodejs-alpine]
          SCENARIO: [ CONTAINER_AUTO_INJECTION_INSTALL_SCRIPT, CONTAINER_AUTO_INJECTION_INSTALL_SCRIPT_PROFILING]
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-nodejs,test-app-nodejs-container,test-app-nodejs-alpine]
          SCENARIO: [INSTALLER_AUTO_INJECTION,SIMPLE_AUTO_INJECTION_PROFILING]
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-nodejs-16]
          SCENARIO: [INSTALLER_NOT_SUPPORTED_AUTO_INJECTION]
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-nodejs]
          SCENARIO: [INSTALLER_AUTO_INJECTION_LD_PRELOAD]
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-nodejs]
          SCENARIO: [INSTALLER_HOST_AUTO_INJECTION_CHAOS]
  script:
      - ./build.sh -i runner
      - timeout 2700s ./run.sh $SCENARIO --vm-weblog ${ONBOARDING_FILTER_WEBLOG} --vm-env ${ONBOARDING_FILTER_ENV} --vm-library ${TEST_LIBRARY} --vm-provider aws

onboarding_java:
  extends: .base_job_onboarding_system_tests
  stage: java_tracer
  allow_failure: true
  dependencies: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: always
    - when: manual
  variables:
    TEST_LIBRARY: "java"
  parallel:
      matrix:
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-java]
          SCENARIO: [HOST_AUTO_INJECTION_INSTALL_SCRIPT, HOST_AUTO_INJECTION_INSTALL_SCRIPT_PROFILING]
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-shell-script]
          SCENARIO: [INSTALLER_AUTO_INJECTION_BLOCK_LIST]
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-java-container,test-app-java-container-jdk15,test-app-java-alpine,test-app-java-buildpack]
          SCENARIO: [CONTAINER_AUTO_INJECTION_INSTALL_SCRIPT]
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-java-container,test-app-java-container-jdk15,test-app-java-alpine]
          SCENARIO: [CONTAINER_AUTO_INJECTION_INSTALL_SCRIPT_PROFILING]
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-java,test-app-java-container,test-app-java-container-jdk15,test-app-java-alpine,test-app-java-buildpack,test-app-java-alpine-jdk15,test-app-java-alpine-jdk21]
          SCENARIO: [INSTALLER_AUTO_INJECTION]
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-java,test-app-java-container,test-app-java-container-jdk15,test-app-java-alpine]
          SCENARIO: [SIMPLE_AUTO_INJECTION_PROFILING]
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-java]
          SCENARIO: [INSTALLER_AUTO_INJECTION_LD_PRELOAD]
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-java]
          SCENARIO: [INSTALLER_HOST_AUTO_INJECTION_CHAOS]
  script:
      - ./build.sh -i runner
      - timeout 2700s ./run.sh $SCENARIO --vm-weblog ${ONBOARDING_FILTER_WEBLOG} --vm-env ${ONBOARDING_FILTER_ENV} --vm-library ${TEST_LIBRARY} --vm-provider aws

onboarding_python:
  extends: .base_job_onboarding_system_tests
  stage: python_tracer
  allow_failure: true
  dependencies: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: always
    - when: manual
  variables:
    TEST_LIBRARY: "python"
  parallel:
      matrix:
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-python]
          SCENARIO: [HOST_AUTO_INJECTION_INSTALL_SCRIPT]
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-shell-script]
          SCENARIO: [INSTALLER_AUTO_INJECTION_BLOCK_LIST]
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-python-container,test-app-python-alpine]
          SCENARIO: [ CONTAINER_AUTO_INJECTION_INSTALL_SCRIPT]
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [
            test-app-python,
            test-app-python-container,
            test-app-python-alpine,
            test-app-python-alpine-libgcc,
            test-app-python-container-3.7,
            test-app-python-container-3.8,
            test-app-python-container-3.9,
            test-app-python-container-3.10,
            test-app-python-container-3.11,
            test-app-python-container-3.12,
            test-app-python-container-3.7-alpine,
            test-app-python-container-3.8-alpine,
            test-app-python-container-3.9-alpine,
            test-app-python-container-3.10-alpine,
            test-app-python-container-3.11-alpine,
            test-app-python-container-3.12-alpine,
          ]
          SCENARIO: [INSTALLER_AUTO_INJECTION]
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-python]
          SCENARIO: [INSTALLER_AUTO_INJECTION_LD_PRELOAD]
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-python]
          SCENARIO: [INSTALLER_HOST_AUTO_INJECTION_CHAOS]
  script:
      - ./build.sh -i runner
      - timeout 2700s ./run.sh $SCENARIO --vm-weblog ${ONBOARDING_FILTER_WEBLOG} --vm-env ${ONBOARDING_FILTER_ENV} --vm-library ${TEST_LIBRARY} --vm-provider aws

onboarding_dotnet:
  extends: .base_job_onboarding_system_tests
  stage: dotnet_tracer
  allow_failure: true
  dependencies: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: always
    - when: manual
  variables:
    TEST_LIBRARY: "dotnet"
  parallel:
      matrix:
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-dotnet]
          SCENARIO: [HOST_AUTO_INJECTION_INSTALL_SCRIPT]
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-shell-script]
          SCENARIO: [INSTALLER_AUTO_INJECTION_BLOCK_LIST]
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-dotnet-container]
          SCENARIO: [ CONTAINER_AUTO_INJECTION_INSTALL_SCRIPT]
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-dotnet,test-app-dotnet-container]
          SCENARIO: [INSTALLER_AUTO_INJECTION]
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-dotnet]
          SCENARIO: [INSTALLER_AUTO_INJECTION_LD_PRELOAD]
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-dotnet]
          SCENARIO: [INSTALLER_HOST_AUTO_INJECTION_CHAOS]
  script:
      - ./build.sh -i runner
      - timeout 2700s ./run.sh $SCENARIO --vm-weblog ${ONBOARDING_FILTER_WEBLOG} --vm-env ${ONBOARDING_FILTER_ENV} --vm-library ${TEST_LIBRARY} --vm-provider aws

onboarding_ruby:
  extends: .base_job_onboarding_system_tests
  stage: ruby_tracer
  allow_failure: true
  dependencies: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: always
    - when: manual
  variables:
    TEST_LIBRARY: "ruby"
  parallel:
      matrix:
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-ruby]
          SCENARIO: [HOST_AUTO_INJECTION_INSTALL_SCRIPT]
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-shell-script]
          SCENARIO: [INSTALLER_AUTO_INJECTION_BLOCK_LIST]
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-ruby-container]
          SCENARIO: [ CONTAINER_AUTO_INJECTION_INSTALL_SCRIPT]
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-ruby,test-app-ruby-container]
          SCENARIO: [INSTALLER_AUTO_INJECTION]
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-ruby]
          SCENARIO: [INSTALLER_AUTO_INJECTION_LD_PRELOAD]
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-ruby]
          SCENARIO: [INSTALLER_HOST_AUTO_INJECTION_CHAOS]
  script:
      - ./build.sh -i runner
      - timeout 2700s ./run.sh $SCENARIO --vm-weblog ${ONBOARDING_FILTER_WEBLOG} --vm-env ${ONBOARDING_FILTER_ENV} --vm-library ${TEST_LIBRARY} --vm-provider aws

onboarding_php:
  extends: .base_job_onboarding_system_tests
  stage: php_tracer
  allow_failure: true
  dependencies: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: always
    - when: manual
  variables:
    TEST_LIBRARY: "php"
  parallel:
      matrix:
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-php]
          SCENARIO: [HOST_AUTO_INJECTION_INSTALL_SCRIPT]
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-shell-script]
          SCENARIO: [INSTALLER_AUTO_INJECTION_BLOCK_LIST]
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-php-container-83,test-app-php-container-alpine]
          SCENARIO: [CONTAINER_AUTO_INJECTION_INSTALL_SCRIPT]
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-php,test-app-php-container-83,test-app-php-container-alpine]
          SCENARIO: [INSTALLER_AUTO_INJECTION]
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-php]
          SCENARIO: [INSTALLER_AUTO_INJECTION_LD_PRELOAD]
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-php]
          SCENARIO: [INSTALLER_HOST_AUTO_INJECTION_CHAOS]
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-php-container-56]
          SCENARIO: [INSTALLER_NOT_SUPPORTED_AUTO_INJECTION]
  script:
      - ./build.sh -i runner
      - timeout 2700s ./run.sh $SCENARIO --vm-weblog ${ONBOARDING_FILTER_WEBLOG} --vm-env ${ONBOARDING_FILTER_ENV} --vm-library ${TEST_LIBRARY} --vm-provider aws


onboarding_parse_results:
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/test-infra-definitions/runner:a58cc31c
  tags: ["arch:amd64"]
  stage: parse_results
  only:
    - schedules
  before_script:
    #We need authenticate on git repository
    - export FP_IMPORT_URL=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.fp-import-url --with-decryption --query "Parameter.Value" --out text)
    - export FP_API_KEY=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.fp-api-key --with-decryption --query "Parameter.Value" --out text)
  script:
      - |
        for folder in reports/logs*/ ; do
          echo "Checking folder: ${folder}"
          for filename in ./${folder}*_feature_parity.json; do
            if [ -e ${filename} ]
            then
              echo "Processing report: ${filename}"
              curl -X POST ${FP_IMPORT_URL} \
                --fail \
                --header "Content-Type: application/json" \
                --header "FP_API_KEY: ${FP_API_KEY}" \
                --data "@${filename}" \
                --include
            fi
          done
        done

check_merge_labels:
  #Build docker images if it's needed. Check if the PR has the labels associated with the image build.
  image: registry.ddbuild.io/images/ci_docker_base
  tags: ["runner:docker"]

  stage: before_tests
  allow_failure: true
  before_script:
    - export GH_TOKEN=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.gh-token --with-decryption --query "Parameter.Value" --out text)
    - export DOCKER_LOGIN=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.docker-login-write --with-decryption --query "Parameter.Value" --out text)
    - export DOCKER_LOGIN_PASS=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.docker-login-pass-write --with-decryption --query "Parameter.Value" --out text)
  script:
    -  echo $GH_TOKEN | docker login ghcr.io -u publisher --password-stdin
    - ./utils/scripts/get_pr_merged_labels.sh
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "main"

generate_system_tests_images:
  image: registry.ddbuild.io/images/ci_docker_base
  tags: ["runner:docker"]

  stage: before_tests
  allow_failure: true
  before_script:
    - export GH_TOKEN=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.gh-token --with-decryption --query "Parameter.Value" --out text)
    - export DOCKER_LOGIN=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.docker-login-write --with-decryption --query "Parameter.Value" --out text)
    - export DOCKER_LOGIN_PASS=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.docker-login-pass-write --with-decryption --query "Parameter.Value" --out text)
  script:
      -  echo $GH_TOKEN | docker login ghcr.io -u publisher --password-stdin
      - ./utils/build/build_tracer_buddies.sh --push
      - ./utils/build/build_python_base_images.sh --push
      - ./lib-injection/build/build_lib_injection_images.sh
  when: manual


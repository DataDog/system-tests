#image: tiangolo/docker-with-compose

.base_job:
  # image: $CI_IMAGE
  needs: []
  before_script:
    - apk add bash jq git unzip curl
    - pip install pyyaml awscli
    - aws --version && docker --version && docker-compose --version
    - export DD_API_KEY=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.dd_api_key --with-decryption --query "Parameter.Value" --out text)
    - export GL_TOKEN=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.gl_token --with-decryption --query "Parameter.Value" --out text)
    - export CIRCLECI_TOKEN=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.circleci_token --with-decryption --query "Parameter.Value" --out text)
variables:
  # Do not modify this - must be the repository name for Kubernetes gitlab runners to run
   KUBERNETES_SERVICE_ACCOUNT_OVERWRITE: system-tests #helm-charts
   TEST: 1

.base_job_onboarding:
  only:
      - schedules
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/test-infra-definitions/runner:a58cc31c
  tags: ["arch:amd64"]
  before_script:
    - apt-get update
    - apt-get install -y jq
    # Setup AWS Credentials
    - mkdir -p ~/.aws
    - aws ssm get-parameter --region us-east-1 --name ci.system-tests.agent-qa-profile --with-decryption --query "Parameter.Value" --out text >> ~/.aws/config
    - export DD_API_KEY_ONBOARDING=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.dd-api-key-onboarding --with-decryption --query "Parameter.Value" --out text)
    - export DD_APP_KEY_ONBOARDING=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.dd-app-key-onboarding --with-decryption --query "Parameter.Value" --out text)
    - export ONBOARDING_AWS_INFRA_SUBNET_ID=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.aws-infra-subnet-id --with-decryption --query "Parameter.Value" --out text)
    - export ONBOARDING_AWS_INFRA_SECURITY_GROUPS_ID=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.aws-infra-securiy-groups-id --with-decryption --query "Parameter.Value" --out text)
    - export PULUMI_CONFIG_PASSPHRASE=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.pulumi-config-passphrase --with-decryption --query "Parameter.Value" --out text) 
    #Avoid dockerhub rate limits
    - export DOCKER_LOGIN=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.docker-login --with-decryption --query "Parameter.Value" --out text) 
    - export DOCKER_LOGIN_PASS=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.docker-login-pass --with-decryption --query "Parameter.Value" --out text) 
    - export AWS_PROFILE=agent-qa-ci
    - pulumi login --local #"s3://dd-pulumi-state?region=us-east-1&awssdk=v2&profile=$AWS_PROFILE"

  artifacts:
      when: always
      paths:
        - logs_onboarding_host/
        - logs_onboarding_host_container/
        - logs_onboarding_container/

#Tested with parallel/matrix but flakyness arise. Seems related with: https://github.com/pulumi/pulumi/issues/8633
onboarding_java:
  extends: .base_job_onboarding
  variables:
      TEST_LIBRARY: java
  script:
    - echo "Starting onboarding scenarios"
    - ./build.sh -i runner
    - ./run.sh ONBOARDING_HOST
    - ./run.sh ONBOARDING_HOST_CONTAINER
    - ./run.sh ONBOARDING_CONTAINER
    - echo "Finished onboarding scenarios!"

onboarding_python:
  extends: .base_job_onboarding
  variables:
      TEST_LIBRARY: python
  script:
    - echo "Starting onboarding scenarios"
    - ./build.sh -i runner
    - ./run.sh ONBOARDING_HOST
    - ./run.sh ONBOARDING_HOST_CONTAINER
    - ./run.sh ONBOARDING_CONTAINER
    - echo "Finished onboarding scenarios!"

onboarding_nodejs:
  extends: .base_job_onboarding
  variables:
      TEST_LIBRARY: nodejs
  script:
    - echo "Starting onboarding scenarios"
    - ./build.sh -i runner
    - ./run.sh ONBOARDING_HOST
    - ./run.sh ONBOARDING_HOST_CONTAINER
    - ./run.sh ONBOARDING_CONTAINER
    - echo "Finished onboarding scenarios!"

onboarding_dotnet:
  extends: .base_job_onboarding
  variables:
      TEST_LIBRARY: dotnet
  script:
    - echo "Starting onboarding scenarios"
    - ./build.sh -i runner
    - ./run.sh ONBOARDING_HOST
    - ./run.sh ONBOARDING_HOST_CONTAINER
    - ./run.sh ONBOARDING_CONTAINER
    - echo "Finished onboarding scenarios!"

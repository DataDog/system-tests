.base_job_onboarding:
  only:
      - web
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/test-infra-definitions/runner:a58cc31c
  tags: ["arch:amd64"]
  before_script:
    - apt-get update
    - apt-get install -y jq
    # Setup AWS Credentials
    - mkdir -p ~/.aws
    - aws ssm get-parameter --region us-east-1 --name ci.system-tests.agent-qa-profile --with-decryption --query "Parameter.Value" --out text >> ~/.aws/config
    - export DD_API_KEY_ONBOARDING=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.dd-api-key-onboarding --with-decryption --query "Parameter.Value" --out text)
    - export DD_APP_KEY_ONBOARDING=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.dd-app-key-onboarding --with-decryption --query "Parameter.Value" --out text)
    - export ONBOARDING_AWS_INFRA_SUBNET_ID=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.aws-infra-subnet-id --with-decryption --query "Parameter.Value" --out text)
    - export ONBOARDING_AWS_INFRA_SECURITY_GROUPS_ID=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.aws-infra-securiy-groups-id --with-decryption --query "Parameter.Value" --out text)
    - export PULUMI_CONFIG_PASSPHRASE=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.pulumi-config-passphrase --with-decryption --query "Parameter.Value" --out text) 
    #Install plugins for PULUMI you need connect to gh. Sometimes this problem arises: GitHub rate limit exceeded
    - export GITHUB_TOKEN=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.gh-token --with-decryption --query "Parameter.Value" --out text) 
    #We need authenticate on git repository
    - export GITHUB_USER=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.gh-user --with-decryption --query "Parameter.Value" --out text) 
    - export GITHUB_MAIL=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.gh-mail --with-decryption --query "Parameter.Value" --out text) 
    #Avoid dockerhub rate limits
    - export DOCKER_LOGIN=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.docker-login --with-decryption --query "Parameter.Value" --out text) 
    - export DOCKER_LOGIN_PASS=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.docker-login-pass --with-decryption --query "Parameter.Value" --out text) 
    - export AWS_PROFILE=agent-qa-ci
    - pulumi login --local #"s3://dd-pulumi-state?region=us-east-1&awssdk=v2&profile=$AWS_PROFILE"
    - pulumi plugin install resource command 0.8.2
    - pulumi plugin install resource aws 5.41.0
    #We need some variable for after script
    - echo "GITHUB_USER=${GITHUB_USER}" >> .env_ci
    - echo "GITHUB_MAIL=${GITHUB_MAIL}" >> .env_ci
    - echo "GITHUB_TOKEN=${GITHUB_TOKEN}" >> .env_ci
  after_script:
    - export $(cat .env_ci | egrep -v "(^#.*|^$)" | xargs) 
    - sh utils/scripts/push_reports_dashboard.sh
  artifacts:
      when: always
      paths:
        - logs_onboarding_host/
        - logs_onboarding_host_container/
        - logs_onboarding_container/
        - logs_onboarding_host_auto_install/
        - logs_onboarding_host_container_auto_install/
        - logs_onboarding_container_auto_install/
variables:
    # Do not modify this - must be the repository name for Kubernetes gitlab runners to run
    KUBERNETES_SERVICE_ACCOUNT_OVERWRITE: system-tests #helm-charts
    TEST: 1
    
onboarding_nodejs:
  extends: .base_job_onboarding
  only:
    - schedules
  variables:
    TEST_LIBRARY: "nodejs"
  parallel:
      matrix:
        - ONBOARDING_FILTER_ENV: [dev, prod]
          SCENARIO: [ONBOARDING_HOST,ONBOARDING_CONTAINER, ONBOARDING_HOST_AUTO_INSTALL, ONBOARDING_CONTAINER_AUTO_INSTALL] 
          ONBOARDING_FILTER_WEBLOG: [test-app-nodejs]
  script:
      - echo "SCENARIO=${SCENARIO}" >> .env_ci && echo "TEST_LIBRARY=${TEST_LIBRARY}" >> .env_ci
      - echo "ENV=${ONBOARDING_FILTER_ENV}" >> .env_ci && echo "WEBLOG=${ONBOARDING_FILTER_WEBLOG}" >> .env_ci
      - ./build.sh -i runner
      - ./run.sh $SCENARIO --obd-weblog ${ONBOARDING_FILTER_WEBLOG} --obd-env ${ONBOARDING_FILTER_ENV} --obd-library ${TEST_LIBRARY}
      
onboarding_java:
  extends: .base_job_onboarding
  only:
    - schedules
  variables:
    TEST_LIBRARY: "java"
  parallel:
      matrix:
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-java,wildfly]
          SCENARIO: [ONBOARDING_HOST, ONBOARDING_HOST_AUTO_INSTALL]
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-java,test-app-java-buildpack,test-app-java-alpine]
          SCENARIO: [ONBOARDING_CONTAINER, ONBOARDING_CONTAINER_AUTO_INSTALL]
  script:
      - echo "SCENARIO=${SCENARIO}" >> .env_ci && echo "TEST_LIBRARY=${TEST_LIBRARY}" >> .env_ci
      - echo "ENV=${ONBOARDING_FILTER_ENV}" >> .env_ci && echo "WEBLOG=${ONBOARDING_FILTER_WEBLOG}" >> .env_ci
      - ./build.sh -i runner
      - ./run.sh $SCENARIO --obd-weblog ${ONBOARDING_FILTER_WEBLOG} --obd-env ${ONBOARDING_FILTER_ENV} --obd-library ${TEST_LIBRARY}

onboarding_python:
  extends: .base_job_onboarding
  only:
    - schedules
  variables:
    TEST_LIBRARY: "python"
  parallel:
      matrix:
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-python]
          SCENARIO: [ONBOARDING_HOST, ONBOARDING_CONTAINER, ONBOARDING_HOST_AUTO_INSTALL, ONBOARDING_CONTAINER_AUTO_INSTALL]
  script:
      - echo "SCENARIO=${SCENARIO}" >> .env_ci && echo "TEST_LIBRARY=${TEST_LIBRARY}" >> .env_ci
      - echo "ENV=${ONBOARDING_FILTER_ENV}" >> .env_ci && echo "WEBLOG=${ONBOARDING_FILTER_WEBLOG}" >> .env_ci
      - ./build.sh -i runner
      - ./run.sh $SCENARIO --obd-weblog ${ONBOARDING_FILTER_WEBLOG} --obd-env ${ONBOARDING_FILTER_ENV} --obd-library ${TEST_LIBRARY}

onboarding_dotnet:
  extends: .base_job_onboarding
  only:
    - schedules
  variables:
    TEST_LIBRARY: "dotnet"
  parallel:
      matrix:
        - ONBOARDING_FILTER_ENV: [dev, prod]
          ONBOARDING_FILTER_WEBLOG: [test-app-dotnet]     
          SCENARIO: [ONBOARDING_HOST,ONBOARDING_CONTAINER, ONBOARDING_HOST_AUTO_INSTALL,ONBOARDING_CONTAINER_AUTO_INSTALL]

  script:
      - echo "SCENARIO=${SCENARIO}" >> .env_ci && echo "TEST_LIBRARY=${TEST_LIBRARY}" >> .env_ci
      - echo "ENV=${ONBOARDING_FILTER_ENV}" >> .env_ci && echo "WEBLOG=${ONBOARDING_FILTER_WEBLOG}" >> .env_ci
      - ./build.sh -i runner
      - ./run.sh $SCENARIO --obd-weblog ${ONBOARDING_FILTER_WEBLOG} --obd-env ${ONBOARDING_FILTER_ENV} --obd-library ${TEST_LIBRARY}
---
description: 
globs: 
alwaysApply: true
---
# AWS SSI

* The basic documentation about the AWS SSI tests is in the document @docs/scenarios/onboarding.md. This document contains a good overview of the AWS SSI tests, the requirements ("Prerequisites" section) to run ("Run the tests" section), and how to operate/develop with them. Use it to answer questions about the AWS SSI tests.
* Vagrant requirements are only if you want to run the tests using Vagrant instead of AWS. Vagrant is discontinued in system-tests.
* The aws_onboarding_wizard.sh script is used to run the AWS onboarding tests. It doesn't need any parameters. You can also run the AWS tests manually; you MUST check the doc @docs/scenarios/onboarding.md in the section 'Run the scenario manually'. ALWAYS mention 'aws-vault' as an example. How to run the AWS SSI tests manually: ALWAYS describe the mandatory parameters as they are described in the documentation (--vm-library, --vm-env, --vm-weblog, --vm-provider, --vm-only). Do not make reference to other parameters that do not appear in the onboarding documentation.
* To register a new virtual machine, please ask the user for the name and other required fields to register a new virtual machine in system-tests. Be strict with the fields that already exist in the file [virtual_machines.json](mdc:utils/virtual_machine/virtual_machines.json), NEVER invent new fields. For example, the field `os_version' it doesn't exists. NEVER ask or show to the user fields that they don't exist. you MUST validate all updates of the virtual_machines.json using the json schema: [virtual machines json schema](mdc:utils/virtual_machine/virtual_machines.jsschema)](utils/build/virtual_machine/weblogs/weblog_provision_schema.yml), this scheme validation should be done by you, never by the user.
* After registering a new virtual machine, you ALWAYS must define which weblogs are compatible with this new VM. Help the user to do this task by executing the script [vm_compatibility_checker](mdc:utils/scripts/ssi_wizards/tools/aws_ssi_registration.py) with the parameter --vm and the new VM name as value to define the compatibility between the virtual machines and the weblogs.
* To create or update a weblog provision for AWS SSI tests, ALWAYS verify that you are using the correct format, checking the section "Weblog Provision Structure" from the document [onboarding_provision_section](mdc:docs/scenarios/onboarding_provision_section.md) and the document [onboarding](mdc:docs/scenarios/onboarding.md) and the existing provision files under 'utils/build/virtual_machine/weblogs' folder. You MUST ALWAYS validate all updates or new code for a weblog aws ssi provision using the [weblog provision yaml schema](mdc:utils/build/virtual_machine/weblogs/weblog_provision_schema.yml), this scheme validation should be done by you, never by the user.
* After creating a new weblog for AWS SSI tests, you ALWAYS must define in which scenarios it is going to run and which virtual machines are compatible with this new weblog. Help the user to do this task by executing the script [weblog_registration](mdc:utils/scripts/ssi_wizards/tools/aws_ssi_registration.py) with the parameter --weblog and the new weblog name as value.
* AWS SSI scenario creation/update ALWAYS verify the scenario is declared in the utils/_context/_scenarios/__init__.py and the "vm_provision" field matched provision folder name. Use the class "InstallerAutoInjectionScenario" to define new scenarios. The scenario provision file is in (utils/build/virtual_machine/provisions/[name]/provision.yml). All new or update scenario provision ALWAYS MUST be validated using the section "Scenario Provision Structure" from the document docs/scenarios/onboarding_provision_section.md and the existing scenario provisions under the folder utils/build/virtual_machine/provisions. You MUST ALWAYS validate all updates or new code for a scenario provision on aws ssi using the [scenario provision yaml schema](mdc:utils/build/virtual_machine/provisions/scenario_provision_schema.yml)](utils/build/virtual_machine/weblogs/weblog_provision_schema.yml), this scheme validation should be done by you, never by the user.
* After creating a new scenario for AWS SSI tests, you ALWAYS must define which weblogs are compatible with this new scenario. Help the user to do this task by executing the script [scenario_registration](mdc:utils/scripts/ssi_wizards/tools/aws_ssi_registration.py) with the parameter --scenario and the new scenario name as value.
  [aws ssi json](mdc:utils/scripts/ci_orchestrators/aws_ssi.json) is the file that configures the compatibility between the virtual machines and the weblogs and which weblogs will run on each scenario.
* For provision files in system-tests AWS SSI scenarios, check both the scenario provision (in utils/build/virtual_machine/provisions/[name]/provision.yml) and weblog provision (in utils/build/virtual_machine/weblogs/[lang]/provision_[weblog].yml). These YAML files define environment variables, installation steps, and commands to run by OS type. Each provision step can include remote commands, local commands, and file copying operations with OS-specific targeting through os_type, os_distro, and os_cpu keys. Remember that the tested_components section must return a valid JSON with component versions.
* When analyzing results or troubleshooting AWS SSI tests, always consult `docs/scenarios/onboarding.md` (sections 'How to debug your environment and tests results' and 'Troubleshooting') as the authoritative reference to interpret the testsâ€™ standard output and the possible failures. 
* When analyzing results or troubleshooting AWS SSI tests, always consult `docs/scenarios/onboarding.md` (sections 'How to debug your environment and tests results' and 'Troubleshooting') try to mention the logs file that the user should check depending the failure type.

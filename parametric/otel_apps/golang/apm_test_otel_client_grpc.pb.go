// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: protos/apm_test_otel_client.proto

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// APMOtelClientClient is the client API for APMOtelClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APMOtelClientClient interface {
	StartOtelSpan(ctx context.Context, in *StartOtelSpanArgs, opts ...grpc.CallOption) (*StartOtelSpanReturn, error)
	FinishOtelSpan(ctx context.Context, in *FinishOtelSpanArgs, opts ...grpc.CallOption) (*FinishOtelSpanReturn, error)
	// rpc SpanSetMeta(SpanSetMetaArgs) returns (SpanSetMetaReturn) {}
	// rpc SpanSetMetric(SpanSetMetricArgs) returns (SpanSetMetricReturn) {}
	// rpc SpanSetError(SpanSetErrorArgs) returns (SpanSetErrorReturn) {}
	// rpc InjectHeaders(InjectHeadersArgs) returns (InjectHeadersReturn) {}
	FlushSpans(ctx context.Context, in *FlushOtelSpansArgs, opts ...grpc.CallOption) (*FlushOtelSpansReturn, error)
	FlushTraceStats(ctx context.Context, in *FlushOtelTraceStatsArgs, opts ...grpc.CallOption) (*FlushOtelTraceStatsReturn, error)
	StopTracer(ctx context.Context, in *StopOtelTracerArgs, opts ...grpc.CallOption) (*StopOtelTracerReturn, error)
}

type aPMOtelClientClient struct {
	cc grpc.ClientConnInterface
}

func NewAPMOtelClientClient(cc grpc.ClientConnInterface) APMOtelClientClient {
	return &aPMOtelClientClient{cc}
}

func (c *aPMOtelClientClient) StartOtelSpan(ctx context.Context, in *StartOtelSpanArgs, opts ...grpc.CallOption) (*StartOtelSpanReturn, error) {
	out := new(StartOtelSpanReturn)
	err := c.cc.Invoke(ctx, "/APMOtelClient/StartOtelSpan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPMOtelClientClient) FinishOtelSpan(ctx context.Context, in *FinishOtelSpanArgs, opts ...grpc.CallOption) (*FinishOtelSpanReturn, error) {
	out := new(FinishOtelSpanReturn)
	err := c.cc.Invoke(ctx, "/APMOtelClient/FinishOtelSpan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPMOtelClientClient) FlushSpans(ctx context.Context, in *FlushOtelSpansArgs, opts ...grpc.CallOption) (*FlushOtelSpansReturn, error) {
	out := new(FlushOtelSpansReturn)
	err := c.cc.Invoke(ctx, "/APMOtelClient/FlushSpans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPMOtelClientClient) FlushTraceStats(ctx context.Context, in *FlushOtelTraceStatsArgs, opts ...grpc.CallOption) (*FlushOtelTraceStatsReturn, error) {
	out := new(FlushOtelTraceStatsReturn)
	err := c.cc.Invoke(ctx, "/APMOtelClient/FlushTraceStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPMOtelClientClient) StopTracer(ctx context.Context, in *StopOtelTracerArgs, opts ...grpc.CallOption) (*StopOtelTracerReturn, error) {
	out := new(StopOtelTracerReturn)
	err := c.cc.Invoke(ctx, "/APMOtelClient/StopTracer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APMOtelClientServer is the server API for APMOtelClient service.
// All implementations must embed UnimplementedAPMOtelClientServer
// for forward compatibility
type APMOtelClientServer interface {
	StartOtelSpan(context.Context, *StartOtelSpanArgs) (*StartOtelSpanReturn, error)
	FinishOtelSpan(context.Context, *FinishOtelSpanArgs) (*FinishOtelSpanReturn, error)
	// rpc SpanSetMeta(SpanSetMetaArgs) returns (SpanSetMetaReturn) {}
	// rpc SpanSetMetric(SpanSetMetricArgs) returns (SpanSetMetricReturn) {}
	// rpc SpanSetError(SpanSetErrorArgs) returns (SpanSetErrorReturn) {}
	// rpc InjectHeaders(InjectHeadersArgs) returns (InjectHeadersReturn) {}
	FlushSpans(context.Context, *FlushOtelSpansArgs) (*FlushOtelSpansReturn, error)
	FlushTraceStats(context.Context, *FlushOtelTraceStatsArgs) (*FlushOtelTraceStatsReturn, error)
	StopTracer(context.Context, *StopOtelTracerArgs) (*StopOtelTracerReturn, error)
	mustEmbedUnimplementedAPMOtelClientServer()
}

// UnimplementedAPMOtelClientServer must be embedded to have forward compatible implementations.
type UnimplementedAPMOtelClientServer struct {
}

func (UnimplementedAPMOtelClientServer) StartOtelSpan(context.Context, *StartOtelSpanArgs) (*StartOtelSpanReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartOtelSpan not implemented")
}
func (UnimplementedAPMOtelClientServer) FinishOtelSpan(context.Context, *FinishOtelSpanArgs) (*FinishOtelSpanReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishOtelSpan not implemented")
}
func (UnimplementedAPMOtelClientServer) FlushSpans(context.Context, *FlushOtelSpansArgs) (*FlushOtelSpansReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlushSpans not implemented")
}
func (UnimplementedAPMOtelClientServer) FlushTraceStats(context.Context, *FlushOtelTraceStatsArgs) (*FlushOtelTraceStatsReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlushTraceStats not implemented")
}
func (UnimplementedAPMOtelClientServer) StopTracer(context.Context, *StopOtelTracerArgs) (*StopOtelTracerReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopTracer not implemented")
}
func (UnimplementedAPMOtelClientServer) mustEmbedUnimplementedAPMOtelClientServer() {}

// UnsafeAPMOtelClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APMOtelClientServer will
// result in compilation errors.
type UnsafeAPMOtelClientServer interface {
	mustEmbedUnimplementedAPMOtelClientServer()
}

func RegisterAPMOtelClientServer(s grpc.ServiceRegistrar, srv APMOtelClientServer) {
	s.RegisterService(&APMOtelClient_ServiceDesc, srv)
}

func _APMOtelClient_StartOtelSpan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartOtelSpanArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APMOtelClientServer).StartOtelSpan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/APMOtelClient/StartOtelSpan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APMOtelClientServer).StartOtelSpan(ctx, req.(*StartOtelSpanArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _APMOtelClient_FinishOtelSpan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishOtelSpanArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APMOtelClientServer).FinishOtelSpan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/APMOtelClient/FinishOtelSpan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APMOtelClientServer).FinishOtelSpan(ctx, req.(*FinishOtelSpanArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _APMOtelClient_FlushSpans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushOtelSpansArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APMOtelClientServer).FlushSpans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/APMOtelClient/FlushSpans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APMOtelClientServer).FlushSpans(ctx, req.(*FlushOtelSpansArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _APMOtelClient_FlushTraceStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushOtelTraceStatsArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APMOtelClientServer).FlushTraceStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/APMOtelClient/FlushTraceStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APMOtelClientServer).FlushTraceStats(ctx, req.(*FlushOtelTraceStatsArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _APMOtelClient_StopTracer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopOtelTracerArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APMOtelClientServer).StopTracer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/APMOtelClient/StopTracer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APMOtelClientServer).StopTracer(ctx, req.(*StopOtelTracerArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// APMOtelClient_ServiceDesc is the grpc.ServiceDesc for APMOtelClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var APMOtelClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "APMOtelClient",
	HandlerType: (*APMOtelClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartOtelSpan",
			Handler:    _APMOtelClient_StartOtelSpan_Handler,
		},
		{
			MethodName: "FinishOtelSpan",
			Handler:    _APMOtelClient_FinishOtelSpan_Handler,
		},
		{
			MethodName: "FlushSpans",
			Handler:    _APMOtelClient_FlushSpans_Handler,
		},
		{
			MethodName: "FlushTraceStats",
			Handler:    _APMOtelClient_FlushTraceStats_Handler,
		},
		{
			MethodName: "StopTracer",
			Handler:    _APMOtelClient_StopTracer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/apm_test_otel_client.proto",
}

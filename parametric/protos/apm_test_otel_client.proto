syntax = "proto3";

// Interface of APM clients to be used for shared testing.
service APMOtelClient {
  rpc StartOtelTracer(StartOtelTracerArgs) returns (StartOtelTracerReturn) {}
  rpc StartOtelSpan(StartOtelSpanArgs) returns (StartOtelSpanReturn) {}
  rpc EndOtelSpan(EndOtelSpanArgs) returns (EndOtelSpanReturn) {}
  rpc IsRecording(IsRecordingArgs) returns (IsRecordingReturn) {}
  rpc SpanContext(SpanContextArgs) returns (SpanContextReturn) {}
  rpc SetStatus(SetStatusArgs) returns (SetStatusReturn) {}
  rpc SetName(SetNameArgs) returns (SetNameReturn) {}
  rpc SetAttributes(SetAttributesArgs) returns (SetAttributesReturn) {}
  rpc ForceFlushOtel(ForceFlushOtelArgs) returns (ForceFlushOtelReturn) {}
  rpc FlushOtelSpans(FlushOtelSpansArgs) returns (FlushOtelSpansReturn) {}
  rpc FlushOtelTraceStats(FlushOtelTraceStatsArgs) returns (FlushOtelTraceStatsReturn) {}
  rpc StopOtelTracer(StopOtelTracerArgs) returns (StopOtelTracerReturn) {}
}

message StartOtelSpanArgs {
  string name = 1;
  optional bool new_root = 2;
  optional string parent_id = 3;
  optional uint64 span_kind = 9;
  optional string service = 4;
  optional string resource = 5;
  optional string type = 6;
  optional int64 timestamp = 7;
  Attributes attributes = 8;
}

//message DistributedHTTPHeaders {
//    map<string, string> http_headers = 9;
//}

message StartOtelSpanReturn {
  string span_id = 1;
  string trace_id = 2;
}
message EndOtelSpanArgs {
  string id = 1;
}
message EndOtelSpanReturn {}

message ForceFlushOtelArgs{
  uint32 seconds = 1;
}
message ForceFlushOtelReturn{
  bool success = 1;
}

message FlushOtelSpansArgs {}
message FlushOtelSpansReturn {}

message FlushOtelTraceStatsArgs {}
message FlushOtelTraceStatsReturn {}

message StopOtelTracerArgs {}
message StopOtelTracerReturn {}

message StartOtelTracerArgs {
  string name = 1;
  string env = 2;
  string service = 3;
}
message StartOtelTracerReturn {}

message IsRecordingArgs {
  string span_id = 1;
}
message IsRecordingReturn {
  bool is_recording = 1;
}

message SetStatusArgs {
  string span_id = 1;
  string code = 2;
  string description = 3;
}
message SetStatusReturn {}

message SetNameArgs {
  string span_id = 1;
  string name = 2;
}
message SetNameReturn {}

message SetAttributesArgs {
  string span_id = 1;
  Attributes attributes = 2;
}
message SetAttributesReturn {}

message Attributes {
  map<string, ListVal> key_vals = 3;
}

message ListVal {
  repeated AttrVal val = 1;
}

message AttrVal {
  oneof val {
    bool bool_val = 1;
    string string_val = 2;
    double double_val = 3;
    int64 integer_val = 4;
  }
}

message SpanContextArgs {
  string span_id = 1;
}
message SpanContextReturn {
  string span_id = 1;
  string trace_id = 2;
  string trace_flags = 3;
  string trace_state = 4;
  bool remote = 5;
}
syntax = "proto3";

// Interface of APM clients to be used for shared testing.
service APMOtelClient {
  rpc StartOtelTracer(StartOtelTracerArgs) returns (StartOtelTracerReturn) {}
  rpc StartOtelSpan(StartOtelSpanArgs) returns (StartOtelSpanReturn) {}
  rpc EndOtelSpan(EndOtelSpanArgs) returns (EndOtelSpanReturn) {}
  rpc IsRecording(IsRecordingArgs) returns (IsRecordingReturn) {}
  rpc SpanContext(SpanContextArgs) returns (SpanContextReturn) {}
  rpc SetStatus(SetStatusArgs) returns (SetStatusReturn) {}
  rpc SetName(SetNameArgs) returns (SetNameReturn) {}
  rpc SetAttributes(SetAttributesArgs) returns (SetAttributesReturn) {}
  rpc FlushOtelSpans(FlushOtelSpansArgs) returns (FlushOtelSpansReturn) {}
  rpc FlushOtelTraceStats(FlushOtelTraceStatsArgs) returns (FlushOtelTraceStatsReturn) {}
  rpc StopOtelTracer(StopOtelTracerArgs) returns (StopOtelTracerReturn) {}
}

message StartOtelSpanArgs {
  string name = 1;
  optional bool new_root = 2;
  optional uint64 span_kind = 3;
  optional string service = 4;
  optional string resource = 5;
  optional string type = 6;
  optional string timestamp = 7;
  optional span_tags tags = 8;
}
message span_tags {
  map<string, string> tags = 9;
}
//message DistributedHTTPHeaders {
//    map<string, string> http_headers = 9;
//}

message StartOtelSpanReturn {
  bytes span_id = 1;
  bytes trace_id = 2;
}
message EndOtelSpanArgs {
  bytes id = 1;
}
message EndOtelSpanReturn {}

message FlushOtelSpansArgs {}
message FlushOtelSpansReturn {}

message FlushOtelTraceStatsArgs {}
message FlushOtelTraceStatsReturn {}

message StopOtelTracerArgs {}
message StopOtelTracerReturn {}

message StartOtelTracerArgs {}
message StartOtelTracerReturn {}

message IsRecordingArgs {}
message IsRecordingReturn {}

message SpanContextArgs {}
message SpanContextReturn {}

message SetStatusArgs {}
message SetStatusReturn {}

message SetNameArgs {}
message SetNameReturn {}

message SetAttributesArgs {}
message SetAttributesReturn {}

include:
  - remote: https://gitlab-templates.ddbuild.io/libdatadog/include/single-step-instrumentation-tests.yml

stages:
  - SSI_TESTS
  - DOCKER_SSI
  - K8S_LIB_INJECTION

ssi_tests:
  image: registry.ddbuild.io/images/ci_docker_base
  tags: ["arch:amd64"]
  stage: SSI_TESTS
  script:
    - echo "NO AWS TESTS TO RUN"

.base_docker_ssi_job: 
    image: registry.ddbuild.io/ci/libdatadog-build/system-tests:48436362
    needs: []
    before_script: |
        export FP_IMPORT_URL=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.fp-import-url --with-decryption --query "Parameter.Value" --out text)
        export FP_API_KEY=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.fp-api-key --with-decryption --query "Parameter.Value" --out text)
    after_script: |
        echo "FP_IMPORT_URL: ${FP_IMPORT_URL}"
        SCENARIO_SUFIX=$(echo "DOCKER_SSI" | tr "[:upper:]" "[:lower:]")
        REPORTS_PATH="reports/"
        mkdir -p "$REPORTS_PATH"
        cp -R logs_"${SCENARIO_SUFIX}" $REPORTS_PATH/
        cleaned_base_image=$(echo "$IMAGE" | tr -cd "[:alnum:]_")
        cleaned_arch=$(echo "$ARCH" | tr -cd "[:alnum:]_")
        cleaned_runtime=$(echo "$RUNTIME" | tr -cd "[:alnum:]_")
        mv "$REPORTS_PATH"/logs_"${SCENARIO_SUFIX}" "$REPORTS_PATH"/logs_"${TEST_LIBRARY}"_"${WEBLOG}"_"${SCENARIO_SUFIX}_${cleaned_base_image}_${cleaned_arch}_${cleaned_runtime}"
        if [ "$CI_COMMIT_BRANCH" = "main" ]; then
          for folder in reports/logs*/ ; do
            echo "Checking folder: ${folder}"
            for filename in ./${folder}feature_parity.json; do
              if [ -e ${filename} ]
              then
                echo "Processing report: ${filename}"
                curl -X POST ${FP_IMPORT_URL} --fail --header "Content-Type: application/json" --header "FP_API_KEY: ${FP_API_KEY}" --data "@${filename}" --include
              fi
            done
          done
        fi
    artifacts: 
      when: always 
      paths: 
        - reports/

.base_job_onboarding_system_tests:
    extends: .base_job_onboarding
    needs: []
    script:
        - ./build.sh -i runner
        - ./run.sh $SCENARIO --vm-weblog ${WEBLOG} --vm-env prod --vm-library ${TEST_LIBRARY} --vm-provider aws --vm-default-vms All --vm-only ${VM}
    after_script: |
        SCENARIO_SUFIX=$(echo "$SCENARIO" | tr "[:upper:]" "[:lower:]")
        REPORTS_PATH="reports/"
        mkdir -p "$REPORTS_PATH"
        cp -R logs_"${SCENARIO_SUFIX}" "$REPORTS_PATH/"
        cp logs_"${SCENARIO_SUFIX}"/feature_parity.json "$REPORTS_PATH"/"${SCENARIO_SUFIX}".json
        mv "$REPORTS_PATH"/logs_"${SCENARIO_SUFIX}" "$REPORTS_PATH"/logs_"${TEST_LIBRARY}"_"${ONBOARDING_FILTER_WEBLOG}"_"${SCENARIO_SUFIX}_${DEFAULT_VMS}"
        if [ "$CI_COMMIT_BRANCH" = "main" ]; then
          export FP_IMPORT_URL=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.fp-import-url --with-decryption --query "Parameter.Value" --out text)
          export FP_API_KEY=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.fp-api-key --with-decryption --query "Parameter.Value" --out text)
          for folder in reports/logs*/ ; do
            echo "Checking folder: ${folder}"
            for filename in ./${folder}*_feature_parity.json; do
              if [ -e ${filename} ]
              then
                echo "Processing report: ${filename}"
                curl -X POST ${FP_IMPORT_URL} --fail --header "Content-Type: application/json" --header "FP_API_KEY: ${FP_API_KEY}" --data "@${filename}" --include
              fi
            done
          done
        fi
    artifacts:
        when: always
        paths:
            - reports/

.k8s_lib_injection_base:
  image: registry.ddbuild.io/ci/libdatadog-build/system-tests:48436362
  tags: [ "runner:docker" ]
  stage: K8S_LIB_INJECTION
  allow_failure: false
  variables:
    TEST_LIBRARY: "xyz"
    K8S_WEBLOG: "xyz"
    K8S_WEBLOG_IMG: "xyz"
    K8S_SCENARIO: "xyz"
    K8S_LIB_INIT_IMG: "xyz"
    K8S_CLUSTER_IMG: "xyz"
    K8S_INJECTOR_IMG: "xyz"
  before_script: |
    export FP_IMPORT_URL=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.fp-import-url
    --with-decryption --query "Parameter.Value" --out text)
    export FP_API_KEY=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.fp-api-key
    --with-decryption --query "Parameter.Value" --out text)
    export DD_API_KEY_ONBOARDING=$(aws ssm get-parameter --region us-east-1 --name ci.${CI_PROJECT_NAME}.dd-api-key-onboarding --with-decryption --query "Parameter.Value" --out text)
    export DD_APP_KEY_ONBOARDING=$(aws ssm get-parameter --region us-east-1 --name ci.${CI_PROJECT_NAME}.dd-app-key-onboarding --with-decryption --query "Parameter.Value" --out text)
  script:
    - ./build.sh -i runner # rebuild runner in case there were changes
    - source venv/bin/activate
    - python --version
    - pip freeze
    - ./run.sh ${K8S_SCENARIO} --k8s-library ${TEST_LIBRARY} --k8s-weblog ${K8S_WEBLOG} --k8s-weblog-img ${K8S_WEBLOG_IMG} --k8s-lib-init-img ${K8S_LIB_INIT_IMG} --k8s-injector-img ${K8S_INJECTOR_IMG} --k8s-cluster-img ${K8S_CLUSTER_IMG} --report-run-url $CI_JOB_URL --report-environment $ONBOARDING_FILTER_ENV
  after_script: |
    mkdir -p reports
    cp -R logs_*/ reports/
    kind delete clusters --all || true
    if [ "$CI_COMMIT_BRANCH" = "main" ]; then
      for folder in reports/logs*/ ; do
        echo "Checking folder: ${folder}"
         for filename in ./${folder}feature_parity.json; do
           if [ -e ${filename} ]
           then
              echo "Processing report: ${filename}"
             curl -X POST ${FP_IMPORT_URL} --fail --header "Content-Type: application/json" --header "FP_API_KEY: ${FP_API_KEY}" --data "@${filename}" --include
           fi
        done
      done
      fi
  artifacts:
    when: always
    paths:
      - reports/
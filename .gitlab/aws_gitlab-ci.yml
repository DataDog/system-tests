include:
  - remote: https://gitlab-templates.ddbuild.io/libdatadog/include/single-step-instrumentation-tests.yml

stages:
  - SSI_TESTS
  - DOCKER_SSI
  - K8S_LIB_INJECTION

ssi_tests:
  image: registry.ddbuild.io/images/ci_docker_base
  tags: ["arch:amd64"]
  stage: SSI_TESTS
  script:
    - echo "NO AWS TESTS TO RUN"

.base_docker_ssi_job: 
    image: registry.ddbuild.io/ci/libdatadog-build/system-tests:48436362
    needs: []
    allow_failure: false
    after_script: |
        SCENARIO_SUFIX=$(echo "DOCKER_SSI" | tr "[:upper:]" "[:lower:]")
        mkdir -p reports/
        if [ "$CI_PROJECT_NAME" = "system-tests" ]; then
            cp -R logs_"${SCENARIO_SUFIX}" reports/
        else
            cp -R system-tests/logs_"${SCENARIO_SUFIX}" reports/
        fi       
        if [ "$CI_COMMIT_BRANCH" = "robertomonteromiguel/onboarding_gitlab_ci" ] && [ "$CI_PROJECT_NAME" = "system-tests" ]; then
          export FP_IMPORT_URL=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.fp-import-url --with-decryption --query "Parameter.Value" --out text)
          export FP_API_KEY=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.fp-api-key --with-decryption --query "Parameter.Value" --out text)
          for folder in reports/logs*/ ; do
            echo "Checking folder: ${folder}"
            for filename in ./${folder}feature_parity.json; do
              if [ -e ${filename} ]
              then
                echo "Processing report: ${filename} to Feature Parity ${FP_IMPORT_URL}"
                #curl -X POST ${FP_IMPORT_URL} --fail --header "Content-Type: application/json" --header "FP_API_KEY: ${FP_API_KEY}" --data "@${filename}" --include
              fi
            done
          done
        fi
    artifacts: 
      when: always 
      paths: 
        - reports/

.base_job_onboarding_system_tests:
    extends: .base_job_onboarding
    needs: []
    allow_failure: false
    script:
        - ./build.sh -i runner
        - ./run.sh $SCENARIO --vm-weblog ${WEBLOG} --vm-env ${ONBOARDING_FILTER_ENV} --vm-library ${TEST_LIBRARY} --vm-provider aws --vm-default-vms All --vm-only ${VM} --report-run-url ${CI_JOB_URL} --report-environment ${ONBOARDING_FILTER_ENV}
    after_script: |
        SCENARIO_SUFIX=$(echo "$SCENARIO" | tr "[:upper:]" "[:lower:]")
        mkdir -p reports/
        if [ "$CI_PROJECT_NAME" = "system-tests" ]; then
            cp -R logs_"${SCENARIO_SUFIX}" reports/
        else
            cp -R system-tests/logs_"${SCENARIO_SUFIX}" reports/
        fi          
        if [ "$CI_COMMIT_BRANCH" = "robertomonteromiguel/onboarding_gitlab_ci" ] && [ "$CI_PROJECT_NAME" = "system-tests" ]; then
          export FP_IMPORT_URL=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.fp-import-url --with-decryption --query "Parameter.Value" --out text)
          export FP_API_KEY=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.fp-api-key --with-decryption --query "Parameter.Value" --out text)
          for folder in reports/logs*/ ; do
            echo "Checking folder: ${folder}"
            for filename in ./${folder}*_feature_parity.json; do
              if [ -e ${filename} ]
              then
                echo "Processing report: ${filename} to Feature Parity ${FP_IMPORT_URL}"
                #curl -X POST ${FP_IMPORT_URL} --fail --header "Content-Type: application/json" --header "FP_API_KEY: ${FP_API_KEY}" --data "@${filename}" --include
              fi
            done
          done
        fi
    artifacts:
        when: always
        paths:
            - reports/

.k8s_lib_injection_base:
  image: registry.ddbuild.io/ci/libdatadog-build/system-tests:48436362
  tags: [ "runner:docker" ]
  needs: []
  stage: K8S_LIB_INJECTION
  allow_failure: false
  before_script: |
    export DD_API_KEY=$(aws ssm get-parameter --region us-east-1 --name ci.${CI_PROJECT_NAME}.dd-api-key-onboarding --with-decryption --query "Parameter.Value" --out text)
    export DD_APP_KEY=$(aws ssm get-parameter --region us-east-1 --name ci.${CI_PROJECT_NAME}.dd-app-key-onboarding --with-decryption --query "Parameter.Value" --out text)
  script:
    - ./build.sh -i runner # rebuild runner in case there were changes
    - source venv/bin/activate
    - python --version
    - pip freeze
    - ./run.sh ${K8S_SCENARIO} --k8s-library ${TEST_LIBRARY} --k8s-weblog ${K8S_WEBLOG} --k8s-weblog-img ${K8S_WEBLOG_IMG} --k8s-lib-init-img ${K8S_LIB_INIT_IMG} --k8s-injector-img ${K8S_INJECTOR_IMG} --k8s-cluster-img ${K8S_CLUSTER_IMG} --report-run-url $CI_JOB_URL --report-environment ${REPORT_ENVIRONMENT}
  after_script: |
    kind delete clusters --all || true
    mkdir -p reports
    if [ "$CI_PROJECT_NAME" = "system-tests" ]; then
        cp -R logs_*/ reports/
    else
        cp -R system-tests/logs_*/ reports/
    fi    
    if [ "$CI_COMMIT_BRANCH" = "robertomonteromiguel/onboarding_gitlab_ci" ] && [ "$CI_PROJECT_NAME" = "system-tests" ]; then
      export FP_IMPORT_URL=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.fp-import-url --with-decryption --query "Parameter.Value" --out text)
      export FP_API_KEY=$(aws ssm get-parameter --region us-east-1 --name ci.system-tests.fp-api-key --with-decryption --query "Parameter.Value" --out text)
      for folder in reports/logs*/ ; do
        echo "Checking folder: ${folder}"
         for filename in ./${folder}feature_parity.json; do
           if [ -e ${filename} ]
           then
              echo "Processing report: ${filename} to Feature Parity ${FP_IMPORT_URL}"
              #curl -X POST ${FP_IMPORT_URL} --fail --header "Content-Type: application/json" --header "FP_API_KEY: ${FP_API_KEY}" --data "@${filename}" --include
           fi
        done
      done
      fi
  artifacts:
    when: always
    paths:
      - reports/
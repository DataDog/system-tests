# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from apm_test_client.pb import apm_test_client_pb2 as apm__test__client_dot_pb_dot_apm__test__client__pb2


class APMClientStub(object):
    """Interface of APM Clients to be used for shared testing."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartSpan = channel.unary_unary(
            "/APMClient/StartSpan",
            request_serializer=apm__test__client_dot_pb_dot_apm__test__client__pb2.StartSpanArgs.SerializeToString,
            response_deserializer=apm__test__client_dot_pb_dot_apm__test__client__pb2.StartSpanReturn.FromString,
        )
        self.FinishSpan = channel.unary_unary(
            "/APMClient/FinishSpan",
            request_serializer=apm__test__client_dot_pb_dot_apm__test__client__pb2.FinishSpanArgs.SerializeToString,
            response_deserializer=apm__test__client_dot_pb_dot_apm__test__client__pb2.FinishSpanReturn.FromString,
        )
        self.FlushSpans = channel.unary_unary(
            "/APMClient/FlushSpans",
            request_serializer=apm__test__client_dot_pb_dot_apm__test__client__pb2.FlushSpansArgs.SerializeToString,
            response_deserializer=apm__test__client_dot_pb_dot_apm__test__client__pb2.FlushSpansReturn.FromString,
        )


class APMClientServicer(object):
    """Interface of APM Clients to be used for shared testing."""

    def StartSpan(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def FinishSpan(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def FlushSpans(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_APMClientServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "StartSpan": grpc.unary_unary_rpc_method_handler(
            servicer.StartSpan,
            request_deserializer=apm__test__client_dot_pb_dot_apm__test__client__pb2.StartSpanArgs.FromString,
            response_serializer=apm__test__client_dot_pb_dot_apm__test__client__pb2.StartSpanReturn.SerializeToString,
        ),
        "FinishSpan": grpc.unary_unary_rpc_method_handler(
            servicer.FinishSpan,
            request_deserializer=apm__test__client_dot_pb_dot_apm__test__client__pb2.FinishSpanArgs.FromString,
            response_serializer=apm__test__client_dot_pb_dot_apm__test__client__pb2.FinishSpanReturn.SerializeToString,
        ),
        "FlushSpans": grpc.unary_unary_rpc_method_handler(
            servicer.FlushSpans,
            request_deserializer=apm__test__client_dot_pb_dot_apm__test__client__pb2.FlushSpansArgs.FromString,
            response_serializer=apm__test__client_dot_pb_dot_apm__test__client__pb2.FlushSpansReturn.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler("APMClient", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class APMClient(object):
    """Interface of APM Clients to be used for shared testing."""

    @staticmethod
    def StartSpan(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/APMClient/StartSpan",
            apm__test__client_dot_pb_dot_apm__test__client__pb2.StartSpanArgs.SerializeToString,
            apm__test__client_dot_pb_dot_apm__test__client__pb2.StartSpanReturn.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def FinishSpan(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/APMClient/FinishSpan",
            apm__test__client_dot_pb_dot_apm__test__client__pb2.FinishSpanArgs.SerializeToString,
            apm__test__client_dot_pb_dot_apm__test__client__pb2.FinishSpanReturn.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def FlushSpans(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/APMClient/FlushSpans",
            apm__test__client_dot_pb_dot_apm__test__client__pb2.FlushSpansArgs.SerializeToString,
            apm__test__client_dot_pb_dot_apm__test__client__pb2.FlushSpansReturn.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
